Search.setIndex({"docnames": ["doc/COGENT3_LICENSE", "doc/api/__init__/cogent3.__init__.available_apps", "doc/api/__init__/cogent3.__init__.available_codes", "doc/api/__init__/cogent3.__init__.available_models", "doc/api/__init__/cogent3.__init__.available_moltypes", "doc/api/__init__/cogent3.__init__.get_code", "doc/api/__init__/cogent3.__init__.get_model", "doc/api/__init__/cogent3.__init__.get_moltype", "doc/api/__init__/cogent3.__init__.load_aligned_seqs", "doc/api/__init__/cogent3.__init__.load_delimited", "doc/api/__init__/cogent3.__init__.load_seq", "doc/api/__init__/cogent3.__init__.load_table", "doc/api/__init__/cogent3.__init__.load_tree", "doc/api/__init__/cogent3.__init__.load_unaligned_seqs", "doc/api/__init__/cogent3.__init__.make_aligned_seqs", "doc/api/__init__/cogent3.__init__.make_seq", "doc/api/__init__/cogent3.__init__.make_table", "doc/api/__init__/cogent3.__init__.make_tree", "doc/api/__init__/cogent3.__init__.make_unaligned_seqs", "doc/api/alignment/alignment", "doc/api/alignment/classes/cogent3.core.alignment.Alignment", "doc/api/alignment/classes/cogent3.core.alignment.ArrayAlignment", "doc/api/alignment/classes/cogent3.core.alignment.SequenceCollection", "doc/api/alphabet/alphabet", "doc/api/alphabet/classes/cogent3.core.alphabet.Alphabet", "doc/api/apps/composable.define_app", "doc/api/genetic_code/classes/cogent3.core.genetic_code.GeneticCode", "doc/api/genetic_code/genetic_code", "doc/api/index", "doc/api/moltype/classes/cogent3.core.moltype.MolType", "doc/api/moltype/moltype", "doc/api/sequence/classes/cogent3.core.sequence.DnaSequence", "doc/api/sequence/classes/cogent3.core.sequence.ProteinSequence", "doc/api/sequence/classes/cogent3.core.sequence.RnaSequence", "doc/api/sequence/sequence", "doc/api/table/classes/cogent3.parse.table.FilteringParser", "doc/api/table/classes/cogent3.util.table.Columns", "doc/api/table/classes/cogent3.util.table.Table", "doc/api/table/table", "doc/api/tree/classes/cogent3.core.tree.PhyloNode", "doc/api/tree/tree", "doc/app/align-codon", "doc/app/align-nucleotide", "doc/app/align-protein", "doc/app/app-get", "doc/app/app-help", "doc/app/app-overview", "doc/app/available-apps", "doc/app/dstore", "doc/app/evo-ancestral-states", "doc/app/evo-dt-nuc-model", "doc/app/evo-extract-model-stats", "doc/app/evo-hypothesis", "doc/app/evo-model", "doc/app/evo-model-timehet", "doc/app/evo-model-with-tree", "doc/app/evo-natsel_neutral", "doc/app/evo-natsel_sitehet", "doc/app/evo-natsel_timehet", "doc/app/evo-natsel_zhang", "doc/app/evo-nstat-codon-model", "doc/app/evo-tr-codon-model", "doc/app/evo-tr-nuc-model", "doc/app/index", "doc/app/not-completed", "doc/app/user_function", "doc/cookbook/DNA_and_RNA_sequences", "doc/cookbook/alignments", "doc/cookbook/alphabet", "doc/cookbook/annotations", "doc/cookbook/building_alignments", "doc/cookbook/building_phylogenies", "doc/cookbook/calc_genetic_distance", "doc/cookbook/evo_modelling", "doc/cookbook/genetic_code", "doc/cookbook/index", "doc/cookbook/loading_sequences", "doc/cookbook/loading_tabular", "doc/cookbook/manipulating_biological_data", "doc/cookbook/moltypes", "doc/cookbook/protein_sequences", "doc/cookbook/simple_trees", "doc/cookbook/tables", "doc/cookbook/union_dict", "doc/cookbook/useful_utilities", "doc/cookbook/what_codes", "doc/data_file_links", "doc/draw/aln/plot_aln-coevolution", "doc/draw/aln/plot_aln-dotplot-1", "doc/draw/aln/plot_aln-dotplot-2", "doc/draw/aln/plot_aln-gaps-per-seq", "doc/draw/aln/plot_aln-info-plot", "doc/draw/aln/plot_aln-seqlogo", "doc/draw/index", "doc/draw/tree/plot_tree-angular", "doc/draw/tree/plot_tree-circular", "doc/draw/tree/plot_tree-radial", "doc/draw/tree/plot_tree-square", "doc/draw/tree/plot_tree-support", "doc/examples/align_codons_to_protein", "doc/examples/calculate_UPGMA_cluster", "doc/examples/calculate_neigbourjoining_tree", "doc/examples/calculate_pairwise_distances", "doc/examples/codon_models", "doc/examples/coevolution", "doc/examples/complete_seq_features", "doc/examples/empirical_protein_models", "doc/examples/hmm_par_heterogeneity", "doc/examples/index", "doc/examples/manipulating_tree_nodes", "doc/examples/neutral_test", "doc/examples/parallel", "doc/examples/parametric_bootstrap", "doc/examples/period_estimation", "doc/examples/phylo_by_ls", "doc/examples/rate_heterogeneity", "doc/examples/relative_rate", "doc/examples/scope_model_params_on_trees", "doc/examples/seq_features", "doc/examples/simple", "doc/examples/simulate_alignment", "doc/examples/testing_multi_loci", "doc/general", "doc/index", "doc/install", "doc/licenses", "doc/pycogent", "general", "genindex", "history", "index", "projects"], "filenames": ["doc/COGENT3_LICENSE.rst", "doc/api/__init__/cogent3.__init__.available_apps.rst", "doc/api/__init__/cogent3.__init__.available_codes.rst", "doc/api/__init__/cogent3.__init__.available_models.rst", "doc/api/__init__/cogent3.__init__.available_moltypes.rst", "doc/api/__init__/cogent3.__init__.get_code.rst", "doc/api/__init__/cogent3.__init__.get_model.rst", "doc/api/__init__/cogent3.__init__.get_moltype.rst", "doc/api/__init__/cogent3.__init__.load_aligned_seqs.rst", "doc/api/__init__/cogent3.__init__.load_delimited.rst", "doc/api/__init__/cogent3.__init__.load_seq.rst", "doc/api/__init__/cogent3.__init__.load_table.rst", "doc/api/__init__/cogent3.__init__.load_tree.rst", "doc/api/__init__/cogent3.__init__.load_unaligned_seqs.rst", "doc/api/__init__/cogent3.__init__.make_aligned_seqs.rst", "doc/api/__init__/cogent3.__init__.make_seq.rst", "doc/api/__init__/cogent3.__init__.make_table.rst", "doc/api/__init__/cogent3.__init__.make_tree.rst", "doc/api/__init__/cogent3.__init__.make_unaligned_seqs.rst", "doc/api/alignment/alignment.rst", "doc/api/alignment/classes/cogent3.core.alignment.Alignment.rst", "doc/api/alignment/classes/cogent3.core.alignment.ArrayAlignment.rst", "doc/api/alignment/classes/cogent3.core.alignment.SequenceCollection.rst", "doc/api/alphabet/alphabet.rst", "doc/api/alphabet/classes/cogent3.core.alphabet.Alphabet.rst", "doc/api/apps/composable.define_app.rst", "doc/api/genetic_code/classes/cogent3.core.genetic_code.GeneticCode.rst", "doc/api/genetic_code/genetic_code.rst", "doc/api/index.rst", "doc/api/moltype/classes/cogent3.core.moltype.MolType.rst", "doc/api/moltype/moltype.rst", "doc/api/sequence/classes/cogent3.core.sequence.DnaSequence.rst", "doc/api/sequence/classes/cogent3.core.sequence.ProteinSequence.rst", "doc/api/sequence/classes/cogent3.core.sequence.RnaSequence.rst", "doc/api/sequence/sequence.rst", "doc/api/table/classes/cogent3.parse.table.FilteringParser.rst", "doc/api/table/classes/cogent3.util.table.Columns.rst", "doc/api/table/classes/cogent3.util.table.Table.rst", "doc/api/table/table.rst", "doc/api/tree/classes/cogent3.core.tree.PhyloNode.rst", "doc/api/tree/tree.rst", "doc/app/align-codon.rst", "doc/app/align-nucleotide.rst", "doc/app/align-protein.rst", "doc/app/app-get.rst", "doc/app/app-help.rst", "doc/app/app-overview.rst", "doc/app/available-apps.rst", "doc/app/dstore.rst", "doc/app/evo-ancestral-states.rst", "doc/app/evo-dt-nuc-model.rst", "doc/app/evo-extract-model-stats.rst", "doc/app/evo-hypothesis.rst", "doc/app/evo-model.rst", "doc/app/evo-model-timehet.rst", "doc/app/evo-model-with-tree.rst", "doc/app/evo-natsel_neutral.rst", "doc/app/evo-natsel_sitehet.rst", "doc/app/evo-natsel_timehet.rst", "doc/app/evo-natsel_zhang.rst", "doc/app/evo-nstat-codon-model.rst", "doc/app/evo-tr-codon-model.rst", "doc/app/evo-tr-nuc-model.rst", "doc/app/index.rst", "doc/app/not-completed.rst", "doc/app/user_function.rst", "doc/cookbook/DNA_and_RNA_sequences.rst", "doc/cookbook/alignments.rst", "doc/cookbook/alphabet.rst", "doc/cookbook/annotations.rst", "doc/cookbook/building_alignments.rst", "doc/cookbook/building_phylogenies.rst", "doc/cookbook/calc_genetic_distance.rst", "doc/cookbook/evo_modelling.rst", "doc/cookbook/genetic_code.rst", "doc/cookbook/index.rst", "doc/cookbook/loading_sequences.rst", "doc/cookbook/loading_tabular.rst", "doc/cookbook/manipulating_biological_data.rst", "doc/cookbook/moltypes.rst", "doc/cookbook/protein_sequences.rst", "doc/cookbook/simple_trees.rst", "doc/cookbook/tables.rst", "doc/cookbook/union_dict.rst", "doc/cookbook/useful_utilities.rst", "doc/cookbook/what_codes.rst", "doc/data_file_links.rst", "doc/draw/aln/plot_aln-coevolution.rst", "doc/draw/aln/plot_aln-dotplot-1.rst", "doc/draw/aln/plot_aln-dotplot-2.rst", "doc/draw/aln/plot_aln-gaps-per-seq.rst", "doc/draw/aln/plot_aln-info-plot.rst", "doc/draw/aln/plot_aln-seqlogo.rst", "doc/draw/index.rst", "doc/draw/tree/plot_tree-angular.rst", "doc/draw/tree/plot_tree-circular.rst", "doc/draw/tree/plot_tree-radial.rst", "doc/draw/tree/plot_tree-square.rst", "doc/draw/tree/plot_tree-support.rst", "doc/examples/align_codons_to_protein.rst", "doc/examples/calculate_UPGMA_cluster.rst", "doc/examples/calculate_neigbourjoining_tree.rst", "doc/examples/calculate_pairwise_distances.rst", "doc/examples/codon_models.rst", "doc/examples/coevolution.rst", "doc/examples/complete_seq_features.rst", "doc/examples/empirical_protein_models.rst", "doc/examples/hmm_par_heterogeneity.rst", "doc/examples/index.rst", "doc/examples/manipulating_tree_nodes.rst", "doc/examples/neutral_test.rst", "doc/examples/parallel.rst", "doc/examples/parametric_bootstrap.rst", "doc/examples/period_estimation.rst", "doc/examples/phylo_by_ls.rst", "doc/examples/rate_heterogeneity.rst", "doc/examples/relative_rate.rst", "doc/examples/scope_model_params_on_trees.rst", "doc/examples/seq_features.rst", "doc/examples/simple.rst", "doc/examples/simulate_alignment.rst", "doc/examples/testing_multi_loci.rst", "doc/general.rst", "doc/index.rst", "doc/install.rst", "doc/licenses.rst", "doc/pycogent.rst", "general.rst", "genindex.rst", "history.rst", "index.rst", "projects.rst"], "titles": ["Cogent3 License", "available_apps", "available_codes", "available_models", "available_moltypes", "get_code", "get_model", "get_moltype", "load_aligned_seqs", "load_delimited", "load_seq", "load_table", "load_tree", "load_unaligned_seqs", "make_aligned_seqs", "make_seq", "make_table", "make_tree", "make_unaligned_seqs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">alignment</span></code>", "Alignment", "ArrayAlignment", "SequenceCollection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">alphabet</span></code>", "Alphabet", "define_app", "GeneticCode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">genetic_code</span></code>", "API", "MolType", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">moltype</span></code>", "DnaSequence", "ProteinSequence", "RnaSequence", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sequence</span></code>", "FilteringParser", "Columns", "Table", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">table</span></code>", "PhyloNode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tree</span></code>", "Using a codon model", "Using a nucleotide model", "Using a protein model", "Getting an app", "Getting help on an app", "Overview of using apps", "Displaying installed apps", "Specifying data for analysis", "Reconstructing ancestral states", "Applying a discrete-time, non-stationary nucleotide model", "Extracting maximum likelihood estimates from a <code class=\"docutils literal notranslate\"><span class=\"pre\">model_result</span></code>", "Testing a hypothesis \u2013 non-stationary or time-reversible", "Apply a non-stationary nucleotide model to an alignment with 3 sequences", "Specifying a non-stationary model with time-heterogeneous parameters", "Apply a non-stationary nucleotide model to an alignment with a tree", "<code class=\"docutils literal notranslate\"><span class=\"pre\">natsel_neutral</span></code> \u2013 a test for selective neutrality", "<code class=\"docutils literal notranslate\"><span class=\"pre\">natsel_sitehet</span></code> \u2013 a test of site heterogeneity", "<code class=\"docutils literal notranslate\"><span class=\"pre\">natsel_timehet</span></code> \u2013 a test of branch heterogeneity", "<code class=\"docutils literal notranslate\"><span class=\"pre\">natsel_zhang</span></code> \u2013 a branch-site test", "Applying GNC, a non-stationary codon model", "Applying a time-reversible codon model", "Applying a time-reversible nucleotide model", "The <code class=\"docutils literal notranslate\"><span class=\"pre\">apps</span></code>", "Tracking records that could not be processed", "Turn your functions into composable apps", "<code class=\"docutils literal notranslate\"><span class=\"pre\">Sequence</span></code>", "Sequence Collections and Alignments", "Alphabets", "Annotations", "Building alignments", "Building phylogenies", "Genetic distance calculation", "Evolutionary Analysis Using Likelihood", "Translate DNA sequences", "Cookbook", "Loading an alignment from a file or url", "Loading a csv file", "Manipulating biological data", "Molecular types", "Protein sequences", "Trees", "Tabular data", "<code class=\"docutils literal notranslate\"><span class=\"pre\">UnionDict</span></code> \u2013 a dict with set like operations and keys as attributes", "Useful Utilities", "Available genetic codes", "Data Files Used in the Documentation", "Coevolution analysis", "Dotplot basics", "Dotplot with annotated sequences", "Counting gaps per sequence", "Information analysis of an alignment", "Sequence logos", "Image Gallery", "Angular Dendrogram Style", "Circular Dendrogram Style", "Radial Dendrogram Style", "Square Dendrogram Style", "Showing Bootstrap Support", "Map protein alignment gaps to DNA alignment gaps", "Make a UPGMA cluster", "Make a neighbor joining tree", "Calculate pairwise distances between sequences", "Using codon models", "Perform a coevolutionary analysis on biological sequence alignments", "Annotating alignments and sequences", "Use an empirical protein substitution model", "Evaluate process heterogeneity using a Hidden Markov Model", "Tutorials", "Manipulation of Tree Node Objects", "A test of the neutral theory", "Parallel computations", "Performing a parametric bootstrap", "Estimating periodic signals", "Phylogenetic reconstruction by least squares", "Analysis of rate heterogeneity", "Performing a relative rate test", "Allowing substitution model parameters to differ between branches", "Advanced sequence handling", "The simplest script", "Simulate an alignment", "Likelihood analysis of multiple loci", "Posting Bugs", "Documentation", "Installation", "License", "How does <code class=\"docutils literal notranslate\"><span class=\"pre\">cogent3</span></code> relate to PyCogent?", "Posting Bugs", "Index", "Project History", "Making Sense from Sequence", "Projects using <code class=\"docutils literal notranslate\"><span class=\"pre\">cogent3</span></code>"], "terms": {"copyright": [0, 125], "c": [0, 20, 21, 22, 24, 31, 32, 33, 37, 43, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 67, 68, 69, 70, 71, 73, 74, 76, 77, 79, 81, 82, 83, 84, 85, 92, 99, 103, 105, 106, 107, 109, 110, 116, 117, 119, 120, 121, 125, 129], "2019": [0, 48, 49, 102, 125], "date": [0, 125, 129], "develop": [0, 76, 77, 82, 103, 122, 125, 127, 129, 131], "team": [0, 125], "all": [0, 9, 11, 12, 16, 17, 20, 21, 22, 24, 26, 28, 29, 31, 32, 33, 36, 37, 39, 42, 47, 48, 51, 53, 54, 63, 65, 66, 71, 73, 76, 77, 78, 79, 82, 86, 88, 90, 103, 104, 105, 107, 110, 111, 112, 113, 114, 116, 117, 118, 119, 121, 124, 125, 126, 129], "right": [0, 20, 21, 37, 46, 50, 60, 94, 95, 97, 98, 125], "reserv": [0, 125], "redistribut": [0, 125], "us": [0, 10, 11, 16, 20, 21, 22, 24, 25, 26, 29, 31, 32, 33, 36, 37, 39, 45, 47, 48, 49, 51, 52, 53, 60, 63, 65, 66, 69, 74, 75, 78, 83, 85, 87, 89, 90, 92, 93, 97, 98, 99, 100, 101, 104, 105, 108, 109, 110, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 129, 130], "sourc": [0, 14, 18, 41, 42, 43, 46, 53, 64, 76, 122, 125, 127], "binari": [0, 39, 125], "form": [0, 20, 21, 37, 103, 125], "without": [0, 20, 21, 25, 46, 63, 67, 70, 76, 90, 125], "modif": [0, 103, 108, 125], "ar": [0, 11, 12, 20, 21, 22, 24, 25, 26, 28, 29, 31, 32, 33, 37, 39, 45, 47, 48, 49, 51, 52, 53, 57, 59, 63, 66, 67, 70, 71, 73, 76, 77, 79, 84, 85, 88, 90, 97, 98, 99, 102, 103, 104, 105, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 123, 125, 126, 129, 130], "permit": [0, 20, 21, 22, 125], "provid": [0, 20, 21, 22, 25, 36, 37, 39, 45, 46, 47, 48, 52, 53, 64, 66, 67, 70, 72, 79, 82, 84, 87, 88, 93, 99, 100, 101, 103, 104, 105, 107, 110, 111, 113, 117, 121, 123, 125, 126, 129, 130], "follow": [0, 26, 36, 46, 48, 52, 54, 59, 67, 69, 71, 72, 73, 77, 82, 103, 104, 106, 107, 109, 110, 111, 114, 117, 124, 125], "condit": [0, 35, 46, 48, 53, 63, 64, 73, 77, 82, 103, 108, 110, 111, 125], "met": [0, 64, 73, 125], "code": [0, 2, 5, 20, 21, 22, 24, 26, 29, 31, 32, 33, 37, 39, 64, 66, 69, 73, 99, 104, 111, 112, 123, 125, 126, 129, 130], "must": [0, 11, 16, 20, 21, 22, 24, 25, 29, 31, 32, 33, 37, 39, 41, 42, 45, 46, 67, 82, 84, 104, 105, 111, 117, 125], "retain": [0, 69, 107, 114, 125], "abov": [0, 21, 25, 31, 32, 33, 53, 54, 55, 64, 67, 69, 72, 73, 76, 77, 79, 82, 83, 84, 103, 105, 107, 110, 111, 113, 114, 117, 124, 125, 130], "notic": [0, 67, 125], "thi": [0, 11, 14, 16, 18, 20, 21, 22, 24, 25, 29, 31, 32, 33, 36, 37, 39, 41, 42, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 73, 76, 77, 79, 82, 83, 84, 85, 87, 88, 90, 91, 92, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 122, 124, 125, 126, 127, 129, 130, 131], "list": [0, 1, 2, 3, 4, 6, 16, 17, 20, 21, 22, 24, 26, 29, 31, 32, 33, 37, 39, 42, 45, 48, 69, 72, 81, 105, 109, 114, 117, 118, 121, 125, 131], "disclaim": [0, 125], "reproduc": [0, 125], "document": [0, 45, 69, 75, 79, 87, 103, 104, 108, 111, 116, 125, 126, 129, 130], "other": [0, 6, 10, 12, 13, 14, 18, 20, 21, 22, 26, 29, 31, 32, 33, 37, 39, 51, 63, 67, 69, 71, 82, 104, 107, 110, 111, 113, 114, 117, 121, 125], "materi": [0, 125], "distribut": [0, 20, 21, 48, 73, 102, 103, 106, 110, 111, 112, 114, 115, 116, 121, 125], "neither": [0, 39, 125], "name": [0, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 25, 26, 29, 31, 32, 33, 36, 37, 39, 44, 45, 46, 47, 48, 49, 53, 54, 55, 57, 64, 65, 69, 71, 72, 73, 74, 76, 77, 79, 85, 88, 90, 91, 102, 104, 105, 106, 109, 117, 118, 119, 121, 125, 126, 129], "nor": [0, 125], "its": [0, 24, 26, 31, 33, 39, 41, 43, 62, 63, 67, 107, 109, 110, 111, 125], "contributor": [0, 125], "mai": [0, 20, 21, 22, 24, 29, 31, 32, 33, 39, 48, 69, 73, 84, 86, 99, 105, 109, 114, 125], "endors": [0, 125], "promot": [0, 125], "product": [0, 82, 125], "deriv": [0, 31, 32, 33, 61, 73, 82, 84, 97, 99, 125], "from": [0, 8, 9, 10, 11, 13, 14, 16, 18, 20, 21, 22, 24, 25, 29, 31, 32, 33, 36, 37, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 72, 73, 78, 79, 83, 85, 87, 88, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 126, 129, 131], "softwar": [0, 111, 122, 123, 125, 127], "specif": [0, 24, 29, 39, 46, 50, 63, 64, 65, 67, 73, 76, 84, 103, 105, 107, 111, 113, 117, 118, 123, 125], "prior": [0, 25, 111, 125], "written": [0, 37, 46, 60, 99, 125, 126], "permiss": [0, 125], "i": [0, 6, 9, 11, 12, 17, 20, 21, 22, 24, 25, 26, 29, 31, 32, 33, 36, 37, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 66, 68, 69, 71, 72, 73, 74, 76, 77, 79, 80, 82, 83, 85, 87, 88, 89, 91, 94, 95, 97, 98, 99, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 121, 122, 123, 124, 125, 127, 130], "BY": [0, 125], "THE": [0, 125], "holder": [0, 125], "AND": [0, 21, 48, 125], "AS": [0, 125], "ani": [0, 20, 21, 22, 24, 29, 31, 32, 33, 36, 39, 41, 42, 44, 45, 46, 47, 48, 54, 63, 67, 73, 74, 77, 82, 91, 107, 109, 117, 125, 130], "express": [0, 37, 98, 125], "OR": [0, 125], "impli": [0, 11, 16, 46, 125], "warranti": [0, 125], "includ": [0, 20, 21, 22, 24, 25, 26, 31, 32, 33, 37, 39, 41, 45, 46, 48, 49, 61, 64, 65, 67, 69, 73, 92, 105, 117, 123, 125, 130, 131], "BUT": [0, 125], "NOT": [0, 20, 21, 22, 31, 32, 33, 125], "limit": [0, 9, 11, 16, 20, 21, 31, 32, 33, 35, 46, 48, 72, 73, 77, 82, 90, 103, 116, 125], "TO": [0, 21, 125], "OF": [0, 125], "merchant": [0, 125], "fit": [0, 21, 46, 47, 49, 50, 51, 54, 55, 84, 103, 107, 117, 125], "FOR": [0, 21, 107, 125], "A": [0, 20, 21, 22, 24, 26, 31, 32, 33, 35, 37, 39, 41, 42, 43, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 67, 68, 69, 70, 73, 74, 76, 77, 79, 82, 84, 85, 87, 88, 92, 99, 103, 105, 106, 108, 109, 113, 115, 116, 117, 119, 120, 121, 125, 126, 129, 130], "particular": [0, 24, 31, 32, 33, 39, 53, 63, 84, 123, 125], "purpos": [0, 45, 109, 112, 118, 125], "IN": [0, 125], "NO": [0, 125], "event": [0, 125], "shall": [0, 125], "BE": [0, 125], "liabl": [0, 125], "direct": [0, 37, 39, 125, 126, 129, 130], "indirect": [0, 125], "incident": [0, 125], "special": [0, 25, 29, 39, 46, 48, 64, 110, 116, 125], "exemplari": [0, 125], "consequenti": [0, 125], "damag": [0, 125], "procur": [0, 125], "substitut": [0, 3, 20, 21, 47, 53, 56, 61, 62, 63, 70, 71, 72, 100, 101, 102, 104, 107, 108, 114, 119, 120, 123, 125, 130, 131], "good": [0, 56, 58, 73, 81, 103, 111, 114, 125], "servic": [0, 79, 125], "loss": [0, 125], "data": [0, 9, 11, 14, 16, 18, 20, 21, 22, 24, 25, 29, 31, 32, 33, 37, 39, 41, 42, 43, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 79, 80, 81, 83, 84, 85, 87, 88, 89, 90, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 110, 111, 112, 114, 115, 116, 117, 118, 119, 121, 123, 125, 130], "profit": [0, 125], "busi": [0, 125], "interrupt": [0, 48, 125], "howev": [0, 24, 31, 32, 33, 39, 67, 73, 99, 103, 109, 111, 117, 125], "caus": [0, 29, 73, 82, 87, 90, 91, 114, 116, 117, 125], "ON": [0, 125], "theori": [0, 108, 125], "liabil": [0, 125], "whether": [0, 6, 9, 20, 21, 22, 24, 29, 31, 32, 33, 37, 39, 47, 53, 57, 58, 67, 71, 82, 84, 98, 103, 105, 107, 117, 121, 125], "contract": [0, 125], "strict": [0, 29, 31, 32, 33, 37, 82, 104, 125], "tort": [0, 125], "neglig": [0, 125], "otherwis": [0, 8, 14, 20, 21, 24, 26, 31, 32, 33, 36, 37, 39, 41, 42, 82, 109, 111, 123, 125], "aris": [0, 118, 125], "wai": [0, 73, 90, 105, 107, 117, 118, 125, 126, 129], "out": [0, 20, 21, 31, 32, 33, 39, 67, 73, 78, 81, 102, 103, 110, 111, 125], "even": [0, 20, 21, 22, 24, 39, 69, 105, 125], "IF": [0, 125], "advis": [0, 20, 21, 22, 52, 125], "possibl": [0, 20, 21, 29, 31, 32, 33, 37, 39, 50, 53, 67, 71, 77, 82, 103, 107, 113, 114, 117, 119, 125], "SUCH": [0, 125], "return": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 20, 21, 22, 24, 25, 26, 29, 31, 32, 33, 35, 36, 37, 39, 46, 47, 49, 64, 65, 67, 69, 71, 73, 74, 76, 82, 83, 84, 87, 88, 89, 90, 102, 103, 105, 109, 111, 112, 113, 114, 116, 118], "tabl": [1, 2, 3, 4, 11, 16, 24, 26, 28, 36, 47, 50, 51, 53, 59, 103, 121], "avail": [1, 2, 4, 20, 22, 37, 41, 42, 43, 45, 46, 53, 61, 62, 66, 72, 78, 104, 111, 118], "app": [1, 25, 41, 42, 43, 52, 53, 56, 57, 64, 89, 94, 95, 96, 97, 98, 123, 126, 129, 130], "genet": [2, 5, 20, 21, 22, 26, 31, 33, 63, 75, 79, 130, 131], "model_typ": 3, "none": [3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 24, 25, 26, 29, 31, 32, 33, 35, 36, 37, 39, 45, 46, 48, 50, 53, 55, 69, 77, 82, 98, 103, 105, 111], "pre": [3, 59, 63, 70, 123], "defin": [3, 25, 37, 46, 47, 54, 59, 63, 65, 67, 69, 70, 71, 82, 84, 88, 103, 107, 109, 112, 113, 118, 120, 123], "model": [3, 6, 20, 21, 39, 47, 48, 49, 51, 52, 56, 57, 58, 59, 67, 70, 71, 72, 81, 97, 100, 101, 102, 110, 111, 112, 114, 115, 116, 119, 120, 121, 123, 129, 130, 131], "moltyp": [4, 7, 8, 10, 13, 14, 15, 18, 20, 21, 22, 24, 25, 28, 31, 32, 33, 44, 45, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 69, 70, 71, 72, 74, 76, 80, 85, 87, 88, 90, 91, 92, 99, 103, 104, 105, 106], "code_id": 5, "1": [5, 20, 21, 22, 24, 25, 29, 31, 32, 33, 37, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 66, 67, 69, 70, 71, 73, 74, 76, 77, 81, 82, 83, 84, 85, 92, 95, 100, 101, 103, 104, 105, 106, 109, 110, 111, 113, 114, 115, 116, 117, 118, 120, 121, 129, 130], "paramet": [5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 24, 25, 26, 29, 31, 32, 33, 36, 37, 39, 45, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 70, 76, 84, 89, 103, 106, 107, 108, 109, 110, 111, 116, 119, 120, 121], "identifi": [5, 11, 16, 37, 46, 47, 50, 53, 73, 104, 113, 117], "number": [5, 9, 11, 16, 20, 21, 22, 24, 29, 31, 32, 33, 37, 39, 46, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 67, 71, 72, 79, 85, 88, 90, 103, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121], "string": [5, 9, 11, 14, 15, 16, 17, 18, 20, 21, 22, 24, 26, 29, 31, 32, 33, 37, 39, 44, 45, 47, 73, 84, 85, 99, 106, 109, 113], "default": [5, 11, 12, 14, 17, 18, 20, 21, 22, 25, 29, 31, 32, 33, 36, 37, 39, 46, 61, 62, 67, 73, 76, 80, 81, 82, 87, 90, 97, 103, 109, 110, 113, 117], "standard": [5, 20, 21, 22, 29, 31, 32, 33, 39, 46, 47, 67, 72, 73, 77, 78, 85, 107, 109, 111, 117, 118, 130], "kw": [6, 8, 10, 13, 14, 18, 20, 31, 32, 33], "an": [6, 8, 10, 13, 14, 18, 20, 21, 22, 24, 25, 26, 29, 31, 32, 33, 36, 37, 39, 41, 42, 43, 47, 54, 61, 63, 64, 65, 68, 70, 78, 83, 85, 87, 88, 89, 92, 99, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 114, 115, 117, 118, 121, 123, 126, 129, 130], "instanc": [6, 8, 15, 20, 21, 22, 25, 26, 31, 32, 33, 36, 37, 39, 44, 45, 47, 51, 53, 63, 65, 66, 67, 68, 72, 76, 79, 82, 84, 89, 100, 101, 103, 107, 111, 112, 114, 118, 121, 126, 130], "case": [6, 20, 21, 22, 25, 29, 31, 32, 33, 36, 37, 39, 41, 42, 46, 48, 50, 52, 61, 62, 64, 65, 67, 72, 73, 76, 77, 79, 81, 82, 85, 87, 90, 102, 103, 105, 106, 107, 109, 111, 113, 114, 115, 117, 118], "sensit": [6, 31, 32, 33, 61, 62, 73], "optimise_motif_prob": [6, 52, 53, 55, 56, 57, 58, 59, 61, 62, 103], "bool": [6, 8, 9, 11, 12, 14, 17, 20, 21, 22, 25, 29, 31, 33, 37, 39, 45, 89, 111], "treat": [6, 20, 21, 67, 110, 117], "like": [6, 20, 22, 29, 31, 32, 33, 36, 47, 51, 53, 64, 65, 73, 77, 82, 102, 105, 107, 110, 111, 114, 130], "free": [6, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 103, 105, 106, 107, 110, 115, 116, 117, 119, 120, 121, 122, 127], "recode_gap": [6, 20, 21, 31, 32, 33, 107], "gap": [6, 20, 21, 22, 24, 29, 31, 32, 33, 45, 47, 79, 85, 88, 92, 103, 105, 108], "align": [6, 8, 14, 21, 22, 25, 28, 29, 31, 32, 33, 37, 45, 46, 47, 48, 49, 60, 61, 62, 63, 64, 65, 66, 75, 79, 82, 85, 87, 88, 100, 101, 102, 103, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 121, 130], "should": [6, 20, 21, 22, 24, 31, 32, 33, 39, 67, 73, 81, 99, 100, 104, 105, 109, 111, 130], "ambigu": [6, 20, 21, 22, 24, 29, 31, 32, 33, 67, 69, 104], "state": [6, 20, 21, 31, 32, 33, 39, 45, 47, 48, 63, 67, 73, 79, 126, 129], "instead": [6, 20, 21, 22, 29, 31, 32, 33, 39, 55, 67, 69, 73, 82, 109, 114], "note": [6, 9, 10, 12, 17, 20, 21, 22, 24, 25, 26, 29, 31, 32, 33, 37, 39, 48, 50, 56, 60, 67, 77, 81, 82, 84, 92, 94, 99, 102, 104, 105, 109, 110, 123], "see": [6, 20, 21, 25, 37, 41, 42, 44, 45, 46, 50, 53, 60, 63, 67, 69, 73, 75, 88, 104, 108, 111, 114, 117, 123, 124, 126, 129, 130], "available_model": [6, 28, 41, 42, 61, 62, 63, 73], "full": [6, 37, 61, 113], "match": [7, 20, 21, 22, 24, 25, 29, 31, 32, 33, 35, 37, 39, 46, 67, 76, 81, 104, 105, 126, 129], "attribut": [7, 20, 21, 22, 24, 25, 26, 31, 32, 33, 36, 37, 39, 48, 53, 64, 67, 69, 76, 79, 81, 82, 87, 90, 98], "filenam": [8, 9, 10, 11, 12, 13, 20, 21, 22, 37, 39, 46, 67, 76, 77, 82, 116], "str": [8, 9, 10, 11, 12, 13, 15, 16, 17, 20, 21, 22, 26, 29, 31, 32, 33, 36, 37, 45, 47, 66, 67, 69, 76, 77, 80, 84], "path": [8, 9, 10, 11, 12, 13, 20, 21, 22, 48, 52, 64], "format": [8, 10, 11, 12, 13, 16, 17, 20, 21, 22, 24, 29, 31, 32, 33, 37, 39, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 78, 97, 98, 102, 103, 106, 114, 118, 130], "array_align": [8, 14, 20, 21, 65, 67, 69, 76, 91, 104, 105], "true": [8, 9, 11, 14, 20, 21, 22, 24, 25, 26, 29, 31, 32, 33, 35, 37, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 66, 67, 68, 69, 70, 73, 77, 79, 81, 82, 84, 85, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 103, 104, 105, 107, 109, 110, 111, 113, 114, 115, 116, 117], "label_to_nam": [8, 10, 13, 14, 18, 22, 76], "parser_kw": [8, 10, 13], "info": [8, 10, 13, 14, 18, 20, 21, 22, 31, 32, 33, 37, 47, 48, 69, 76], "load": [8, 10, 13, 20, 21, 22, 41, 42, 43, 46, 47, 49, 53, 54, 67, 69, 70, 73, 78, 100, 101, 102, 103, 107, 114, 117], "sequenc": [8, 10, 13, 14, 15, 18, 20, 21, 22, 24, 25, 26, 28, 29, 31, 32, 33, 37, 41, 42, 43, 45, 46, 47, 48, 55, 63, 64, 70, 71, 88, 99, 100, 101, 107, 108, 113, 114, 119, 123, 126, 129, 131], "file": [8, 9, 10, 11, 12, 13, 16, 20, 21, 22, 31, 32, 33, 35, 37, 39, 46, 47, 48, 49, 63, 64, 73, 74, 75, 78, 83, 84, 89, 99, 100, 101, 102, 105, 106, 108, 110, 111, 112, 124, 129], "specifi": [8, 10, 13, 20, 21, 22, 24, 26, 29, 31, 32, 33, 36, 37, 39, 47, 53, 58, 59, 60, 61, 62, 63, 65, 66, 67, 70, 71, 72, 78, 79, 81, 85, 99, 103, 107, 109, 110, 111, 112, 115, 120, 121], "tri": [8, 10, 13, 29, 31, 32, 33], "guess": [8, 10, 13, 37, 73, 82, 84], "suffix": [8, 10, 12, 13, 20, 21, 22, 37, 39, 46, 48, 67, 76, 77, 82, 86], "eg": [8, 10, 13, 14, 18, 20, 21, 31, 32, 33, 105, 118], "dna": [8, 10, 13, 14, 18, 20, 21, 22, 24, 25, 26, 29, 31, 32, 33, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 73, 76, 78, 79, 85, 87, 88, 90, 91, 92, 103, 105, 108, 114, 118, 120, 130, 131], "protein": [8, 10, 13, 14, 18, 20, 21, 22, 26, 31, 32, 33, 47, 63, 68, 70, 72, 74, 76, 78, 79, 85, 91, 104, 108, 111, 114, 130], "arrayalign": [8, 14, 20, 45, 47, 64, 66, 71, 76, 88, 104], "annotat": [8, 14, 20, 66], "function": [8, 10, 11, 13, 14, 16, 18, 20, 21, 22, 25, 26, 31, 32, 33, 37, 39, 41, 42, 44, 45, 47, 49, 50, 53, 54, 63, 66, 69, 70, 72, 76, 77, 79, 82, 85, 97, 103, 104, 106, 107, 109, 110, 111, 112, 113, 116, 117, 121, 126, 129, 130], "convert": [8, 10, 13, 14, 15, 18, 20, 21, 22, 25, 29, 31, 32, 33, 37, 47, 65, 76, 77, 78, 82, 85, 113], "origin": [8, 10, 13, 14, 18, 20, 21, 22, 25, 39, 46, 64, 67, 69, 76, 79, 82, 99, 103, 104, 105, 109, 126, 129, 131], "anoth": [8, 10, 13, 14, 18, 39, 46, 50, 54, 64, 83, 84, 105, 109, 114], "dict": [8, 10, 11, 13, 14, 16, 18, 20, 21, 22, 26, 29, 31, 32, 33, 36, 37, 39, 41, 51, 53, 54, 65, 73, 95, 97, 99, 103, 107, 111, 114, 120], "option": [8, 10, 13, 20, 21, 45, 71, 73, 84, 105, 114, 118], "argument": [8, 10, 13, 14, 18, 20, 21, 22, 25, 29, 39, 44, 45, 54, 65, 67, 71, 73, 76, 77, 79, 81, 82, 85, 87, 90, 98, 103, 110, 111, 114], "parser": [8, 10, 11, 13, 35, 69, 78], "header": [9, 11, 16, 37, 49, 103, 121], "sep": [9, 11, 35, 37, 77, 82], "with_titl": [9, 37, 73, 103], "fals": [9, 11, 12, 17, 20, 21, 22, 24, 25, 26, 29, 31, 32, 33, 35, 37, 39, 46, 47, 48, 53, 55, 56, 57, 58, 59, 65, 67, 69, 70, 71, 72, 73, 76, 77, 82, 84, 87, 89, 91, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 111, 112, 114, 115, 116, 117, 119, 121], "with_legend": [9, 37], "kwarg": [9, 11, 16, 20, 21, 22, 29, 31, 32, 33, 37, 39, 64], "basic": [9, 82, 99, 103, 109, 112, 114], "process": [9, 43, 48, 50, 53, 63, 73, 79, 108, 109, 111, 123, 129, 130], "tabular": [9, 11, 35, 37, 47, 75, 130], "delimit": [9, 11, 35, 37, 47, 76], "can": [9, 20, 21, 22, 24, 25, 26, 29, 31, 32, 33, 36, 37, 39, 41, 42, 45, 47, 48, 49, 53, 54, 55, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 81, 83, 84, 85, 86, 90, 92, 99, 101, 102, 103, 104, 105, 107, 109, 110, 111, 112, 113, 114, 117, 118, 119, 121, 123, 124, 126, 129], "begin": [9, 26, 82, 99], "first": [9, 11, 20, 21, 22, 24, 25, 26, 29, 31, 32, 33, 37, 39, 46, 47, 49, 51, 53, 57, 65, 67, 69, 70, 73, 76, 77, 82, 99, 103, 104, 107, 109, 111, 113, 114, 117, 118, 130], "line": [9, 11, 16, 20, 21, 22, 31, 32, 33, 39, 54, 64, 67, 69, 74, 81, 83, 84, 95, 97, 103, 105, 111, 131], "after": [9, 11, 16, 20, 21, 29, 39, 66, 73, 76, 99, 103, 104, 105, 109, 111, 114], "titl": [9, 11, 16, 20, 21, 22, 37, 67, 77, 88, 103, 115], "present": [9, 20, 21, 22, 29, 36, 39, 53, 59, 67, 69, 73, 76, 79, 103, 111, 123, 126, 129], "charact": [9, 11, 20, 21, 22, 24, 26, 29, 31, 32, 33, 37, 39, 45, 47, 66, 69, 84, 92, 103, 104, 105], "separ": [9, 20, 21, 24, 31, 32, 33, 37, 39, 76, 77, 82, 103, 105, 109, 111, 114], "column": [9, 11, 16, 20, 21, 24, 35, 37, 39, 45, 46, 47, 48, 50, 51, 52, 53, 55, 59, 60, 61, 62, 72, 73, 79, 85, 104, 107, 115, 121], "last": [9, 20, 21, 24, 25, 29, 31, 32, 33, 39, 46, 54, 64, 67, 69, 74, 83, 84, 105, 114, 129], "legend": [9, 11, 16, 37, 77, 88, 91], "int": [9, 20, 21, 22, 24, 26, 31, 32, 33, 37, 39, 45, 84, 111], "maximum": [9, 11, 16, 20, 21, 22, 31, 32, 33, 47, 50, 52, 53, 57, 63, 71, 91, 103, 110, 113, 116], "read": [9, 11, 12, 17, 26, 39, 45, 47, 64, 77, 82, 92, 99, 130], "row": [9, 11, 16, 20, 21, 22, 24, 36, 37, 39, 46, 47, 48, 49, 50, 51, 52, 53, 55, 59, 60, 61, 62, 72, 73, 79, 85, 115, 121], "valu": [9, 11, 12, 16, 20, 21, 22, 24, 25, 31, 32, 33, 36, 37, 39, 41, 44, 47, 49, 50, 51, 52, 53, 55, 57, 65, 67, 70, 72, 77, 81, 84, 88, 95, 97, 98, 103, 104, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118], "remain": [9, 20, 21, 39, 48, 50, 114, 117], "callabl": [10, 20, 21, 22, 25], "unalign": [10, 13, 18, 20, 22, 41, 42, 43, 47, 65, 70, 88, 99], "which": [10, 13, 14, 16, 18, 20, 21, 22, 24, 25, 31, 32, 33, 37, 39, 46, 48, 51, 59, 63, 66, 67, 69, 71, 73, 76, 77, 81, 82, 84, 87, 90, 99, 103, 104, 105, 107, 109, 110, 111, 113, 114, 117, 118, 121, 125, 130], "make": [10, 13, 14, 18, 20, 21, 22, 29, 31, 32, 33, 39, 45, 46, 62, 65, 69, 78, 84, 103, 106, 108, 110, 113, 114, 115, 116, 117, 119, 121, 126, 129, 131], "object": [10, 13, 14, 15, 18, 20, 21, 22, 24, 29, 31, 32, 33, 36, 37, 39, 46, 47, 49, 52, 53, 59, 66, 73, 78, 79, 83, 85, 87, 90, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 112, 114, 116, 123], "keyword": [10, 13, 14, 18, 29, 44, 45, 65, 111], "pass": [10, 13, 14, 18, 20, 21, 22, 24, 25, 29, 31, 32, 33, 37, 39, 44, 45, 67, 71, 73, 76, 84, 103, 111, 113, 114], "sequencecollect": [10, 13, 18, 21, 47, 65, 76, 88, 89], "one": [10, 20, 21, 22, 24, 26, 29, 31, 32, 33, 37, 39, 47, 48, 53, 54, 64, 67, 69, 73, 78, 79, 81, 83, 84, 89, 103, 104, 105, 107, 109, 110, 111, 114, 119], "load_aligned_seq": [10, 28, 67, 71, 72, 73, 76, 79, 80, 85, 87, 90, 91, 92, 100, 101, 102, 103, 106, 107, 110, 112, 116, 117, 119, 121], "load_unaligned_seq": [10, 28, 41, 42, 67, 70, 76, 88], "get": [10, 21, 24, 26, 29, 31, 33, 36, 39, 46, 48, 51, 53, 63, 76, 78, 83, 84, 99, 103, 105, 110, 111, 112, 116, 118, 121, 126, 129], "collect": [10, 14, 18, 20, 22, 36, 39, 47, 78, 88, 114, 130], "reader": [11, 64, 77, 82, 94, 95, 96, 97, 98], "digit": [11, 16, 37, 73, 77, 103, 107, 110, 115, 116, 117, 121], "4": [11, 16, 21, 22, 26, 37, 48, 49, 50, 51, 53, 54, 56, 57, 58, 59, 61, 65, 67, 68, 69, 70, 73, 76, 77, 79, 81, 82, 83, 84, 85, 92, 103, 104, 105, 107, 109, 111, 113, 114, 115, 116, 119, 120, 121, 130], "space": [11, 12, 16, 17, 20, 21, 31, 32, 33, 37, 71, 73, 95, 103, 106, 107, 109, 110, 115, 116, 117, 121], "missing_data": [11, 16, 37, 77, 82], "max_width": [11, 16, 37, 82], "1e": [11, 16, 37, 41, 42, 43, 48, 67, 73, 82, 84, 103, 107, 114], "100": [11, 16, 20, 21, 22, 37, 39, 49, 67, 71, 77, 82, 84, 87, 98, 103, 111, 113], "index_nam": [11, 16, 36, 37, 77, 82], "column_templ": [11, 16, 37], "static_column_typ": [11, 77, 82], "simpl": [11, 16, 37, 46, 67, 73, 76, 82, 84, 115, 120], "skip_inconsist": 11, "contain": [11, 12, 20, 21, 22, 24, 26, 29, 31, 32, 33, 37, 39, 45, 46, 47, 48, 51, 64, 66, 67, 69, 73, 74, 82, 85, 105, 106, 109, 110, 112, 113], "between": [11, 16, 20, 21, 22, 25, 26, 29, 31, 32, 33, 37, 39, 41, 51, 54, 63, 73, 79, 82, 88, 89, 95, 103, 104, 107, 108, 110, 111, 114, 115, 118, 121], "approach": [11, 31, 32, 33, 39, 46, 66, 67, 69, 72, 73, 88, 99, 103, 111, 113, 130], "assum": [11, 20, 21, 31, 32, 33, 37, 47, 67, 113], "numer": [11, 20, 21, 37, 55, 72, 103, 107, 118, 130], "type": [11, 16, 20, 21, 22, 24, 25, 29, 31, 32, 33, 36, 37, 39, 45, 47, 48, 51, 52, 53, 56, 61, 62, 63, 66, 67, 73, 74, 77, 78, 80, 82, 87, 90, 103, 105, 107, 118], "non": [11, 16, 20, 21, 22, 24, 29, 31, 32, 33, 37, 39, 45, 47, 51, 61, 62, 63, 64, 69, 71, 73, 77, 97, 103, 105, 116, 123, 130, 131], "subsequ": [11, 79, 103, 117], "entri": [11, 21, 31, 32, 33, 47, 51, 79, 88, 130], "same": [11, 20, 21, 22, 24, 25, 26, 29, 31, 32, 33, 37, 39, 41, 46, 67, 69, 82, 84, 98, 103, 105, 106, 107, 110, 111, 112, 113, 114, 117, 118, 121], "float": [11, 16, 20, 21, 24, 39, 77, 82, 105, 112], "point": [11, 16, 20, 21, 29, 31, 32, 33, 84, 90, 112, 117], "resolut": [11, 16, 20, 21, 22], "assign": [11, 20, 21, 29, 31, 32, 33, 39, 53, 54, 82, 103, 111, 117, 118], "ha": [11, 20, 21, 22, 24, 29, 31, 32, 33, 36, 39, 41, 43, 45, 47, 50, 51, 53, 56, 63, 64, 65, 66, 67, 73, 81, 83, 84, 85, 87, 90, 103, 105, 109, 110, 111, 117, 118, 126, 129], "width": [11, 16, 20, 21, 22, 31, 32, 33, 37, 49, 50, 54, 60, 67, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98], "print": [11, 16, 20, 21, 22, 31, 32, 33, 48, 66, 67, 68, 69, 70, 71, 73, 74, 76, 81, 82, 84, 99, 100, 101, 103, 104, 105, 107, 109, 110, 111, 112, 113, 114, 116, 117, 118, 121], "kei": [11, 16, 20, 21, 22, 29, 31, 32, 33, 36, 37, 39, 49, 50, 51, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 76, 77, 82, 104, 111], "slice": [11, 16, 20, 21, 22, 99, 105, 113], "uniqu": [11, 16, 20, 21, 37, 39, 47, 53, 63, 77, 117, 123, 130], "head": [11, 16, 37], "handl": [11, 16, 24, 29, 37, 39, 64, 69, 79, 82, 83, 84, 86, 104, 108], "exit": [11, 16, 48, 73], "mani": [11, 16, 29, 31, 32, 33, 46, 73, 78, 111, 112, 113, 123, 129], "onli": [11, 12, 16, 20, 21, 22, 24, 29, 31, 32, 33, 37, 39, 50, 51, 53, 57, 66, 67, 73, 76, 81, 98, 102, 103, 105, 109, 112, 114, 115, 117, 119, 126, 129], "appli": [11, 16, 20, 21, 22, 37, 63, 67, 69, 73, 76, 77, 82, 84, 92, 105, 107, 111, 112, 113, 117, 118], "pickl": [11, 16, 37, 47, 77, 82, 102, 114], "output": [11, 16, 20, 21, 22, 37, 39, 45, 46, 47, 48, 52, 53, 63, 67, 90, 103, 105, 111], "when": [11, 16, 20, 21, 22, 37, 39, 48, 53, 64, 76, 90, 102, 105, 107, 109, 114, 124], "skip": [11, 20, 22, 77, 82], "have": [11, 16, 20, 21, 22, 26, 29, 31, 32, 33, 37, 39, 41, 42, 46, 53, 57, 59, 63, 65, 66, 67, 68, 73, 76, 79, 82, 84, 87, 88, 89, 90, 98, 99, 103, 105, 107, 109, 111, 113, 114, 115, 117, 118, 126, 129, 130], "differ": [11, 20, 21, 22, 24, 25, 26, 31, 32, 33, 37, 39, 48, 50, 51, 53, 54, 57, 63, 69, 73, 76, 79, 81, 90, 92, 99, 103, 105, 107, 108, 111, 113, 114, 116, 120, 121, 126, 129, 130], "length": [11, 20, 21, 22, 24, 29, 31, 32, 33, 39, 41, 42, 43, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 67, 69, 77, 82, 97, 103, 105, 106, 107, 109, 110, 112, 113, 114, 115, 116, 117, 119, 120, 121], "underscore_unmung": [12, 17], "constructor": [12, 20, 21, 22, 29, 39], "tree": [12, 17, 20, 21, 22, 28, 39, 47, 49, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 70, 86, 94, 95, 96, 97, 98, 100, 103, 106, 107, 108, 110, 112, 115, 116, 117, 119, 120, 121, 130], "newick": [12, 17, 39, 49, 60], "xml": [12, 17, 39], "either": [12, 17, 20, 21, 22, 25, 36, 37, 45, 46, 53, 63, 67, 79, 85, 99, 105, 118], "json": [12, 20, 21, 22, 24, 29, 31, 32, 33, 39, 46, 47, 48, 65, 71, 73, 86, 94, 95, 96, 97, 98, 102], "overrid": [12, 20, 21, 37, 39, 77, 79, 82], "replac": [12, 16, 17, 20, 21, 31, 32, 33, 37, 105, 126, 129], "underscor": [12, 17], "e": [12, 17, 20, 21, 22, 24, 25, 29, 31, 32, 33, 36, 37, 39, 46, 47, 48, 65, 68, 69, 73, 77, 79, 81, 82, 84, 85, 99, 103, 104, 105, 106, 107, 109, 111, 118, 124, 129], "sp_name": [12, 17], "becom": [12, 17, 29, 37, 65, 82, 109], "sp": [12, 17], "phylonod": [12, 17, 47, 81, 109], "unmung": [12, 17], "turn": [12, 17, 31, 32, 33, 63, 88, 126, 129], "off": [12, 17, 20, 21, 22, 66, 88], "although": [12, 17, 24, 77, 82, 99], "part": [12, 17, 24, 39, 65, 73, 76, 107, 111, 117], "cogent3": [12, 20, 21, 22, 24, 25, 26, 31, 32, 33, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 76, 77, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 130], "support": [12, 20, 21, 39, 47, 48, 65, 71, 76, 77, 82, 84, 86, 90, 111, 114, 130], "initi": [14, 18, 39, 73, 84, 103, 107, 109, 117], "unknown": [14, 18], "ad": [14, 18, 20, 21, 22, 37, 39, 47, 63, 71, 99, 109, 114, 118, 123, 131], "class": [14, 20, 21, 22, 24, 25, 26, 29, 31, 32, 33, 35, 36, 37, 39, 46, 47, 48, 57, 63, 65, 66, 67, 71, 73, 74, 76, 79, 82, 88, 103, 109, 112, 113, 114, 130], "seq": [15, 20, 21, 22, 24, 26, 29, 31, 32, 33, 41, 42, 43, 47, 64, 65, 66, 67, 68, 69, 74, 76, 79, 80, 88, 89, 91, 99, 105, 113], "raw": [15, 24, 37, 48, 76, 99], "row_ord": 16, "data_fram": [16, 77, 82], "2d": [16, 31, 32, 33], "tupl": [16, 20, 21, 22, 24, 29, 31, 32, 33, 36, 39, 45, 67, 74, 103, 107, 114], "If": [16, 20, 21, 22, 24, 25, 29, 31, 32, 33, 36, 37, 39, 41, 42, 45, 46, 48, 49, 51, 60, 67, 69, 73, 76, 77, 79, 82, 83, 84, 88, 89, 99, 103, 105, 107, 111, 114, 117, 122, 127, 130, 131], "top": [16, 28, 37, 44, 45, 46, 50, 60, 71, 79, 95, 97], "level": [16, 28, 44, 45, 46, 79, 82, 84, 98, 111], "common": [16, 24, 39, 54, 104, 117, 129], "label": [16, 20, 21, 22, 29, 31, 32, 33, 37, 39, 82, 95, 107, 118], "each": [16, 20, 21, 22, 24, 29, 31, 32, 33, 37, 39, 48, 49, 51, 67, 71, 73, 82, 90, 105, 107, 109, 110, 111, 114, 121], "order": [16, 20, 21, 22, 24, 25, 26, 29, 31, 32, 33, 36, 37, 39, 46, 67, 69, 71, 73, 86, 99, 106, 109, 114, 117], "pull": [16, 20, 21], "twoddict": 16, "miss": [16, 29, 31, 32, 33, 67, 69], "panda": [16, 37], "datafram": [16, 37], "supersed": 16, "treestr": [17, 106], "tip_nam": [17, 39, 54, 73, 81, 103, 117, 119, 121], "initialis": 17, "tip": [17, 39, 54, 71, 109, 117], "star": 17, "topologi": [17, 39, 71, 73], "indic": [17, 20, 21, 22, 24, 29, 31, 32, 33, 37, 39, 46, 53, 56, 57, 65, 66, 67, 68, 90, 91, 98, 103, 111], "arg": [20, 21, 24, 31, 32, 33, 39, 64], "num_seq": [20, 21, 22], "posit": [20, 21, 22, 25, 26, 29, 31, 32, 33, 37, 39, 44, 45, 46, 47, 49, 57, 59, 69, 91, 98, 99, 103, 104, 107, 113], "iter": [20, 21, 22, 36, 37, 39, 48, 71, 109], "over": [20, 21, 22, 36, 37, 39, 49, 84, 90, 98, 103, 107, 114, 122, 127, 129], "method": [20, 21, 22, 24, 25, 26, 29, 31, 32, 33, 35, 36, 37, 39, 46, 48, 53, 60, 65, 66, 67, 69, 71, 73, 74, 79, 82, 83, 84, 85, 87, 88, 89, 90, 99, 103, 104, 105, 109, 110, 111, 114, 116, 117, 118, 130], "add_annot": [20, 31, 32, 33, 105, 118], "add_featur": [20, 31, 32, 33, 66, 67, 105, 118], "attach_annot": [20, 31, 32, 33, 69, 105], "clear_annot": [20, 31, 32, 33], "detach_annot": [20, 31, 32, 33], "gapped_by_map": [20, 31, 32, 33], "get_annotations_from_any_seq": [20, 69, 105], "get_annotations_from_seq": [20, 69, 105], "get_by_seq_annot": 20, "get_projected_annot": [20, 105], "get_region_covering_al": [20, 31, 32, 33, 69, 105, 118], "project_annot": 20, "klass": [20, 25, 31, 32, 33], "span": [20, 26, 31, 32, 33, 67, 105, 118], "add_from_ref_aln": [20, 21, 67], "ref_aln": [20, 21, 67], "before_nam": [20, 21, 22, 67], "after_nam": [20, 21, 22, 67], "insert": [20, 21, 22, 39, 109], "": [20, 21, 22, 24, 26, 31, 32, 33, 36, 37, 39, 43, 47, 48, 56, 58, 60, 61, 62, 63, 64, 65, 66, 68, 69, 73, 76, 77, 79, 82, 85, 92, 94, 99, 102, 103, 105, 106, 107, 109, 110, 113, 114, 116, 117, 118, 119, 121, 122, 124, 127, 129, 130], "self": [20, 21, 22, 24, 25, 26, 29, 31, 32, 33, 37, 39, 64, 69, 74, 83, 84, 105], "base": [20, 21, 22, 24, 26, 29, 31, 32, 33, 36, 39, 47, 48, 63, 69, 82, 84, 99, 104, 105, 111, 129, 131], "refer": [20, 21, 22, 47, 65, 69, 73, 76, 81, 82, 86, 107, 129], "0": [20, 21, 22, 24, 25, 26, 31, 32, 33, 37, 39, 41, 42, 43, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 79, 81, 82, 84, 85, 90, 92, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121], "By": [20, 21, 22, 46, 61, 62, 69, 76, 90, 103, 110], "append": [20, 21, 22, 37, 39, 48, 69, 84, 105, 109], "end": [20, 21, 22, 31, 32, 33, 37, 39, 48, 67, 69, 82, 95, 105, 107, 111, 114], "chang": [20, 21, 22, 24, 25, 26, 29, 39, 46, 53, 59, 67, 73, 79, 81, 88, 97, 103, 107, 114, 126, 129], "seri": [20, 21, 24, 36, 37, 47, 71, 78, 105, 111], "add": [20, 21, 25, 31, 32, 33, 36, 67, 69, 76, 81, 87, 105, 109, 114], "new": [20, 21, 22, 24, 25, 29, 31, 32, 33, 36, 37, 39, 47, 69, 81, 103, 105, 109, 110, 115, 126, 129, 130], "structur": [20, 21, 39, 73, 126, 129], "ref_nam": [20, 21, 22], "befor": [20, 21, 22, 29, 39, 88, 103, 104, 121], "both": [20, 21, 22, 31, 32, 33, 37, 39, 63, 65, 67, 71, 76, 114, 117], "exampl": [20, 21, 24, 25, 28, 31, 32, 33, 41, 42, 51, 54, 56, 58, 59, 64, 67, 68, 69, 73, 76, 77, 79, 81, 82, 84, 85, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 111, 112, 113, 114, 115, 117, 120, 121, 126, 129], "aln1": [20, 21, 69, 104, 115, 121], "ac": [20, 21, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 68, 73, 120], "defghi": [20, 21], "seq1": [20, 21, 22, 67, 69, 72, 76, 79], "xxxxxx": [20, 21], "xx": [20, 21], "seq2": [20, 21, 22, 67, 69, 72, 76], "yyyi": [20, 21], "yyyyi": [20, 21], "seq3": [20, 21, 67, 69], "aln2": [20, 21, 69, 104, 115, 121], "acdefghi": [20, 21], "kl": [20, 21], "mnpr": [20, 21], "seqx": [20, 21], "klacmnpr": [20, 21], "seqi": [20, 21], "seqz": [20, 21], "acmnpr": [20, 21], "add_seq": [20, 21, 22, 67], "coerceabl": [20, 21, 22], "alignment_qu": [20, 21], "equifreq_mprob": [20, 21], "comput": [20, 21, 22, 37, 47, 49, 73, 84, 87, 91, 102, 103, 104, 107, 108, 113, 114, 118, 130, 131], "qualiti": [20, 21], "eq": [20, 21], "2": [20, 21, 22, 24, 26, 31, 32, 33, 36, 39, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 76, 77, 79, 81, 82, 83, 84, 85, 91, 92, 95, 100, 103, 104, 105, 109, 110, 111, 113, 114, 115, 116, 117, 118, 120, 121, 129, 130], "equal": [20, 21, 24, 29, 31, 32, 33, 39, 47, 73, 88, 103, 107, 111, 113, 114, 115, 117], "frequent": [20, 21, 22, 67, 76], "motif": [20, 21, 22, 24, 29, 31, 32, 33, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 74, 103, 106, 107, 110, 113, 116, 117, 119, 120, 121, 126, 129], "probabl": [20, 21, 24, 29, 47, 49, 50, 51, 61, 62, 103, 104, 107, 110, 112, 114, 115, 116, 121], "hertz": [20, 21], "g": [20, 21, 22, 24, 25, 29, 31, 32, 33, 37, 39, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 67, 68, 69, 70, 73, 76, 79, 81, 82, 85, 92, 99, 103, 104, 105, 106, 107, 110, 111, 116, 117, 118, 119, 120, 121, 124, 129, 130], "d": [20, 21, 22, 29, 31, 32, 33, 36, 68, 72, 73, 79, 81, 82, 83, 84, 85, 100, 101, 102, 106, 109, 112, 120, 129, 130], "stormo": [20, 21], "publish": [20, 21, 122, 127, 129], "1999": [20, 21, 49], "bioinformat": [20, 21, 129, 130], "vol": [20, 21, 73], "15": [20, 21, 49, 57, 59, 61, 69, 73, 84, 85, 98, 105, 113, 117, 118, 120], "pg": [20, 21], "563": [20, 21, 49], "577": [20, 21, 49], "The": [20, 21, 22, 24, 25, 29, 31, 32, 33, 37, 39, 41, 42, 43, 44, 45, 47, 48, 49, 53, 54, 57, 59, 60, 61, 65, 66, 69, 70, 71, 72, 76, 77, 79, 82, 84, 87, 88, 89, 90, 95, 97, 98, 99, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 122, 123, 126, 127, 129, 130], "statist": [20, 21, 37, 46, 47, 53, 56, 57, 58, 73, 82, 84, 102, 103, 104, 106, 107, 110, 112, 114, 116, 121, 129, 130], "log": [20, 21, 25, 31, 32, 33, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 103, 106, 107, 110, 116, 117, 119, 121], "likelihood": [20, 21, 22, 24, 39, 47, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 71, 75, 81, 97, 103, 106, 107, 108, 110, 112, 116, 117, 119], "ratio": [20, 21, 22, 52, 56, 61, 70, 77, 82, 103, 107, 110, 112, 115, 116, 117, 121], "log2": [20, 21, 22], "observ": [20, 21, 67, 82, 103, 105, 110, 112, 116], "freq": [20, 21], "versu": [20, 21], "expect": [20, 21, 24, 29, 39, 53, 66, 67, 82, 112, 113], "annotate_from_gff": [20, 22, 31, 32, 33], "f": [20, 21, 22, 26, 31, 32, 33, 36, 46, 48, 64, 68, 69, 73, 74, 76, 79, 81, 83, 84, 85, 102, 105, 106, 109, 110, 111, 114], "copi": [20, 21, 22, 31, 32, 33, 39, 67, 105, 125], "annot": [20, 21, 22, 31, 32, 33, 53, 67, 76, 78, 82, 103, 108, 110, 118, 123, 130], "gff": [20, 22, 31, 32, 33, 118], "accept": [20, 21, 22, 45, 52, 84], "pathlib": [20, 22, 64], "stringio": [20, 22], "apply_pssm": [20, 21, 22], "pssm": [20, 21, 22], "background": [20, 21, 22, 59, 103, 104], "pseudocount": [20, 21, 22, 67], "ui": [20, 21, 22], "score": [20, 21, 22, 31, 32, 33, 39, 81, 114], "profil": [20, 21, 22, 24, 73, 130], "jaspar": [20, 21, 22, 86, 92], "cisbp": [20, 21, 22], "matrix": [20, 21, 22, 31, 32, 33, 39, 51, 73, 81, 82, 90, 100, 101, 102, 106, 114], "adjust": [20, 21, 22, 29, 51, 61, 73, 99, 107, 114], "zero": [20, 21, 22, 67], "numpi": [20, 21, 22, 24, 36, 37, 39, 67, 84, 103, 107, 113], "arrai": [20, 21, 22, 24, 29, 36, 37, 39, 67, 84, 103, 104, 107, 113], "everi": [20, 21, 22, 29, 31, 32, 33, 39, 41, 42, 77, 81, 82, 114], "coevolut": [20, 21, 104], "nmi": [20, 21, 87, 104], "segment": [20, 21, 22, 31, 32, 33, 88, 105, 113], "drawabl": [20, 21, 22, 31, 32, 33, 87, 88, 89, 90], "show_progress": [20, 21, 22, 46, 53, 55, 65, 70, 71, 72, 73, 84, 87, 100, 101, 102, 103, 106, 107, 110, 112, 114, 115, 116, 117, 119, 121], "perform": [20, 21, 29, 37, 39, 46, 47, 60, 63, 66, 67, 72, 73, 81, 82, 83, 84, 108, 110, 111, 113, 130], "pairwis": [20, 21, 47, 70, 100, 101, 108, 114], "measur": [20, 21, 63, 71, 87, 131], "metric": [20, 21, 22, 50, 71, 113], "normal": [20, 21, 22, 31, 32, 33, 37], "mutual": [20, 21, 87, 104], "inform": [20, 21, 25, 39, 45, 46, 48, 54, 64, 66, 72, 76, 87, 92, 104, 113], "valid": [20, 21, 24, 29, 31, 32, 33, 37, 39, 63, 66, 73, 82, 84, 97, 105, 111], "choic": [20, 21, 22], "rmi": [20, 21, 104], "resampl": [20, 21, 71, 98, 113], "mi": [20, 21, 104], "coordin": [20, 21, 78, 98, 105], "start": [20, 21, 26, 31, 32, 33, 37, 39, 46, 67, 69, 74, 82, 103, 104, 105, 107, 110, 111, 113, 114, 115, 117], "where": [20, 21, 22, 29, 31, 32, 33, 37, 39, 46, 64, 67, 73, 76, 85, 103, 105, 107, 109, 110, 111], "pair": [20, 21, 22, 24, 29, 31, 32, 33, 36, 39, 51, 67, 79, 81, 82, 104], "within": [20, 21, 37, 39, 48, 69, 73, 82, 84, 88, 103, 105, 107, 111, 130], "examin": [20, 21, 54], "result": [20, 21, 22, 24, 25, 29, 31, 32, 33, 37, 39, 41, 45, 46, 47, 49, 50, 51, 53, 54, 56, 57, 58, 59, 60, 61, 62, 65, 67, 69, 81, 82, 89, 90, 99, 103, 104, 105, 107, 109, 110, 111, 113, 114, 116, 121], "capabl": [20, 21, 63, 67, 73, 123, 124, 126, 129, 130], "plot": [20, 21, 22, 39, 91, 110, 124], "box": [20, 21, 87, 92], "heatmap": [20, 21], "violin": [20, 21], "show": [20, 21, 45, 49, 50, 54, 60, 67, 70, 73, 76, 81, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 103, 105, 117, 123], "progress": [20, 21, 47, 63, 103, 129], "bar": [20, 21, 84, 97, 112, 129], "dictarrai": [20, 21, 47, 49, 73, 103, 107], "lower": [20, 21, 73, 84, 103, 106, 107, 130], "triangular": [20, 21], "upper": [20, 21, 53, 55, 65, 84, 103, 107], "element": [20, 21, 22, 24, 29, 31, 32, 33, 37, 48, 51, 65, 111], "estim": [20, 21, 22, 53, 57, 61, 62, 63, 70, 71, 84, 87, 103, 108, 110, 112, 114, 116, 130], "could": [20, 21, 29, 31, 32, 33, 41, 42, 46, 63, 67, 69, 82, 89, 104, 109, 111, 114, 117, 118], "reason": [20, 21, 31, 32, 33, 64, 66, 69, 114], "set": [20, 21, 22, 24, 26, 29, 31, 33, 36, 37, 39, 45, 52, 53, 54, 56, 58, 59, 61, 62, 67, 76, 81, 90, 98, 99, 100, 101, 102, 103, 106, 107, 111, 112, 113, 114, 116, 117], "nan": [20, 21, 104], "deep": [20, 21, 22], "copy_annot": [20, 22, 31, 32, 33, 69, 105], "program": [20, 21, 22, 63, 99, 111, 126, 129, 130], "clustalw": [20, 22], "don": [20, 21, 22, 29, 39, 46, 66, 67, 76, 81, 110, 111, 124], "t": [20, 21, 22, 24, 25, 29, 31, 32, 33, 39, 41, 42, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 70, 73, 74, 76, 77, 79, 81, 82, 84, 85, 92, 99, 103, 105, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124], "preserv": [20, 21, 22, 37, 39, 67, 99, 105, 109], "so": [20, 21, 22, 29, 31, 32, 33, 39, 41, 43, 50, 59, 63, 64, 67, 69, 73, 79, 81, 82, 84, 86, 98, 103, 105, 107, 110, 113, 114, 117, 130], "dictionari": [20, 21, 22, 24, 29, 37, 39, 53, 54, 67, 82, 103, 107], "ignor": [20, 21, 22, 24, 31, 32, 33, 37, 39, 48, 73, 82], "safe": [20, 22, 39, 84], "larger": [20, 21, 22, 111, 114], "current": [20, 21, 22, 24, 26, 31, 32, 33, 37, 39, 51, 59, 82, 103, 104, 114], "count_gaps_per_po": [20, 21], "include_ambigu": [20, 21, 22, 31, 32, 33, 67], "count": [20, 21, 22, 24, 29, 31, 32, 33, 37, 39, 103], "per": [20, 21, 22, 25, 31, 32, 33, 39, 67, 82, 103, 111, 113, 114], "count_gaps_per_seq": [20, 21, 90], "induced_bi": [20, 21], "consid": [20, 21, 24, 39, 54, 73, 88, 105, 111, 113, 114, 117], "induc": [20, 21, 90], "via": [20, 21, 25, 47, 52, 53, 66, 67, 79, 82, 104, 105, 126, 129], "motif_length": [20, 21, 22, 29, 31, 32, 33, 44, 45, 62, 67, 73, 87], "allow_gap": [20, 21, 22, 31, 32, 33], "exclude_unobserv": [20, 21, 22, 31, 32, 33], "No": [20, 21, 22, 31, 32, 33, 64, 92, 126, 129], "expans": [20, 21, 22, 31, 32, 33], "those": [20, 21, 22, 31, 32, 33, 37, 41, 46, 49, 59, 67, 73, 76, 77, 82, 99, 103, 105, 107, 121], "attempt": [20, 21, 22, 31, 32, 33, 37, 73, 109], "unobserv": [20, 21, 22, 31, 32, 33, 51], "combin": [20, 21, 22, 25, 31, 32, 33, 37, 46, 63, 83, 84, 113], "exclud": [20, 21, 22, 24, 31, 32, 33, 37, 39, 45, 47, 67, 104, 105, 118], "overlap": [20, 21, 22, 25, 31, 32, 33, 39, 45, 46, 67, 94, 105], "counts_per_po": [20, 21], "alert": [20, 21, 22], "warn": [20, 21, 22, 29, 31, 32, 33, 39, 73], "trim": [20, 21], "produc": [20, 21, 24, 25, 46, 48, 64, 103, 111], "counts_per_seq": [20, 21, 22], "canon": [20, 21, 89], "motifcountsarrai": [20, 21, 22], "deepcopi": [20, 21, 22, 39], "default_gap": [20, 21], "degap": [20, 21, 22, 29, 31, 32, 33, 66, 67], "distance_matrix": [20, 21, 65, 71, 72], "calc": [20, 21, 65, 71, 72, 113], "percent": [20, 21, 31, 32, 33, 41, 43, 65, 67, 72], "drop_invalid": [20, 21], "distanc": [20, 21, 22, 31, 32, 33, 39, 47, 63, 70, 75, 82, 100, 101, 108, 109, 114, 130], "calcul": [20, 21, 22, 31, 32, 33, 39, 47, 64, 66, 73, 75, 100, 101, 107, 108, 110, 111, 113, 114, 116], "For": [20, 21, 22, 24, 25, 39, 42, 46, 50, 53, 59, 64, 67, 69, 72, 77, 79, 82, 85, 99, 103, 107, 109, 111, 114, 118, 120, 126, 129, 130], "evolv": [20, 21, 56, 59, 66, 70, 71, 72, 73, 100, 101, 102, 103, 104, 106, 110, 112, 114, 115, 116, 117, 119, 120, 121, 126, 129], "fast_dist": [20, 21, 72, 114], "available_dist": [20, 21, 72], "control": [20, 21, 39, 53, 82, 95, 98, 106, 110, 111, 116], "displai": [20, 21, 22, 31, 32, 33, 37, 46, 48, 52, 53, 54, 55, 57, 59, 61, 62, 63, 71, 73, 77, 92, 94, 98, 103, 109, 114, 116, 117, 118, 121, 129], "arithmeticerror": [20, 21, 73], "rais": [20, 21, 22, 24, 29, 31, 32, 33, 36, 39, 41, 42, 46, 64, 69, 73, 74, 83, 84, 105, 111], "dotplot": [20, 21, 22], "name1": [20, 21, 22, 39, 88, 89], "name2": [20, 21, 22, 39, 88, 89], "window": [20, 21, 22, 31, 32, 33, 88, 91, 113], "20": [20, 21, 22, 48, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 69, 73, 82, 85, 90, 92, 103, 105, 107, 111, 113], "threshold": [20, 21, 22, 47, 88, 98], "k": [20, 21, 22, 31, 32, 33, 36, 68, 71, 73, 79, 83, 84, 85, 106, 114, 126, 129], "min_gap": [20, 21, 22], "500": [20, 21, 22, 37, 49, 50, 54, 60, 90, 91, 92, 98, 107], "rc": [20, 21, 22, 29, 31, 32, 33, 66, 69, 88, 105], "random": [20, 21, 22, 29, 31, 32, 33, 37, 39, 112, 113], "chosen": [20, 21, 22, 88], "made": [20, 21, 22, 29, 31, 32, 33, 37, 39, 79, 113, 122, 127, 129], "mer": [20, 21, 22, 31, 32, 33, 126, 129], "size": [20, 21, 22, 24, 45, 88, 111, 113, 114], "comparison": [20, 21, 22, 130], "ident": [20, 21, 22, 31, 32, 33, 39, 41, 67, 107, 112], "break": [20, 21, 22, 24, 67, 69, 82, 110], "increas": [20, 21, 22, 111, 117], "speed": [20, 21, 22, 24, 56, 58, 73, 87], "reduc": [20, 21, 22, 103], "join": [20, 21, 22, 37, 47, 67, 69, 70, 108], "adjac": [20, 21, 22, 67, 88], "figur": [20, 21, 22, 83, 84, 88], "height": [20, 21, 22, 39, 49, 50, 54, 60, 90, 91, 92, 94, 95, 96, 97, 98], "len": [20, 21, 22, 24, 66, 67, 69, 74, 84, 105, 111, 113, 114, 121], "revers": [20, 21, 22, 29, 31, 32, 33, 37, 51, 63, 67, 69, 73, 103, 105, 130], "compliment": [20, 21, 22], "also": [20, 21, 22, 24, 25, 36, 39, 46, 51, 53, 63, 65, 66, 67, 69, 71, 72, 73, 77, 79, 81, 82, 83, 84, 92, 102, 103, 104, 105, 107, 111, 113, 114, 117, 118, 123, 126, 129, 130], "nucleic": [20, 21, 22, 24, 31, 32, 33, 47], "acid": [20, 21, 22, 24, 26, 31, 32, 33, 43, 47, 73, 76, 78, 85, 99, 104, 106], "annotateddraw": [20, 21, 22, 89], "entropy_per_po": [20, 21], "shannon": [20, 21, 22], "entropi": [20, 21, 22, 91], "entropy_per_seq": [20, 21, 22], "avoid": [20, 21, 22, 29], "unnecessari": [20, 21, 22, 77, 82], "filter": [20, 21, 37, 47, 69, 77], "predic": [20, 21, 107], "drop_remaind": [20, 21], "callback": [20, 21, 22, 31, 32, 33, 37, 69, 77, 82], "take": [20, 21, 22, 24, 29, 31, 32, 33, 37, 46, 49, 63, 67, 73, 82, 92, 106, 111, 112, 114], "split": [20, 21, 45, 76, 84, 104, 109, 111, 115, 121], "3": [20, 21, 22, 31, 32, 33, 39, 41, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 76, 77, 79, 81, 82, 83, 84, 85, 87, 90, 92, 95, 99, 103, 104, 105, 107, 109, 110, 111, 113, 114, 115, 116, 117, 118, 120, 121, 122, 124, 127, 129, 130], "codon": [20, 21, 22, 24, 26, 31, 33, 43, 46, 47, 56, 58, 62, 63, 78, 85, 99, 108, 110, 117, 123, 130, 131], "modulo": [20, 21, 47], "allow": [20, 21, 22, 25, 29, 31, 32, 33, 39, 44, 46, 67, 71, 73, 76, 77, 79, 82, 84, 105, 107, 108], "drop": [20, 21, 47, 69, 105, 114], "termin": [20, 21, 22, 31, 32, 33, 39, 47, 78, 81, 105], "gap_char": [20, 21], "keep": [20, 21, 39, 77, 82, 103, 105, 114], "get_ambiguous_posit": [20, 21, 22], "char": [20, 21, 22, 29, 31, 32, 33], "annotation_typ": [20, 31, 32, 33], "seq_nam": [20, 21], "get_annotations_match": [20, 31, 32, 33, 69, 105, 118], "extend_queri": [20, 31, 32, 33], "wild": [20, 29, 31, 32, 33], "card": [20, 29, 31, 32, 33], "boolean": [20, 21, 31, 32, 33, 37], "queri": [20, 21, 29, 31, 32, 33, 89, 105, 114, 118, 126, 129, 131], "sub": [20, 31, 32, 33, 37, 39, 65], "annotatablefeatur": [20, 31, 32, 33], "get_by_annot": [20, 31, 32, 33], "ignore_parti": [20, 31, 32, 33], "yield": [20, 21, 31, 32, 33, 104], "correspond": [20, 21, 24, 29, 31, 32, 33, 36, 37, 49, 50, 53, 57, 67, 69, 73, 78, 82, 87, 90, 105, 111, 113, 118], "time": [20, 21, 31, 32, 33, 46, 48, 51, 63, 65, 67, 92, 103, 105, 107, 110, 111, 117, 130], "extend": [20, 31, 32, 33, 39, 69, 73], "beyond": [20, 31, 32, 33, 130], "get_degapped_relative_to": [20, 21, 67], "remov": [20, 21, 22, 31, 32, 33, 36, 39, 47, 76, 81, 105, 109], "given": [20, 21, 31, 32, 33, 36, 37, 52, 67, 107, 113, 129], "alwai": [20, 21, 22, 24, 25, 26, 29, 31, 32, 33, 39, 46, 67, 104, 111, 126, 129], "get_draw": [20, 31, 32, 33], "600": [20, 31, 32, 33, 49, 89, 94, 95, 96, 97], "vertic": [20, 21, 31, 32, 33], "get_gap_arrai": [20, 21], "get_gapped_seq": [20, 21, 67], "seqnam": [20, 21, 22], "arraysequ": [20, 29], "get_identical_set": [20, 21, 22], "mask_degen": [20, 21, 22], "degener": [20, 21, 22, 24, 29, 31, 32, 33, 45, 47], "get_length": [20, 21, 22], "get_motif_prob": [20, 21, 22, 67, 73], "alphabet": [20, 21, 22, 28, 29, 31, 32, 33, 39, 67, 73, 74, 78, 79, 104], "prob": [20, 21, 22], "averag": [20, 21, 22, 39, 61, 62, 103], "frequenc": [20, 21, 22, 29, 31, 32, 33, 57, 61, 62, 67, 73, 103, 104, 106], "across": [20, 21, 22, 53, 102, 103, 105, 107, 111, 117, 121], "resolv": [20, 21, 22, 69, 74, 79], "get_position_indic": [20, 21], "nativ": [20, 21, 114], "negat": [20, 21, 22, 35, 37, 67, 77, 82], "col": [20, 21, 37, 67], "feature_class": [20, 31, 32, 33], "get_seq": [20, 21, 22, 67, 69, 105], "ungap": [20, 21, 29, 31, 32, 33, 67, 69], "get_seq_indic": [20, 21, 22], "get_similar": [20, 21, 22], "target": [20, 21, 22, 39, 74, 109, 123], "min_similar": [20, 21, 22], "max_similar": [20, 21, 22], "util": [20, 21, 22, 31, 32, 33, 67, 71, 73, 75, 77, 82, 83], "transform": [20, 21, 22, 31, 32, 33, 47], "for_seq": [20, 21, 22, 31, 32, 33], "similar": [20, 21, 22, 24, 31, 32, 33, 114], "compar": [20, 21, 22, 31, 32, 33, 37, 39, 52, 69, 73, 83, 84, 88, 103, 109, 110, 129], "minimum": [20, 21, 22, 81], "kept": [20, 21, 22, 39, 71, 114], "inclus": [20, 21, 22], "first_seq": [20, 21, 22], "second_seq": [20, 21, 22], "fraction": [20, 21, 22, 31, 32, 33, 37, 39, 47], "rang": [20, 21, 22, 47, 66, 67, 77, 81, 82, 111], "lot": [20, 21, 22, 39, 67], "unbound": [20, 21, 22], "act": [20, 21, 22, 31, 32, 33, 56, 57, 58, 59, 60, 61, 67, 68, 73, 82, 85, 103], "frac_same_gap": [20, 21, 22, 31, 32, 33], "whole": [20, 21, 22], "elimin": [20, 21, 22, 47, 126], "real": [20, 21, 22, 113, 130], "extract": [20, 21, 22, 46, 47, 63, 66, 105, 116], "rnasequ": [20, 21, 22], "depend": [20, 21, 22, 29, 39, 66, 124, 129], "fail": [20, 21, 22, 29, 64, 111, 116], "get_transl": [20, 21, 22, 31, 33, 66, 70, 74, 85, 87, 92, 99], "gc": [20, 21, 22, 26, 31, 33, 46, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 67, 68, 70, 73, 74, 85, 99, 103, 110], "incomplete_ok": [20, 21, 22, 31, 33, 74, 85, 92], "translat": [20, 21, 22, 26, 31, 32, 33, 43, 47, 70, 78, 79, 80, 99], "core": [20, 21, 22, 31, 32, 33, 59, 66, 67, 69, 74, 76, 79, 80, 81, 103, 104, 105, 109, 111, 118], "genetic_cod": [20, 21, 22, 28, 80], "available_cod": [20, 21, 22, 28, 85], "mix": [20, 21, 22, 31, 33], "nucleotid": [20, 21, 22, 26, 31, 33, 41, 47, 51, 52, 63, 72, 76, 103, 107, 119, 120, 123, 130, 131], "valueerror": [20, 21, 22, 31, 33, 39, 41, 42, 46, 69, 105], "relat": [20, 21, 22, 57, 67, 69, 109, 110, 114, 129, 131], "construct": [20, 21, 22, 31, 32, 33, 37, 41, 54, 57, 65, 73, 79, 82, 99, 105, 107, 113, 117, 118, 121], "has_terminal_stop": [20, 21, 22, 31, 33], "allow_parti": [20, 21, 22, 31, 33, 67], "stop": [20, 21, 22, 26, 31, 33, 47, 73, 78, 85], "divis": [20, 21, 22, 31, 33, 67, 85], "incomplet": [20, 21, 22, 31, 32, 33, 67, 85], "information_plot": [20, 21, 91], "stat": [20, 21, 46, 50, 51, 59, 71, 73, 77, 82, 86, 91, 103, 107, 110, 113, 116, 121], "median": [20, 21, 70, 91], "include_gap": [20, 21, 29, 91], "pixel": [20, 21, 98], "smooth": [20, 21], "sqrt": [20, 21, 39, 111], "mean": [20, 21, 31, 32, 33, 46, 67, 73, 77, 81, 82, 99, 103, 105, 107, 110, 113, 114, 117], "summari": [20, 21, 46, 48, 53], "shown": [20, 21, 46, 48, 55, 73, 74, 80, 90, 111, 118], "y": [20, 21, 22, 24, 26, 31, 32, 33, 67, 68, 69, 73, 77, 79, 82, 84, 85, 98, 105, 106, 107], "axi": [20, 21], "is_arrai": [20, 21, 22], "array_seq": [20, 21, 22], "is_rag": [20, 21, 22], "iter_posit": [20, 21, 67], "pos_ord": [20, 21, 22], "let": [20, 21, 22, 65, 109, 114], "you": [20, 21, 22, 24, 25, 29, 31, 32, 33, 39, 41, 42, 44, 45, 48, 49, 51, 52, 63, 65, 66, 67, 68, 73, 74, 76, 77, 82, 83, 84, 85, 86, 94, 99, 103, 104, 105, 111, 112, 114, 117, 118, 122, 124, 126, 127, 129, 130, 131], "rearrang": [20, 21], "want": [20, 21, 25, 29, 31, 32, 33, 39, 44, 45, 46, 48, 51, 67, 73, 76, 77, 82, 84, 99, 103, 107, 109, 112, 113, 115, 121, 124, 130, 131], "individu": [20, 21, 45, 53, 73, 77, 82, 111, 118, 129, 130], "map": [20, 21, 22, 26, 29, 31, 32, 33, 36, 39, 53, 69, 79, 105, 108], "singl": [20, 21, 22, 25, 31, 32, 33, 37, 39, 41, 42, 46, 47, 48, 51, 63, 71, 78, 105, 107, 109, 117], "Will": [20, 21, 22, 37, 39], "indexerror": [20, 21], "exce": [20, 21, 22], "happen": [20, 21, 55], "rag": [20, 21], "seq_len": [20, 21], "iter_select": [20, 21, 22], "seq_ord": [20, 21, 22], "select": [20, 21, 22, 37, 47, 53, 57, 58, 59, 63, 73, 88, 111, 114, 117, 118, 130, 131], "subset": [20, 21, 22, 24, 39, 47, 77, 81, 82, 117, 126, 129], "along": [20, 21, 22, 39, 44], "down": [20, 21, 22, 111], "transpos": [20, 21, 22, 37], "j": [20, 21, 22, 24, 31, 32, 33, 73, 129, 130], "possibli": [20, 21, 22, 39], "iteritem": [20, 21, 22], "built": [20, 21, 22, 63, 92, 123], "iter_seq": [20, 21, 22], "give": [20, 21, 22, 39, 113], "keyerror": [20, 21, 22, 24, 29, 31, 32, 33, 36, 46, 67, 83, 84], "been": [20, 21, 22, 39, 53, 57, 66, 73, 89, 103, 105, 114, 117, 126, 129], "delet": [20, 21, 22, 29, 31, 32, 33, 39, 109], "named_seq": [20, 21, 22], "iupac_consensu": [20, 21], "iupac": [20, 21, 31, 32, 33, 85], "consensu": [20, 21, 71], "majority_consensu": [20, 21], "most": [20, 21, 22, 31, 32, 33, 39, 46, 47, 61, 63, 64, 67, 69, 73, 74, 81, 83, 84, 105, 117, 118, 126, 130], "item": [20, 21, 24, 29, 31, 32, 33, 36, 39, 81, 83, 84, 91, 103], "matching_ref": [20, 21], "gap_fract": [20, 21, 25, 67], "gap_run": [20, 21], "well": [20, 21, 31, 32, 33, 73, 86, 107, 109], "templat": [20, 21, 37], "consecut": [20, 21, 22], "toler": [20, 21, 73, 103, 104], "rel": [20, 21, 39, 98, 103, 108, 112], "b": [20, 21, 22, 39, 65, 67, 69, 71, 73, 77, 79, 81, 82, 83, 84, 104, 109, 120, 129], "h": [20, 21, 22, 31, 32, 33, 39, 68, 73, 74, 79, 81, 82, 85, 106, 129], "l": [20, 21, 22, 31, 32, 33, 37, 68, 71, 73, 84, 85, 92, 106, 114, 130], "m": [20, 21, 22, 31, 32, 33, 46, 48, 56, 57, 58, 64, 67, 68, 73, 79, 84, 85, 99, 103, 106, 111, 114, 117, 129, 130], "n": [20, 21, 22, 24, 31, 32, 33, 39, 47, 61, 66, 67, 68, 73, 79, 81, 85, 99, 103, 106, 109, 111, 113, 124], "o": [20, 21, 22, 39, 84, 88, 111], "p": [20, 21, 22, 31, 32, 33, 43, 52, 53, 68, 73, 80, 85, 106, 110, 112, 113, 116, 121, 129], "q": [20, 21, 22, 31, 32, 33, 53, 68, 73, 85, 106], "r": [20, 21, 22, 31, 32, 33, 37, 46, 48, 64, 68, 73, 79, 82, 85, 106, 107, 111, 129, 130], "u": [20, 21, 22, 24, 31, 32, 33, 46, 67, 68, 79, 109], "v": [20, 21, 22, 31, 32, 33, 36, 43, 68, 73, 79, 85, 106, 129], "w": [20, 21, 22, 29, 31, 32, 33, 46, 48, 52, 68, 73, 79, 85, 106, 130], "x": [20, 21, 22, 24, 26, 41, 42, 43, 46, 47, 48, 50, 51, 52, 53, 55, 59, 60, 61, 62, 65, 66, 67, 69, 70, 72, 73, 76, 77, 79, 82, 84, 85, 98, 99, 104, 105, 115, 120, 121], "z": [20, 21, 22, 61, 73, 104, 129], "no_degener": [20, 21, 67, 87], "unit": [20, 21, 24, 39, 129], "evolutionari": [20, 21, 39, 46, 47, 63, 67, 72, 75, 103, 107, 117, 123, 131], "properti": [20, 21, 22, 24, 26, 31, 32, 33, 36, 37, 39, 52, 66, 73, 84, 103, 105, 107, 109, 118], "omit_bad_seq": [20, 21, 25, 47], "quantil": [20, 21, 25], "introduc": [20, 21, 48, 99], "exceed": [20, 21, 73], "obtain": [20, 21, 67, 70, 78, 84, 107, 112, 114], "cutoff": [20, 21, 104], "whose": [20, 21, 26, 36, 37, 71, 109, 113, 114], "than": [20, 21, 22, 37, 39, 46, 67, 72, 73, 84, 99, 107, 109, 110, 111, 121, 122, 127, 130], "omit_gap_po": [20, 21, 47, 67], "allowed_gap_frac": [20, 21, 22], "999999": [20, 21], "proport": [20, 21, 31, 32, 33, 59, 103], "just": [20, 21, 25, 31, 32, 33, 36, 37, 39, 41, 42, 46, 53, 55, 57, 65, 67, 69, 76, 77, 79, 81, 82, 84, 85, 103, 104, 110, 111, 113, 114, 116, 119, 120, 121, 124, 130], "least": [20, 21, 22, 29, 39, 82, 103, 108], "6": [20, 21, 22, 41, 42, 43, 46, 47, 48, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 66, 67, 69, 72, 77, 79, 81, 82, 84, 85, 103, 105, 107, 110, 113, 115, 130], "strictli": [20, 21, 124], "omit_gap_run": [20, 21, 22, 67], "allowed_run": [20, 21, 22], "run": [20, 21, 22, 39, 46, 72, 73, 79, 100, 101, 102, 104, 111, 112, 116], "exactli": [20, 21, 22, 39, 105, 113, 117], "becaus": [20, 21, 22, 24, 39, 46, 53, 55, 56, 58, 67, 69, 72, 73, 82, 99, 103, 105, 107, 113, 114], "test": [20, 21, 22, 29, 31, 32, 33, 37, 39, 47, 60, 63, 67, 69, 82, 86, 87, 100, 104, 107, 108, 109, 112, 114, 115, 117, 121, 123, 129], "trigger": [20, 21, 22, 64], "neg": [20, 21, 22], "still": [20, 21, 22, 126], "through": [20, 21, 22, 24, 47, 63, 66, 67, 69, 105, 109], "omit_gap_seq": [20, 21, 22, 67], "pad_seq": [20, 21, 22], "pad_length": [20, 21, 22], "pad": [20, 21, 22], "max": [20, 21, 22, 39], "less": [20, 21, 22, 67], "probs_per_po": [20, 21], "motiffreqsarrai": [20, 21, 22, 92], "probs_per_seq": [20, 21, 22], "quick_tre": [20, 21, 47], "bootstrap": [20, 21, 47, 71, 108], "parametr": [20, 21, 47, 59, 71, 103, 108], "replic": [20, 21, 98, 103, 105, 112, 113], "build": [20, 21, 22, 25, 73, 75, 100, 101, 130], "phylogeni": [20, 21, 39, 75, 130], "phylogenet": [20, 21, 100, 109, 130], "weight": [20, 21, 29, 31, 32, 33, 71, 103], "major": [20, 21, 46, 123], "node": [20, 21, 39, 49, 73, 98, 108, 117], "store": [20, 21, 46, 47, 82, 103, 111], "edg": [20, 21, 39, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 71, 73, 77, 82, 94, 100, 101, 103, 106, 107, 110, 114, 116, 119, 120, 124], "param": [20, 21, 39, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 70, 73, 81, 103, 106, 107, 110, 115, 116, 117, 119, 120, 121], "omit": [20, 21, 117], "requir": [20, 21, 25, 39, 48, 53, 63, 67, 72, 82, 88, 104, 107, 111, 113, 114, 117, 119, 124], "complement": [20, 21, 22, 24, 29, 31, 32, 33, 69, 105], "rename_seq": [20, 21, 22, 65], "renam": [20, 21, 22, 39, 86, 109, 126], "replace_seq": [20, 21, 70, 99], "aa_to_codon": [20, 21, 70], "shape": [20, 21, 37, 82], "taken": [20, 21, 114], "more": [20, 21, 31, 32, 33, 37, 46, 53, 63, 67, 69, 72, 73, 76, 92, 103, 109, 113, 116, 117, 118, 122, 123, 126, 127, 129, 130], "gener": [20, 21, 25, 31, 32, 33, 45, 46, 49, 52, 53, 61, 62, 63, 65, 66, 67, 73, 82, 92, 105, 107, 109, 111, 112, 113, 114, 116, 117, 118, 130], "necessarili": [20, 21, 67], "three": [20, 21, 90, 106, 109, 119], "rather": [20, 21, 67, 73, 84, 99], "put": [20, 21, 39], "place": [20, 21, 22, 31, 32, 33, 37, 39, 90, 98, 125], "reverse_compl": [20, 21, 22, 31, 33], "synonymn": [20, 21, 22, 31, 33], "sampl": [20, 21, 37, 39, 47, 49, 53, 54, 60, 67, 69, 82, 103, 111, 112, 113, 114, 115, 117, 131], "with_replac": [20, 21], "randint": [20, 21], "mtrand": [20, 21], "randomst": [20, 21], "permut": [20, 21], "flag": [20, 21, 64, 109], "determin": [20, 21, 37, 39, 67, 106, 107], "random_seri": 20, "min": 20, "leav": [20, 21, 114], "seqlogo": [20, 21, 92], "700": [20, 21, 49], "wrap": [20, 21, 22, 31, 32, 33, 39, 65, 92, 126, 129], "vspace": [20, 21, 92], "005": [20, 21, 67], "colour": [20, 21, 31, 32, 33, 92], "logo": [20, 21], "dimens": [20, 21, 37], "total": [20, 21, 39, 67], "custom": [20, 21, 65, 69, 76, 105, 118, 124], "everyth": [20, 21, 31, 32, 33, 50, 59, 76, 103], "ecept": [20, 21], "num_stat": [20, 21], "set_repr_polici": [20, 21, 22, 37, 82], "num_po": [20, 21, 22], "polici": [20, 21, 22, 37], "repr": [20, 21, 22, 37, 52, 65, 69, 105], "repres": [20, 21, 22, 29, 37, 48, 66, 67, 69, 118], "longest": [20, 21, 22], "latter": [20, 21, 22, 48, 67, 73, 82, 95, 103, 111, 113], "sliding_window": [20, 21, 31, 32, 33], "step": [20, 21, 31, 32, 33, 67, 70, 71, 103, 107, 109, 111, 114], "interv": [20, 21, 31, 32, 33, 84], "success": [20, 21, 71], "strand_symmetri": [20, 21, 22, 31, 32, 33], "strand": [20, 21, 22, 29, 31, 32, 33, 62, 73, 105], "symmetri": [20, 21, 22, 31, 33], "take_posit": [20, 21, 67], "altern": [20, 21, 39, 47, 67, 73, 82, 85, 103, 109, 112, 126, 129], "take_positions_if": [20, 21], "take_seq": [20, 21, 22, 67], "old": [20, 21, 22, 37, 39], "take_seqs_if": [20, 21, 22, 67], "to_dict": [20, 21, 22, 36, 37, 67, 82, 114], "to_dna": [20, 21, 22, 31, 33, 66, 67], "to_fasta": [20, 21, 22, 31, 32, 33, 66, 67, 74, 99], "fasta": [20, 21, 22, 31, 32, 33, 41, 42, 43, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 70, 71, 72, 73, 79, 85, 86, 87, 88, 90, 91, 92, 101, 102, 103, 107, 110, 111, 112, 116, 117, 119, 121], "make_seqlabel": [20, 21, 22, 31, 32, 33], "to_html": [20, 21, 31, 32, 33, 37, 82], "name_ord": [20, 21], "60": [20, 21, 31, 32, 33, 41, 42, 43, 49, 67, 69, 70, 73, 76, 92, 99, 113, 120], "color": [20, 21, 29, 31, 32, 33, 54, 82, 95, 97], "font_siz": [20, 21, 29, 31, 32, 33, 37], "12": [20, 21, 29, 31, 32, 33, 37, 46, 49, 57, 59, 65, 67, 69, 74, 77, 81, 82, 85, 105, 107, 110, 113, 117], "font_famili": [20, 21, 29, 31, 32, 33], "lucida": [20, 21, 29, 31, 32, 33], "consol": [20, 21, 29, 31, 32, 33], "html": [20, 21, 31, 32, 33, 37, 59, 103, 111], "embed": [20, 21, 31, 32, 33, 130], "style": [20, 21, 31, 32, 33, 37, 39, 53, 126, 129, 130], "truncat": [20, 21, 29, 31, 32, 33, 41, 42, 43, 47, 48, 59, 67, 69, 70, 73, 76, 99, 103, 120], "exist": [20, 21, 31, 32, 33, 37, 48, 64, 73, 107, 110], "affect": [20, 21, 31, 32, 33, 58, 73, 77, 79, 82, 117], "denot": [20, 21, 31, 32, 33, 51], "font": [20, 21, 29, 31, 32, 33], "famili": [20, 21, 31, 32, 33, 73], "To": [20, 21, 31, 32, 33, 48, 54, 67, 69, 73, 76, 77, 82, 84, 98, 103, 104, 105, 107, 109, 111, 113, 114, 117, 121], "jupyt": [20, 21, 31, 32, 33, 48, 53, 73, 93, 111, 124, 130], "notebook": [20, 21, 31, 32, 33, 53, 93, 111, 130], "ipython": [20, 21, 31, 32, 33, 59, 103], "import": [20, 21, 25, 28, 31, 32, 33, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 126, 129], "aln": [20, 21, 25, 31, 32, 33, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 67, 69, 70, 71, 72, 73, 76, 87, 90, 91, 92, 103, 104, 105, 107, 112, 116, 117, 119, 121], "to_json": [20, 21, 22, 24, 29, 31, 32, 33, 37, 39, 47, 73], "to_moltyp": [20, 21, 22, 31, 32, 33], "to_nexu": [20, 21, 22], "seq_typ": [20, 21, 22], "50": [20, 21, 22, 39, 49, 53, 55, 67, 73, 92, 107, 113], "nexu": [20, 21, 22], "id": [20, 21, 22, 26, 31, 33, 53, 67, 82, 85, 104, 122, 127], "Not": [20, 21, 22, 103], "come": [20, 21, 22, 37, 39, 63, 123, 124], "speci": [20, 21, 22, 76, 81, 104, 109, 111, 119], "concaten": [20, 21, 22, 37, 47, 105, 115], "multipl": [20, 21, 22, 24, 31, 32, 33, 45, 47, 48, 73, 84, 102, 105, 108, 118, 126, 130], "togeth": [20, 21, 22, 25, 37, 63, 84, 104, 107, 123], "rna": [20, 21, 22, 24, 31, 33, 45, 72, 79], "except": [20, 21, 22, 24, 25, 39, 64, 69, 73, 74, 83, 84, 92, 105, 111], "invalid": [20, 21, 22, 25, 29, 31, 32, 33, 104], "to_phylip": [20, 21, 22, 67], "phylip": [20, 21, 22, 37, 82, 86, 102, 106], "to_pretti": [20, 21], "represent": [20, 21, 26, 39, 53, 67, 73, 114], "pretti": [20, 21, 121, 130], "to_protein": [20, 21, 22, 67], "to_rich_dict": [20, 21, 22, 24, 29, 31, 32, 33, 36, 37, 39], "detail": [20, 21, 22, 37, 45, 46, 53, 63, 67, 69, 73, 105, 130], "content": [20, 21, 22, 37, 48, 77, 82, 92, 130], "to_rna": [20, 21, 22, 31, 33, 66, 67], "to_typ": [20, 21, 67], "convers": [20, 21, 29, 47, 74, 80, 113], "lose": [20, 21], "would": [20, 21, 24, 39, 52, 67, 109, 111, 114, 130], "trim_stop_codon": [20, 21, 22, 31, 33, 47, 67, 74], "variable_posit": [20, 21, 67], "include_gap_motif": [20, 21], "variabl": [20, 21, 69, 73, 91, 111], "index": [20, 21, 24, 26, 29, 31, 32, 33, 36, 37, 39, 48, 65, 67, 69, 105, 113], "with_gaps_from": 20, "overwritten": [20, 48], "with_masked_annot": [20, 31, 32, 33, 69, 105], "annot_typ": [20, 31, 32, 33], "mask_char": [20, 31, 32, 33, 69, 105], "shadow": [20, 31, 32, 33, 105, 118], "region": [20, 31, 32, 33, 77, 82, 105, 118], "mask": [20, 31, 32, 33, 84, 105], "with_modified_termini": [20, 21, 22], "termini": [20, 21, 22], "gapmotif": [20, 21, 22], "correct": [20, 21, 22, 24, 29, 39, 47, 73, 79, 82, 84, 111], "write": [20, 21, 22, 37, 39, 46, 47, 48, 52, 60, 69, 84, 87, 90, 99, 100, 101, 102, 111, 124], "infer": [20, 21, 22, 67, 76, 77, 82], "hold": [21, 24, 26, 31, 32, 33, 67], "dens": 21, "_often_": 21, "might": [21, 31, 32, 33, 39, 69, 73, 113], "some": [21, 24, 31, 32, 33, 36, 39, 46, 53, 59, 63, 67, 69, 70, 76, 84, 92, 103, 104, 111, 113, 114, 117, 130], "larg": [21, 39, 63, 73, 109, 114, 130], "symbol": [21, 24, 29, 31, 32, 33, 104], "64": [21, 26, 49, 62, 73, 113, 130], "tripeptid": 21, "letter": [21, 106], "8000": 21, "_not_": [21, 31, 32, 33], "around": [21, 39, 46], "unpredict": 21, "wrong": 21, "greater": [21, 107, 109, 111], "255": [21, 49, 69, 82], "uint8": [21, 113], "need": [21, 24, 31, 32, 33, 39, 46, 65, 67, 69, 73, 82, 86, 99, 103, 107, 109, 110, 111, 112, 113, 114, 116, 117, 124], "uint16": 21, "65536": 21, "do": [21, 31, 32, 33, 39, 66, 67, 69, 73, 77, 82, 103, 104, 105, 107, 109, 110, 111, 113, 114, 117, 124, 130], "sign": 21, "your": [21, 24, 46, 48, 49, 67, 69, 77, 79, 82, 99, 100, 101, 102, 110, 111, 116, 126, 129, 131], "unless": [21, 24, 25, 37, 48, 51], "love": 21, "miseri": 21, "hard": 21, "debug": 21, "problem": [21, 111, 123, 130], "implement": [21, 24, 25, 26, 29, 31, 32, 33, 39, 59, 63, 72, 103, 111, 113, 130], "usual": [21, 67, 103, 105, 114], "user": [21, 24, 47, 48, 63, 71, 84, 111, 113], "think": [21, 117], "editor": 21, "clustal": 21, "typic": [21, 24, 25, 31, 32, 33, 67, 73, 107], "cut": 21, "terminologi": 21, "view": [21, 36, 53, 104, 110, 116], "longer": [21, 67], "directli": [21, 24, 29, 39, 66, 76, 77, 82, 85, 99, 103], "updat": [21, 36, 39], "two": [21, 24, 25, 26, 31, 32, 33, 39, 46, 47, 54, 57, 63, 65, 67, 73, 77, 82, 83, 84, 88, 103, 104, 105, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121], "sync": 21, "sort": [21, 37, 39, 67, 74, 113], "realli": [21, 73], "troubl": 21, "immut": [21, 26, 66, 82], "though": [21, 105], "enforc": [21, 66, 84], "creat": [21, 25, 26, 29, 31, 32, 33, 44, 45, 46, 47, 48, 54, 64, 65, 73, 76, 89, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 118, 120, 121, 124, 130], "bad": [21, 73, 81, 114], "thing": [21, 65, 69, 105], "sequencetyp": 21, "_input_handl": 21, "input_typ": 21, "input_handl": 21, "_guess_input_typ": 21, "force_same_object": 21, "rebind": 21, "recommend": [21, 24, 73], "cach": 21, "effici": [21, 39, 67, 113], "strip": [21, 29, 31, 32, 33, 39, 81], "them": [21, 31, 32, 33, 37, 43, 63, 66, 86, 99, 103, 104, 107, 111, 114, 115], "primarili": [21, 46, 83, 84], "superclass": [21, 24], "x00": [21, 22, 79], "x01": [21, 22, 79], "x02": [21, 22, 79], "x03": [21, 22, 79], "x04": [21, 22], "x05": [21, 22], "x06": [21, 22], "x07": [21, 22], "x08": [21, 22], "x0b": [21, 22], "x0c": [21, 22], "x0e": [21, 22], "x0f": [21, 22], "x10": [21, 22], "x11": [21, 22], "x12": [21, 22], "x13": [21, 22], "x14": [21, 22], "x15": [21, 22], "x16": [21, 22], "x17": [21, 22], "x18": [21, 22], "x19": [21, 22], "x1a": [21, 22], "x1b": [21, 22], "x1c": [21, 22], "x1d": [21, 22], "x1e": [21, 22], "x1f": [21, 22], "5": [21, 22, 31, 32, 33, 37, 46, 48, 49, 50, 52, 53, 55, 57, 59, 60, 61, 62, 66, 67, 69, 70, 71, 73, 76, 77, 81, 82, 84, 85, 92, 103, 104, 105, 107, 109, 112, 113, 114, 118, 119, 129, 130], "7": [21, 22, 46, 48, 49, 56, 57, 58, 59, 60, 67, 69, 71, 72, 73, 77, 79, 82, 83, 84, 105, 106, 113, 116, 130], "8": [21, 22, 49, 51, 52, 55, 57, 59, 61, 67, 69, 72, 73, 77, 82, 83, 84, 88, 98, 103, 105, 107, 109, 110, 113, 116, 122, 127, 129, 130], "9": [21, 22, 46, 49, 52, 53, 54, 57, 59, 61, 64, 67, 69, 73, 74, 77, 81, 82, 83, 84, 85, 103, 105, 107, 113, 117, 129, 130], "_": [21, 22, 37, 84, 92], "x7f": [21, 22], "x80": [21, 22], "x81": [21, 22], "x82": [21, 22], "x83": [21, 22], "x84": [21, 22], "x85": [21, 22], "x86": [21, 22], "x87": [21, 22], "x88": [21, 22], "x89": [21, 22], "x8a": [21, 22], "x8b": [21, 22], "x8c": [21, 22], "x8d": [21, 22], "x8e": [21, 22], "x8f": [21, 22], "x90": [21, 22], "x91": [21, 22], "x92": [21, 22], "x93": [21, 22], "x94": [21, 22], "x95": [21, 22], "x96": [21, 22], "x97": [21, 22], "x98": [21, 22], "x99": [21, 22], "x9a": [21, 22], "x9b": [21, 22], "x9c": [21, 22], "x9d": [21, 22], "x9e": [21, 22], "x9f": [21, 22], "xa0": [21, 22], "\u00aa": [21, 22], "xad": [21, 22], "\u00b2": [21, 22], "\u00b3": [21, 22], "\u00b5": [21, 22], "\u00b9": [21, 22], "\u00ba": [21, 22], "\u00bc": [21, 22], "\u00bd": [21, 22], "\u00be": [21, 22], "\u00e0": [21, 22], "\u00e1": [21, 22], "\u00e2": [21, 22], "\u00e3": [21, 22], "\u00e4": [21, 22], "\u00e5": [21, 22], "\u00e6": [21, 22], "\u00e7": [21, 22], "\u00e8": [21, 22], "\u00e9": [21, 22], "\u00ea": [21, 22], "\u00eb": [21, 22], "\u00ec": [21, 22], "\u00ed": [21, 22], "\u00ee": [21, 22], "\u00ef": [21, 22], "\u00f0": [21, 22], "\u00f1": [21, 22], "\u00f2": [21, 22], "\u00f3": [21, 22], "\u00f4": [21, 22], "\u00f5": [21, 22], "\u00f6": [21, 22], "\u00f8": [21, 22], "\u00f9": [21, 22], "\u00fa": [21, 22], "\u00fb": [21, 22], "\u00fc": [21, 22], "\u00fd": [21, 22], "\u00fe": [21, 22], "\u00df": [21, 22], "\u00ff": [21, 22], "what": [21, 25, 29, 45, 46, 49, 105, 107, 111, 114, 117], "wa": [21, 39, 46, 47, 48, 64, 69, 81, 84, 89, 97, 107, 109, 114, 122, 126, 127, 129], "get_sub_align": 21, "po": [21, 29, 31, 32, 33, 67], "invert_seq": 21, "invert_po": 21, "subalign": 21, "_except_": 21, "unlik": [21, 24], "doe": [21, 24, 25, 29, 36, 39, 61, 62, 64, 67, 69, 77, 82, 105], "share": [21, 31, 32, 33, 39, 54, 117, 121], "integ": [21, 39, 85, 98, 105, 113, 130], "respect": [21, 107], "conversion_f": 22, "force_same_data": 22, "remove_duplicate_nam": 22, "suppress_named_seq": 22, "motifset": [24, 29, 73, 79], "fix": [24, 47, 107, 113], "61": [24, 49, 73, 74, 107, 113], "sens": [24, 31, 32, 33, 91, 129], "itself": [24, 25, 31, 32, 33, 67, 82, 109], "known": [24, 77, 82, 94, 107], "amino": [24, 26, 31, 33, 43, 73, 76, 78, 99, 104, 106], "suppli": [24, 29, 31, 32, 33], "coercion": 24, "appropri": [24, 29, 31, 32, 33, 67, 79, 84, 112], "tripl": 24, "accessor": [24, 39], "lazi": 24, "evalu": [24, 37, 47, 57, 59, 63, 64, 67, 71, 73, 77, 82, 108, 111, 113, 114], "alphabeterror": [24, 74], "with_traceback": 24, "tb": 24, "__traceback__": 24, "adapt_motif_prob": 24, "motif_prob": [24, 67], "prepar": [24, 104], "check": [24, 25, 29, 31, 32, 33, 50, 63, 111, 126, 129], "occurr": [24, 31, 32, 33, 37, 67, 113], "enumer": [24, 81], "ucag": 24, "ccug": 24, "reflect": [24, 39, 81, 88], "second": [24, 29, 31, 32, 33, 67, 73, 111], "third": [24, 46], "vector": [24, 31, 32, 33, 116], "we": [24, 39, 41, 42, 43, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 73, 76, 77, 79, 81, 82, 84, 85, 88, 89, 90, 92, 93, 97, 98, 99, 100, 101, 102, 103, 105, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 126, 127, 129, 130], "unsign": 24, "subtract": 24, "surpris": 24, "wrapraround": 24, "maxint": 24, "explicitli": [24, 29, 31, 32, 33, 48, 67, 73, 82, 103, 106, 111, 126, 129], "coerc": 24, "slientli": 24, "unrecogn": 24, "tcag": [24, 49, 73, 79, 92], "from_indic": [24, 68], "input": [24, 25, 29, 31, 32, 33, 45, 46, 47, 63, 64, 65, 71, 76, 99, 104, 111], "invers": [24, 69, 105], "to_indic": [24, 68], "ccau": 24, "from_ordinals_to_seq": [24, 68], "attributeerror": [24, 64, 83, 84], "from_seq_to_arrai": 24, "ndarrai": [24, 67, 82], "It": [24, 25, 26, 31, 32, 33, 44, 45, 48, 51, 55, 59, 66, 67, 76, 79, 82, 83, 84, 93, 103, 105, 107, 109, 111, 113, 114, 123, 130], "seqeunc": 24, "get_gap_motif": 24, "get_matched_arrai": 24, "dtype": [24, 37, 82, 113], "ith": 24, "jth": 24, "encompass": 24, "perhap": 24, "merg": [24, 71, 88], "noth": [24, 31, 32, 33, 73], "about": [24, 67, 69, 84, 111], "get_motif_len": 24, "thei": [24, 25, 39, 41, 43, 46, 53, 63, 67, 69, 72, 85, 92, 99, 105, 107, 109, 114, 117, 123, 129], "get_subset": 24, "motif_subset": 24, "alreadi": [24, 37, 67, 99], "get_word_alphabet": [24, 67, 68], "word_length": 24, "jointenumer": 24, "cannot": [24, 26, 31, 32, 33, 67, 104, 109], "unpack": 24, "_are_": 24, "includes_gap_motif": 24, "goe": 24, "extra": [24, 31, 33, 39, 124], "lookup": 24, "_really_": 24, "bind": [24, 92, 111], "_obj_to_index": 24, "__getitem__": [24, 69, 105], "intern": [24, 39, 49, 81, 98, 109], "is_valid": [24, 29, 31, 32, 33, 79], "resolve_ambigu": [24, 74], "ambig_motif": [24, 74], "multi": 24, "screen": [24, 73], "against": [24, 47, 84, 110], "version": [24, 39, 46, 48, 81, 129], "were": [24, 69, 73, 89, 99, 103, 107, 129], "found": [24, 36], "for_pickl": [24, 29], "with_gap_motif": 24, "resembl": 24, "app_typ": 25, "apptyp": 25, "skip_not_complet": 25, "decor": [25, 65], "bound": [25, 39, 49, 84], "static": [25, 77, 82], "notcomplet": [25, 46], "being": [25, 29, 39, 48, 63, 65, 69, 73, 82, 84, 88, 105, 107, 109, 113, 126, 129], "main": [25, 64, 73, 111], "occur": [25, 29, 31, 32, 33, 46, 64, 73, 83, 84, 107], "loader": [25, 41, 42, 43, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 89], "writer": [25, 37, 46, 52], "compos": [25, 47, 48, 63, 111], "sum": [25, 37, 39, 53, 67, 74, 114], "sequenti": [25, 107, 117], "invok": [25, 77, 82, 111], "independ": [25, 39, 73, 82], "usag": [25, 39, 41, 43, 63], "app1": 25, "app2": 25, "equival": [25, 39, 67, 88, 114], "constrain": [25, 73, 103, 110, 117], "how": [25, 29, 31, 32, 33, 45, 46, 67, 69, 76, 78, 81, 99, 100, 101, 102, 104, 107, 109, 110, 111, 112, 113, 114, 117, 130], "a_load": [25, 46], "a_gener": [25, 46], "a_writ": [25, 46], "typeerror": [25, 29, 46, 67, 84], "There": [25, 46, 48, 69, 73, 104, 105, 111, 126, 129], "constraint": [25, 46, 73, 84, 103, 112, 116], "asid": [25, 50, 117], "compat": [25, 39], "below": [25, 39, 44, 45, 48, 50, 53, 55, 63, 64, 67, 69, 73, 79, 84, 86, 88, 90, 111, 114, 118, 124], "In": [25, 31, 32, 33, 36, 37, 39, 48, 52, 54, 55, 63, 65, 66, 67, 69, 71, 73, 74, 76, 77, 82, 83, 84, 85, 90, 99, 102, 103, 104, 105, 106, 107, 109, 111, 114, 115, 117], "call": [25, 31, 32, 33, 59, 64, 65, 67, 69, 73, 74, 79, 83, 84, 103, 105, 107, 109, 111, 114], "hint": [25, 65], "__call__": 25, "immedi": [25, 107], "consist": [25, 41, 43, 49, 82, 105, 111, 121, 126], "definit": [25, 41], "alignedseqstyp": [25, 65], "serialisabletyp": [25, 45, 47, 65], "drop_bad": 25, "def": [25, 65, 67, 69, 76, 84, 105, 111, 112], "__init__": [25, 84], "union": [25, 65, 83, 84], "serialis": [25, 47, 52], "staticmethod": 25, "omit_seq": 25, "now": [25, 29, 53, 60, 65, 67, 79, 97, 100, 101, 103, 109, 110, 113, 114, 115, 116, 117, 120, 126, 129], "variant": [25, 61, 73, 124], "ones": 25, "omit_bad": 25, "95": [25, 49, 103, 110, 113, 117], "code_sequ": 26, "start_codon_sequ": 26, "vice": 26, "versa": 26, "get_cod": [26, 28, 74], "These": [26, 28, 37, 46, 48, 49, 51, 53, 63, 64, 66, 67, 69, 84, 98, 103, 105, 107, 111, 114, 116, 117, 118, 123, 129], "ffllssssyi": 26, "cc": [26, 68, 84], "wllllpppphhqqrrrriiimttttnnkkssrrvvvvaaaaddeegggg": 26, "sgc": 26, "uuu": 26, "ttt": [26, 56, 57, 58, 59, 60, 61, 67, 68, 69, 73, 74, 85, 103, 105], "ttc": [26, 56, 57, 58, 59, 60, 61, 67, 68, 73, 85, 103], "arbitrari": [26, 37, 39], "taa": [26, 67, 68, 74, 85], "tag": [26, 67, 68, 69, 85], "tga": [26, 67, 68, 85], "ncbi": [26, 126, 129, 130], "onc": [26, 39, 109, 124], "block": [26, 111], "quartet": 26, "xyn": 26, "doublet": 26, "xyt": 26, "xyc": 26, "xya": 26, "xyg": 26, "aa": [26, 67, 68, 74, 85, 92, 99, 105, 113], "singlet": 26, "ggg": [26, 56, 57, 58, 59, 60, 61, 67, 68, 69, 73, 85, 103, 105, 120], "purin": 26, "pyrimidin": 26, "boundari": [26, 73, 103, 107], "xy": 26, "get_stop_indic": [26, 74], "frame": [26, 37, 45, 47, 67, 69, 78, 99], "is_start": 26, "is_stop": 26, "sixfram": [26, 74], "six": [26, 78], "to_regex": [26, 29], "regex": [26, 29, 31, 32, 33], "pattern": [26, 29, 31, 32, 33, 104], "expand": [26, 29], "to_tabl": [26, 82], "entir": [26, 45, 92, 103], "caller": 26, "respons": 26, "find": [26, 39, 67, 78, 130], "open": [26, 37, 49, 64, 69, 102, 106, 114, 122, 127], "load_seq": 28, "load_delimit": 28, "load_tabl": [28, 77, 82], "load_tre": [28, 54, 55, 73, 81, 103, 107, 109, 110, 112, 115, 116, 117], "make_unaligned_seq": [28, 67, 70, 76, 99], "make_seq": [28, 29, 66, 67, 69, 74, 79, 80, 91, 105, 118], "make_aligned_seq": [28, 65, 69, 70, 73, 76, 91, 99, 104, 105], "make_t": [28, 77, 82, 121], "make_tre": [28, 70, 73, 81, 106, 109, 114, 119, 120, 121], "get_moltyp": [28, 66, 79], "get_model": [28, 70, 72, 101, 103, 110, 116, 119, 120], "available_moltyp": [28, 79], "available_app": [28, 46, 47], "define_app": [28, 65], "seq_constructor": [29, 79], "mw_calcul": 29, "add_low": 29, "preserve_existing_moltyp": 29, "make_alphabet_group": 29, "array_seq_constructor": 29, "oper": [29, 36, 37, 46, 56, 69], "know": [29, 67, 103, 105, 107, 115, 121, 126, 129], "connect": [29, 39], "forth": 29, "disambigu": [29, 31, 32, 33], "associ": [29, 52, 63, 84, 103, 114], "proteinsequ": [29, 74], "up": [29, 39, 56, 58, 65, 67, 73, 78, 103, 105, 107, 109, 110, 111, 113, 114, 116, 117, 121], "reset": [29, 79, 117], "can_match": [29, 31, 32, 33], "1st": [29, 31, 33, 99, 121], "2nd": [29, 121], "shorter": [29, 31, 32, 33, 69, 105], "can_mismatch": [29, 31, 32, 33], "mismatch": [29, 31, 32, 33, 39], "can_mispair": [29, 31, 32, 33], "mispair": [29, 31, 32, 33], "etc": [29, 31, 32, 33, 39, 48, 73, 82, 103, 107, 111, 114, 126, 129], "weak": [29, 31, 32, 33], "gu": [29, 31, 32, 33], "can_pair": [29, 31, 32, 33, 66], "categori": [29, 31, 32, 33, 37, 82, 103, 115], "abl": [29, 31, 32, 33, 39, 48, 63], "look": [29, 31, 32, 33, 50, 67, 78, 82, 109, 110, 116, 130], "count_degener": [29, 31, 32, 33], "count_gap": [29, 31, 32, 33], "degenerate_from_seq": 29, "inverse_degener": 29, "Then": [29, 67, 82, 124], "uppercas": 29, "lowercas": 29, "monom": [29, 31, 32, 33, 103], "first_degener": [29, 31, 32, 33], "first_gap": [29, 31, 32, 33], "first_invalid": [29, 31, 32, 33], "first_non_strict": [29, 31, 32, 33], "first_not_in_alphabet": 29, "gap_indic": [29, 31, 32, 33], "gap_map": [29, 31, 32, 33, 67], "ungapped_coord": 29, "gapped_coord": 29, "themselv": [29, 31, 32, 33, 63, 105, 118, 123], "gap_vector": [29, 31, 32, 33], "get_css_styl": 29, "css": [29, 37], "monospac": 29, "get_degenerate_posit": 29, "get_typ": [29, 31, 32, 33], "gettyp": [29, 31, 32, 33], "is_ambigu": 29, "querymotif": 29, "amibigu": 29, "is_degener": [29, 31, 32, 33], "is_gap": [29, 31, 32, 33, 67], "is_strict": [29, 31, 32, 33], "make_array_seq": [29, 66], "must_match": [29, 31, 32, 33], "must_pair": [29, 31, 32, 33], "mw": [29, 31, 32, 33], "delta": [29, 31, 32, 33], "molecular": [29, 31, 32, 33, 45, 46, 63, 66, 73, 78, 123, 129, 130, 131], "decid": [29, 31, 32, 33, 76], "possibilit": 29, "strand_symmetric_motif": 29, "complementari": 29, "valid_on_alphabet": 29, "actual": [29, 39, 73, 77, 82, 107, 109, 110, 111, 116, 117], "anyth": [29, 104, 110], "__contains__": 29, "verify_sequ": 29, "gaps_allow": [29, 31, 32, 33], "wildcards_allow": [29, 31, 32, 33], "mechan": [29, 73], "parallel": [29, 108, 112, 123, 129, 130], "routin": 29, "what_ambigu": 29, "minim": 29, "duplic": 29, "degeneratefromsequ": 29, "preserve_cas": [31, 32, 33], "line_wrap": [31, 32, 33], "gapped_by_map_motif_it": [31, 32, 33], "gapped_by_map_segment_it": [31, 32, 33], "get_orf_posit": [31, 33], "parse_out_gap": [31, 32, 33], "pre_pars": [31, 32, 33], "seqid": [31, 32, 33], "annotate_matches_to": [31, 32, 33], "allow_multipl": [31, 32, 33], "search": [31, 32, 33, 71, 126, 129], "domain": [31, 32, 33], "codon_alphabet": [31, 33, 74], "codonalphabet": [31, 33, 78], "deleg": [31, 32, 33], "_seq": [31, 32, 33, 74], "diff": [31, 32, 33], "misc": [31, 32, 33, 76, 84], "distancefrommatrix": [31, 32, 33, 84], "_elements_": [31, 32, 33], "behavior": [31, 32, 33, 39], "suggest": [31, 32, 33], "One": [31, 32, 33, 48, 69, 107], "advantag": [31, 32, 33, 46, 112], "standalon": [31, 32, 33, 111, 126, 129], "factori": [31, 32, 33, 84, 113], "sinc": [31, 32, 33, 39, 41, 42, 51, 52, 69, 73, 103, 105, 112, 114], "aggreg": [31, 32, 33], "complet": [31, 32, 33, 39, 46, 48, 64, 114], "frac_diff": [31, 32, 33], "frac_sam": [31, 32, 33], "empti": [31, 32, 33, 36, 69, 105], "frac_diff_gap": [31, 32, 33], "frac": [31, 32, 33], "word": [31, 32, 33, 39, 63, 67, 111], "frac_diff_non_gap": [31, 32, 33], "doesn": [31, 32, 33, 39, 73], "frac_same_non_gap": [31, 32, 33], "frac_similar": [31, 32, 33], "similar_pair": [31, 32, 33], "pairsfromgroup": [31, 32, 33], "residu": [31, 32, 33, 82, 104, 105], "re": [31, 32, 33, 39, 73, 92, 103, 107, 113], "expens": [31, 32, 33], "accord": [31, 32, 33, 37, 107], "get_in_motif_s": [31, 32, 33, 74], "log_warn": [31, 32, 33], "notifi": [31, 32, 33], "get_kmer": [31, 32, 33], "get_nam": [31, 32, 33], "atg": [31, 33, 56, 57, 58, 59, 60, 61, 67, 68, 73, 74, 85, 103], "dividisbl": [31, 33], "is_annot": [31, 32, 33], "absent": [31, 32, 33], "iter_km": [31, 32, 33], "matrix_dist": [31, 32, 33], "diagon": [31, 32, 33, 50, 53], "kind": [31, 32, 33, 79], "matric": [31, 32, 33, 39, 51, 53, 54, 73, 103, 130], "odd": [31, 32, 33], "18": [31, 32, 33, 48, 49, 57, 59, 73, 82, 111, 113, 121], "da": [31, 32, 33], "water": [31, 32, 33], "monophosph": [31, 32, 33], "oh": [31, 32, 33], "multipli": [31, 32, 33, 111], "accur": [31, 32, 33], "due": [31, 32, 33, 73, 103], "bia": [31, 32, 33], "mitochondri": [31, 32, 33, 73, 85], "genom": [31, 32, 33, 82, 113, 118, 122, 123, 127, 129, 130], "oldchar": [31, 32, 33], "newchar": [31, 32, 33], "resolveambigu": [31, 32, 33], "resolved_ambigu": [31, 32, 33], "shuffl": [31, 32, 33, 39, 66], "strip_bad": [31, 32, 33], "strip_bad_and_gap": [31, 32, 33], "strip_degener": [31, 32, 33], "block_siz": [31, 32, 33, 113], "trail": [31, 32, 33], "newlin": [31, 32, 33, 64], "with_termini_unknown": [31, 32, 33], "remap": [31, 32, 33], "row_condit": 35, "with_head": [35, 77, 82], "record": [35, 47, 48, 63, 76], "iter_row": 36, "add_column_from_str": 36, "cast": 36, "clear": [36, 116], "els": [36, 59, 103, 111], "pop": [36, 39], "popitem": 36, "setdefault": 36, "take_column": 36, "lack": [36, 109], "new_column": 37, "addit": [37, 46, 47, 59, 67, 71, 103, 109, 111, 114, 126], "1d": 37, "python": [37, 46, 47, 48, 64, 67, 78, 84, 102, 103, 104, 111, 114, 122, 124, 127, 129, 130, 131], "count_uniqu": [37, 82], "categorycount": [37, 82], "cross_join": [37, 82], "cross": [37, 76], "outer": 37, "prepend": 37, "_name": 37, "distinct_valu": [37, 82], "distinct": [37, 47, 58, 107, 117, 118], "satisfi": [37, 53], "filtered_by_column": [37, 82], "format_column": [37, 82], "column_head": 37, "format_templ": 37, "get_column": 37, "with_index": 37, "get_row_indic": 37, "nrow": 37, "inner_join": [37, 82], "columns_self": [37, 82], "columns_oth": 37, "use_index": 37, "inner": [37, 82], "matter": [37, 53, 81, 105], "iff": 37, "nomin": [37, 47], "docstr": [37, 84, 104], "by_row": 37, "denominator_func": 37, "func": 37, "normalis": [37, 87], "done": [37, 39, 54, 58, 67, 73, 76, 81, 82, 83, 84, 92, 103, 111, 113, 124, 126, 130], "denomin": 37, "tail": 37, "show_shap": 37, "bottom": [37, 50, 89, 94, 97], "randomli": [37, 47, 88, 107, 114], "superced": 37, "sum_column": 37, "cell": [37, 67, 69, 74, 83, 84, 105], "sum_row": 37, "col_sum": [37, 82], "to_categor": [37, 82], "conting": 37, "under": [37, 46, 47, 67, 73, 76, 79, 85, 112, 121, 125, 130], "to_csv": 37, "comma": 37, "to_datafram": [37, 82], "flatten": 37, "column_align": 37, "col_nam": 37, "text": [37, 47, 49, 69, 72, 79, 90, 95, 104, 105, 111], "c3tabl": 37, "div": 37, "emb": 37, "to_latex": [37, 82], "concat_title_legend": 37, "justifi": [37, 82], "latex": 37, "caption": [37, 82], "justif": [37, 82], "referenc": [37, 39, 103], "page": [37, 122, 124, 127], "here": [37, 39, 46, 65, 66, 67, 69, 71, 73, 81, 82, 84, 91, 92, 99, 103, 107, 110, 112, 114, 117, 118, 125], "command": [37, 46, 48, 111, 115, 131], "packag": [37, 46, 48, 64, 69, 74, 83, 84, 105, 106, 111], "http": [37, 76, 77, 82, 111, 124, 129, 130], "ctan": 37, "org": [37, 130, 131], "pkg": 37, "to_markdown": [37, 82], "markdown": 37, "surround": 37, "to_plotli": 37, "layout": [37, 83, 84], "plotli": [37, 93, 124, 126, 129], "to_rst": [37, 82], "csv_tabl": [37, 82], "rst": [37, 82], "csv": 37, "grid": 37, "to_str": 37, "border": 37, "center": [37, 82], "rest": [37, 79, 82, 103, 113, 117], "md": [37, 82, 84], "bedgraph": 37, "tsv": [37, 77, 82, 86], "delin": [37, 106, 107], "concat": [37, 47], "chrom": [37, 82], "to_tsv": 37, "tab": [37, 59, 77, 82], "tolist": [37, 82, 103], "new_column_nam": [37, 82], "select_as_head": [37, 82], "with_new_column": [37, 82], "subtabl": 37, "with_new_head": [37, 82], "mode": [37, 46, 48, 52, 56, 57, 58, 63, 64], "compress": [37, 47], "plu": [37, 46, 66, 69, 105, 117, 123], "try": [37, 39, 64, 69, 73, 74, 83, 84, 105, 115], "field": [37, 76], "gzip": 37, "gz": 37, "unformat": 37, "accuraci": 37, "parent": [39, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 69, 73, 77, 82, 103, 105, 106, 107, 109, 110, 116, 117, 119, 120], "get_node_matching_nam": [39, 81], "unrooted_deepcopi": [39, 81], "ancestor": [39, 51, 54, 73], "back": [39, 69, 99, 105, 111, 129], "root": [39, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 71, 73, 77, 81, 82, 100, 101, 103, 106, 107, 109, 110, 114, 116, 117, 119, 120], "dynam": 39, "children": [39, 109], "clean": [39, 109], "ref": [39, 41, 42, 43, 76, 88], "ascii_art": [39, 71, 73, 100, 101, 109, 114, 117], "show_intern": [39, 109], "compact": 39, "ascii": [39, 76], "draw": [39, 69, 83, 84, 88, 89, 91], "balanc": [39, 71, 114], "neighbour": [39, 47, 70, 101, 107, 131], "substanti": [39, 81, 129], "improv": [39, 73, 81, 103, 107, 113], "orient": [39, 47, 81], "effect": [39, 76, 81, 114, 117, 130, 131], "clade": [39, 54, 73, 81, 103, 114], "stem": [39, 81], "parameteris": [39, 73, 81, 107], "outgroup_nam": [39, 54, 73, 81, 103, 117], "bifurc": 39, "ep": 39, "name_unnam": 39, "multifurc": 39, "num": [39, 46], "child_group": 39, "nontip": 39, "compare_by_nam": 39, "compare_by_subset": 39, "exclude_absent_taxa": 39, "compare_by_tip_dist": [39, 81], "dist_f": 39, "distance_from_r": 39, "shuffle_f": 39, "m1": 39, "m2": 39, "pearson": [39, 81], "correl": [39, 81, 104], "coeffici": 39, "madimum": 39, "applic": [39, 50, 67, 126, 129, 131], "distance_from_r_squar": 39, "automat": [39, 49, 63, 81, 84, 110], "necessari": [39, 103, 107, 109], "undefin": 39, "reorder": 39, "compare_nam": 39, "treenod": [39, 47, 109], "memo": 39, "_nil": 39, "copy_recurs": 39, "shallow": 39, "attr": 39, "copy_topologi": 39, "branch": [39, 41, 42, 43, 47, 51, 53, 63, 97, 108, 109, 110, 112, 114, 116, 120, 121], "environ": [39, 111], "modul": [39, 47, 65, 66, 83, 84, 89, 103, 104, 111, 130], "_much_": 39, "faster": [39, 67, 111], "descendant_arrai": 39, "tip_list": 39, "descend": [39, 117, 129], "decend": 39, "appear": [39, 49], "final": [39, 71, 109, 117], "preorder": 39, "travers": 39, "get_connecting_edg": [39, 81], "lca": 39, "get_connecting_nod": 39, "get_dist": [39, 65, 81], "endpoint": 39, "grab": [39, 67, 69, 112, 118], "get_edge_nam": 39, "tip1nam": 39, "tip2nam": 39, "intersect": 39, "ensur": [39, 69, 73, 99, 103, 107, 109], "tip1": [39, 58, 59], "2name": 39, "subtre": 39, "sai": [39, 46, 76, 84, 118], "primat": [39, 54, 55, 117, 119, 130], "set_param_rul": [39, 73, 103, 107, 110, 115, 116, 117, 121], "get_edge_vector": 39, "include_root": 39, "postfix": 39, "get_figur": [39, 49, 50, 54, 60, 94, 95, 96, 97, 98], "squar": [39, 73, 84, 107, 108], "dendrogram": 39, "angular": 39, "radial": 39, "circular": 39, "get_max_tip_tip_dist": 39, "dist": [39, 47, 71, 72, 81, 114], "internal_nod": 39, "get_newick": [39, 81], "with_dist": [39, 81], "semicolon": 39, "escape_nam": 39, "with_node_nam": 39, "quot": 39, "get_newick_recurs": 39, "get_node_nam": [39, 81], "includeself": 39, "tipsonli": 39, "natur": [39, 47, 56, 57, 58, 59, 63, 107, 109, 117, 130, 131], "get_nodes_dict": [39, 81], "treeerror": 39, "encount": 39, "get_param_valu": [39, 73, 103, 107], "get_sub_tre": [39, 81], "name_list": 39, "ignore_miss": 39, "keep_root": 39, "otu": [39, 82], "aren": 39, "constant": [39, 117], "child": [39, 81], "get_tip_nam": [39, 81], "get_xml": [39, 81], "index_in_par": 39, "is_root": 39, "is_tip": [39, 81], "isroot": 39, "istip": 39, "iter_nontip": [39, 81], "include_self": 39, "iter_tip": [39, 81, 109], "last_common_ancestor": [39, 81], "levelord": 39, "lowest_common_ancestor": 39, "tipnam": 39, "lowest": 39, "make_tree_arrai": 39, "dec_list": 39, "max_tip_tip_dist": [39, 81], "few": 39, "subclass": 39, "unnam": 39, "name_unnamed_nod": 39, "often": [39, 67, 109], "non_tip_children": 39, "algorithm": [39, 49, 70, 71, 99, 104, 111, 113, 114, 129, 130], "access": [39, 48, 53, 66, 69, 105], "much": [39, 111, 113, 114, 122, 127, 129, 130], "_parent": 39, "mutat": [39, 73, 131], "rememb": [39, 114], "postord": 39, "somewhat": 39, "ineleg": 39, "save": [39, 46, 89, 97, 98, 100, 101, 102, 114, 124], "stack": 39, "30": [39, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 69, 73, 82, 85, 92, 103, 105, 113, 118], "3x": [39, 51], "worst": 39, "comb": 39, "pre_and_postord": 39, "visit": 39, "prune": [39, 109], "reconstruct": [39, 63, 71, 100, 130], "reassign_nam": 39, "reassign": 39, "old_nam": 39, "new_nam": 39, "remove_delet": 39, "is_delet": 39, "remove_nod": [39, 109], "root_at_midpoint": [39, 81], "midpoint": 39, "farthest": 39, "apart": 39, "fn": [39, 67], "rooted_at": [39, 81], "edge_nam": 39, "unroot": [39, 47, 53, 119], "knowledg": 39, "locat": [39, 69, 89, 105], "rooted_with_tip": [39, 81], "same_shap": 39, "same_topologi": [39, 81], "scale_branch_length": [39, 81], "max_length": 39, "ultrametr": 39, "scale": [39, 41, 43, 97, 106, 130], "branchlength": 39, "precis": [39, 55, 116], "set_max_tip_tip_dist": 39, "propag": 39, "julia": 39, "goodrich": 39, "intent": 39, "modifi": [39, 48, 67, 73, 82, 84, 95, 103, 109, 110, 117], "track": [39, 63, 82], "set_param_valu": 39, "set_tip_dist": [39, 81], "distant": [39, 81], "sibl": 39, "sort_ord": 39, "At": [39, 79, 107, 117], "left": [39, 46, 77, 82, 83, 84, 89, 94, 97, 109, 125], "kid": 39, "tip_children": 39, "tip_to_tip_dist": [39, 81], "default_length": 39, "__start": 39, "__stop": 39, "tip_ord": 39, "confus": [39, 117], "tips_within_dist": [39, 81], "interpret": [39, 104], "edge_attribut": 39, "total_descending_branch_length": 39, "total_length": [39, 53], "self_befor": 39, "self_aft": 39, "depth": 39, "inord": 39, "traverse_recurs": 39, "slower": [39, 72, 114], "lead": [39, 117], "error": [39, 46, 63, 72, 73, 83, 84, 99, 114], "_must_": 39, "plan": 39, "walk": 39, "post": [39, 107, 124], "own": [39, 48, 69, 100, 101, 102, 110, 121], "alter": [39, 66, 109], "our": [41, 42, 54, 59, 63, 67, 82, 84, 93, 103, 107, 111, 112, 120, 122, 123, 127, 129, 130], "get_app": [41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64], "load_unalign": [41, 42, 43, 47, 48], "sca1": [41, 42, 43, 46, 86, 88], "cd": [41, 42, 43, 46, 69, 84, 86, 88, 89, 105, 118], "mg94hky": [41, 61, 70, 73, 117], "codon_align": 41, "progressive_align": [41, 42, 43, 47, 48], "2478": [41, 49, 52, 62], "chimp": [41, 42, 43, 76, 119], "atgaaatccaa": [41, 42], "human": [41, 42, 43, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 67, 70, 71, 72, 73, 76, 77, 81, 82, 88, 89, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 114, 116, 117, 119], "macaqu": [41, 42, 43, 89, 119], "humanatgaaatccaaccaagagcggagcaacgaatgcctgcctcccaagaagcgcgagatcccc": [41, 42], "mous": [41, 42, 43, 49, 64, 67, 70, 76, 81, 88, 90, 100, 101, 102, 105, 107, 110, 114, 116, 117], "rat": [41, 42, 43, 70, 99, 106, 114], "lemur": [41, 42, 43], "unique_guid": [41, 42, 48], "tn93": [41, 42, 62, 71, 72, 73], "paralinear": [41, 42, 43, 53, 72], "nt_align": [41, 42], "001": [41, 42, 59, 73], "0076": [41, 42, 52, 54, 62, 73], "01": [41, 42, 49, 73, 77, 82, 103, 113], "02": [41, 42, 46, 73, 103, 107, 110, 113, 116, 117], "mouse_lemur": [41, 42, 43], "guide_tre": [41, 42, 43, 48], "indel_r": [41, 42, 43, 48], "indel_length": [41, 42, 43, 48], "cnfhky": [41, 61, 73], "param_v": [41, 48, 70], "omega": [41, 47, 56, 57, 58, 59, 60, 61, 70, 73, 84, 103, 110, 117], "kappa": [41, 48, 61, 70, 73, 116, 117, 119, 121], "align_param": [41, 42, 43], "10": [41, 42, 43, 48, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 67, 69, 73, 76, 77, 81, 82, 84, 85, 90, 92, 103, 105, 106, 107, 110, 113, 116, 117, 118], "autogenerated_name_ul": 41, "06": [41, 42, 43, 57, 59, 82, 103, 110, 117], "lnl": [41, 42, 43, 50, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 73, 110, 116, 121], "6211": 41, "755293810587": 41, "hky85": [42, 48, 62, 70, 73, 100, 101, 102, 112, 114, 116, 119, 121], "2475": [42, 49], "atgaaatctaa": 42, "f81": [42, 62, 71, 72, 73, 120], "autogenerated_name_gz": 42, "6402": 42, "556916991518": 42, "to_aa": 43, "translate_seq": [43, 47], "wg01": [43, 73], "aa_align": 43, "825": [43, 49], "mksnqersnec": 43, "humanmksnqersneclppkkreipatsrsseekaptlpsdnhrvegtawlpgnpggrghgggrh": 43, "ta": [43, 68, 120], "st": [43, 118], "ap": [43, 73], "0023127545121458606": 43, "008168683695808834": 43, "00019740149152159842": 43, "0030743103943117536": 43, "004763355238688913": 43, "011219581285708921": 43, "052856143725369786": 43, "03580862702845759": 43, "024351474041303396": 43, "autogenerated_name_qm": 43, "jtt92": [43, 73, 114], "3174": 43, "254054131354": 43, "help": [44, 46, 63, 73, 89, 104], "omit_degener": [44, 45, 47], "just_nuc": 44, "gap_is_degen": [44, 45], "app_help": [45, 46], "request": [45, 102, 111, 114], "overview": 45, "accomod": [45, 47], "omit_degenerates_app": 45, "degen": 45, "vignett": 45, "section": [45, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121], "describ": [45, 46, 48, 63, 73, 103, 104, 111], "instal": [46, 63, 111], "crucial": [46, 111], "concept": [46, 48, 117], "concern": [46, 117, 126, 129], "convent": [46, 53, 63, 67], "load_": [46, 76], "write_": 46, "As": [46, 51, 53, 54, 107, 111, 113, 114, 117, 119], "fit_model": 46, "analysi": [46, 63, 75, 79, 97, 113, 130, 131], "extract_stat": 46, "simplifi": [46, 81, 123], "composit": 46, "next": [46, 107, 109, 114, 117], "involv": [46, 79, 81, 104, 107, 114, 115, 117, 123, 126], "work": [46, 48, 64, 66, 69, 74, 83, 84, 105, 111, 122, 126, 127, 129], "illustr": [46, 54, 65, 67, 69, 71, 73, 77, 82, 92, 107, 117, 118], "destin": 46, "directori": [46, 48, 64], "open_data_stor": [46, 48, 52], "out_dstor": 46, "path_to_dir": 46, "fa": [46, 48, 86], "load_align": [46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64], "cpos3": 46, "take_codon_posit": [46, 47], "write_seq": [46, 47], "primate_brca1": [46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 71, 72, 73, 86, 103], "just3rd": 46, "datamemb": [46, 48], "simpler": [46, 73, 87, 107], "loop": [46, 63, 84, 114], "dstore": [46, 48], "apply_to": [46, 48], "fingerprint": 46, "summary_log": [46, 48], "who": [46, 48, 129, 130], "2023": [46, 49], "07": [46, 48, 82, 103], "51": [46, 49, 62, 73, 113, 115], "39": [46, 49, 69, 105, 107, 110, 113], "a120c97c": 46, "16": [46, 48, 49, 53, 57, 59, 64, 73, 77, 82, 85, 103, 105, 107, 113], "runner": [46, 48, 64], "home": [46, 48, 64], "github": [46, 48, 64, 69, 74, 76, 77, 82, 83, 84, 105, 124], "io": [46, 48, 64, 67, 69, 74, 83, 84, 89, 94, 95, 96, 97, 98, 105, 111], "venv": [46, 64, 69, 74, 83, 84, 105], "lib": [46, 48, 64, 69, 74, 83, 84, 105], "python3": [46, 48, 64, 69, 74, 83, 84, 105, 111], "site": [46, 47, 48, 63, 64, 69, 74, 83, 84, 92, 105, 115], "ipykernel_launch": [46, 48], "py": [46, 48, 64, 69, 74, 83, 84, 105, 111], "tmp": 46, "tmpkjhg9gcc": 46, "historymanag": 46, "hist_fil": 46, "memori": [46, 76], "fourfold_degener": 46, "data_stor": [46, 48, 52], "datastoredirectori": 46, "c3org": [46, 48], "doc": [46, 47, 48, 76, 77, 82, 130], "tmphi1l2hfn": 46, "verbos": [46, 53, 55], "id_from_sourc": 46, "functionget_unique_id": 46, "0x7ff4ade63af0": 46, "timenamepython": [46, 48], "versionwhocommandcompos": [46, 48], "39log": 46, "log3": [46, 48], "16runner": 46, "interrog": [46, 49], "did": [46, 64, 107, 111], "datastor": [46, 48], "not_complet": [46, 48], "typenumb": [46, 48], "completed7": 46, "not_completed6": 46, "logs1": [46, 48], "summary_not_complet": 46, "messag": [46, 64, 73, 111], "ength": 46, "trna_profil": [46, 86], "typeoriginmessagenumsourc": 46, "errorload_align": 46, "6trna_profil": 46, "00": [46, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 73, 82, 92, 103, 106, 107, 110, 113, 116, 117, 120], "processor": [46, 111, 130], "machin": [46, 131], "mpi": [46, 111], "analys": [47, 48, 52, 53, 55, 63, 67, 73, 104, 105, 115, 123, 126, 129, 130, 131], "io_new": [47, 64], "pickle_it": 47, "byte": [47, 67, 72, 76, 79], "unpickle_it": 47, "deserialis": [47, 71, 73], "decompress": 47, "to_primit": 47, "primit": 47, "suitabl": [47, 72, 124, 130], "from_primit": 47, "from_json": 47, "identifiertyp": 47, "load_tabular": 47, "distancematrix": [47, 65, 114], "load_json": [47, 89, 94, 95, 96, 97, 98], "whatev": [47, 64], "load_db": 47, "db": [47, 48, 126, 129], "write_json": [47, 89], "write_tabular": 47, "write_db": [47, 48, 52], "databas": [47, 104, 111, 131], "fast_slow_dist": 47, "scale_branch": 47, "divid": 47, "scalar": [47, 51, 55, 84], "uniformize_tre": 47, "standardis": [47, 84], "align_to_ref": 47, "evo": [47, 126, 129], "model_result": [47, 49, 63], "model_collect": 47, "hypothesis_result": [47, 56], "model_collection_result": 47, "hypothesi": [47, 56, 57, 58, 59, 60, 73, 107, 112, 123], "bootstrap_result": 47, "ancestral_st": 47, "ancestr": [47, 63], "tabular_result": [47, 49, 50, 51, 59], "tabulate_stat": [47, 50, 59], "natsel_neutr": [47, 63], "neutral": [47, 57, 59, 63, 73, 108], "assess": [47, 107, 113, 117], "natsel_zhang": [47, 63], "zhang": [47, 59, 62, 73, 103, 130], "et": [47, 51, 53, 59, 60, 61, 62, 73, 103, 106, 122, 127], "al": [47, 51, 53, 59, 60, 61, 62, 73, 100, 101, 102, 103, 106, 110, 122, 127], "mbe": 47, "22": [47, 49, 55, 56, 69, 73, 79, 81, 82, 85, 103, 107, 113, 121], "2472": [47, 49, 103], "2479": [47, 49], "natsel_sitehet": [47, 63], "heterogen": [47, 63, 108], "null": [47, 56, 57, 58, 59, 73, 103, 107, 112, 121], "natsel_timehet": [47, 63], "suffici": [47, 52], "select_translat": 47, "translation_error": 47, "meet": 47, "take_named_seq": [47, 53, 64], "take_n_seq": 47, "choos": 47, "min_length": 47, "fixed_length": 47, "omit_dupl": 47, "redund": 47, "46": [47, 49, 83, 84, 113], "modulenamecomposabledocinput": 47, "typeoutput": 47, "io_newpickle_ittrueserialis": 47, "serialisabletypebyt": 47, "io_newunpickle_ittruedeserialis": 47, "bytesserialisabletyp": 47, "io_newcompresstruecompress": 47, "bytesbyt": 47, "io_newdecompresstruedecompress": 47, "io_newto_primitivetrueconvert": 47, "serialisationserialisabletypeserialisabletyp": 47, "io_newfrom_primitivetruedeserialis": 47, "typesserialisabletypeserialisabletyp": 47, "io_newto_jsontrueconvert": 47, "serialisabletypestr": 47, "io_newfrom_jsontrueconvert": 47, "strserialisabletyp": 47, "io_newload_alignedtrueload": 47, "identifiertypealign": 47, "io_newload_unalignedtrueload": 47, "identifiertypesequencecollect": 47, "io_newload_tabulartrueload": 47, "identifiertypedictarrai": 47, "io_newload_jsontrueload": 47, "identifiertypeserialisabletyp": 47, "io_newload_dbtrueload": 47, "io_newwrite_jsontruewrit": 47, "serialisabletypeidentifiertyp": 47, "io_newwrite_seqstruewrit": 47, "sequencecollectionidentifiertyp": 47, "io_newwrite_tabulartruewrit": 47, "tableidentifiertyp": 47, "io_newwrite_dbtruewrit": 47, "distfast_slow_disttruepairwis": 47, "arrayalignmentdistancematrix": 47, "treescale_branchestruetransform": 47, "scalarphylonod": 47, "treenodephylonod": 47, "treeuniformize_treetruestandardis": 47, "treequick_treetruecomput": 47, "distancematrixphylonod": 47, "alignalign_to_reftruealign": 47, "sequencecollectionalign": 47, "alignprogressive_aligntrueprogress": 47, "evomodeltruedefin": 47, "arrayalignmentserialisabletyp": 47, "evomodel_collectiontruefit": 47, "evohypothesistruespecifi": 47, "evobootstraptrueparametr": 47, "evoancestral_statestruecomput": 47, "model_resultserialisabletyp": 47, "evotabulate_statstrueextract": 47, "evonatsel_neutraltruetest": 47, "evonatsel_zhangtrueth": 47, "evonatsel_sitehettruetest": 47, "evonatsel_timehettrueth": 47, "translateselect_translatabletrueselect": 47, "translatetranslate_seqstruetransl": 47, "sampleconcatfalsecr": 47, "arrayalignmentalign": 47, "sampleomit_degeneratestrueexclud": 47, "sampleomit_gap_postrueexclud": 47, "sampletake_codon_positionstrueextract": 47, "sampletake_named_seqstrueselect": 47, "sampletake_n_seqstrueselect": 47, "samplemin_lengthtruefilt": 47, "samplefixed_lengthtruesampl": 47, "sampleomit_bad_seqstrueelimin": 47, "sampleomit_duplicatedtrueremov": 47, "sampletrim_stop_codonstrueremov": 47, "zip": [48, 103, 113], "flavour": 48, "sqlite": 48, "ensg00000157184": 48, "natggtgccccgcc": 48, "ensg00000131791": 48, "ensg00000127054": 48, "ensg00000067704": 48, "ensg00000182004": 48, "creation": [48, 66, 103], "former": [48, 111], "easier": [48, 66, 122, 127], "issu": [48, 55, 64, 94, 122, 127], "lock": 48, "unnatur": 48, "unlock": 48, "demo": [48, 86, 111], "175": [48, 49], "completed175": 48, "not_completed0": 48, "execut": [48, 56, 58, 73, 79, 82, 111, 123, 129, 130], "forc": [48, 73], "scitrack": 48, "logfil": 48, "regard": [48, 56, 63, 64, 118], "24": [48, 49, 57, 58, 59, 61, 67, 69, 73, 83, 84, 85, 113, 121], "14": [48, 49, 53, 57, 59, 67, 69, 73, 85, 103, 105, 113], "42": [48, 49, 53, 73, 84, 107, 113], "56": [48, 49, 81, 82, 103, 107, 113], "pid8650": 48, "gavin": [48, 99, 101, 102, 103, 105, 106, 107, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 130], "miniconda3": 48, "env": [48, 124], "c3dev": [48, 130, 131], "librari": [48, 111, 123, 126, 129, 130], "runtim": 48, "kernel": 48, "5eb93aeb": 48, "f6e0": 48, "493e": 48, "85d1": 48, "d62895201ae2": 48, "data_path": 48, "nt": 48, "tinydb": 48, "name_callback": 48, "if_exist": 48, "overwrit": 48, "56log": 48, "3gavin": 48, "jsonload_unalign": 48, "vial": 48, "unique_id": 48, "225": [48, 49], "clariti": 48, "eratosthen": 48, "local": [48, 73, 84, 103, 107, 110, 112, 115, 116, 117], "8650": 48, "system_detail": 48, "system": [48, 111, 130], "darwin": 48, "thu": [48, 67, 89, 126, 129], "apr": [48, 73], "25": [48, 49, 52, 67, 69, 73, 83, 84, 85, 105, 113], "23": [48, 49, 56, 58, 60, 77, 82, 85, 96, 107, 110, 113, 116, 117], "27": [48, 49, 59, 61, 67, 69, 73, 85, 113, 117, 130], "pdt": 48, "xnu": 48, "4903": 48, "261": [48, 49, 62, 73], "release_x86_64": 48, "posterior": [49, 73, 103, 107, 115], "margin": 49, "gn": [49, 51, 52, 53, 54, 55, 62, 73, 86, 94, 95, 96, 97], "reconstuctor": 49, "states_result": 49, "5x": [49, 59], "0000": [49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 72, 73, 77, 82, 92, 102, 107], "11": [49, 51, 57, 59, 61, 67, 73, 77, 82, 84, 85, 103, 105, 107, 110, 113, 116, 117], "13": [49, 57, 59, 82, 85, 110, 113, 117, 121], "17": [49, 57, 59, 103, 113], "19": [49, 52, 57, 59, 62, 69, 103, 107, 110, 113, 116, 117, 121], "21": [49, 61, 73, 79, 82, 85, 103, 107, 110, 113, 116, 117, 121, 130], "26": [49, 57, 82, 85, 107, 113], "28": [49, 69, 85, 107, 110, 113, 116, 117], "29": [49, 85, 113], "31": [49, 73, 82, 85, 105, 107, 113], "32": [49, 82, 85, 113], "33": [49, 54, 71, 81, 82, 85, 113, 121], "34": [49, 69, 82, 105, 110, 113, 117], "35": [49, 69, 105, 113, 118, 121], "36": [49, 61, 69, 73, 82, 105, 110, 113], "37": [49, 69, 105, 107, 110, 113, 116, 117], "38": [49, 69, 105, 107, 110, 113, 117, 121], "40": [49, 67, 69, 73, 84, 92, 105, 107, 113, 118], "41": [49, 105, 107, 113], "43": [49, 62, 73, 113], "44": [49, 73, 81, 82, 113], "45": [49, 69, 82, 83, 84, 113], "47": [49, 83, 84, 113], "48": [49, 69, 83, 84, 105, 113, 118], "49": [49, 61, 69, 73, 105, 113, 115], "52": [49, 79, 113], "53": [49, 103, 113], "54": [49, 113], "55": [49, 82, 113], "57": [49, 113], "58": [49, 67, 82, 103, 113], "59": [49, 77, 82, 107, 110, 112, 113, 117, 121], "62": [49, 113], "63": [49, 113], "65": [49, 69, 113], "66": [49, 69, 82, 113], "67": [49, 69, 82, 113], "68": [49, 69, 73, 113], "69": [49, 69, 113], "70": [49, 67, 113], "71": [49, 110, 113], "72": [49, 110, 113], "73": [49, 61, 71, 73, 110, 113], "74": [49, 113, 121], "75": [49, 70, 99, 103, 113], "76": [49, 62, 69, 73, 105, 113], "77": [49, 61, 69, 82, 105, 113, 117], "78": [49, 69, 73, 82, 103, 105, 113], "79": [49, 69, 105, 113], "80": [49, 69, 105, 113], "81": [49, 69, 105, 113], "82": [49, 69, 73, 105, 113], "83": [49, 110, 113], "84": [49, 103, 110, 113, 117], "85": [49, 113, 117], "86": [49, 103, 113], "87": [49, 69, 105, 113, 117], "88": [49, 69, 82, 105, 113], "89": [49, 69, 103, 105, 113], "90": [49, 69, 105, 110, 113], "91": [49, 69, 105, 113], "92": [49, 69, 105, 110, 113, 117], "93": [49, 62, 73, 113, 130], "94": [49, 77, 82, 112, 113], "96": [49, 103, 110, 113], "97": [49, 113], "98": [49, 113, 121], "99": [49, 82, 103, 113], "101": [49, 59, 82, 113], "102": [49, 82, 113], "103": [49, 70, 82, 113], "104": [49, 82, 103, 113], "105": [49, 82, 113], "106": [49, 113], "107": [49, 113], "108": [49, 113], "109": [49, 113], "110": [49, 113], "111": [49, 59, 110, 113, 117], "112": [49, 113, 117], "113": [49, 67, 113], "114": [49, 113], "115": [49, 67, 113], "116": [49, 113], "117": [49, 113], "118": [49, 82, 113], "119": [49, 113], "120": [49, 82, 92, 110, 113, 117], "121": [49, 113, 117], "122": [49, 113], "123": [49, 84, 113], "124": [49, 113], "125": [49, 82, 113], "126": [49, 113], "127": [49, 113], "128": [49, 113], "129": [49, 82, 113], "130": [49, 113], "131": [49, 113], "132": [49, 50, 113], "133": [49, 113], "134": [49, 61, 73, 113, 130], "135": [49, 113], "136": [49, 113], "137": [49, 113], "138": [49, 82, 113], "139": [49, 113], "140": [49, 103, 113], "141": [49, 82, 113], "142": [49, 70, 113], "143": [49, 113], "144": [49, 62, 73, 113], "145": [49, 113], "146": [49, 113], "147": [49, 113], "148": [49, 113], "149": [49, 113, 130], "150": [49, 67, 69], "151": 49, "152": 49, "153": 49, "154": 49, "155": 49, "156": 49, "157": 49, "158": 49, "159": [49, 77, 82], "160": 49, "161": [49, 82], "162": 49, "163": 49, "164": 49, "165": 49, "166": 49, "167": [49, 73], "168": 49, "169": 49, "170": 49, "171": 49, "172": 49, "173": 49, "174": [49, 73], "176": [49, 50], "177": 49, "178": 49, "179": 49, "180": [49, 121], "181": 49, "182": 49, "183": 49, "184": 49, "185": [49, 70], "186": 49, "187": 49, "188": 49, "189": [49, 69], "190": [49, 107, 110, 116, 117, 121], "191": 49, "192": 49, "193": 49, "194": 49, "195": 49, "196": 49, "197": 49, "198": 49, "199": 49, "200": 49, "201": [49, 59, 77, 82], "202": 49, "203": 49, "204": 49, "205": 49, "206": 49, "207": 49, "208": 49, "209": [49, 73], "210": [49, 107, 110, 116, 117, 121], "211": [49, 59], "212": 49, "213": 49, "214": 49, "215": 49, "216": 49, "217": 49, "218": 49, "219": 49, "220": [49, 121], "221": 49, "222": 49, "223": 49, "224": 49, "226": 49, "227": 49, "228": 49, "229": [49, 82], "230": 49, "231": 49, "232": 49, "233": 49, "234": [49, 84], "235": 49, "236": 49, "237": 49, "238": 49, "239": 49, "240": 49, "241": [49, 73], "242": 49, "243": 49, "244": 49, "245": 49, "246": 49, "247": 49, "248": 49, "249": 49, "250": [49, 92], "251": 49, "252": 49, "253": 49, "254": 49, "256": [49, 79], "257": 49, "258": 49, "259": 49, "260": 49, "262": 49, "263": 49, "264": 49, "265": 49, "266": 49, "267": 49, "268": 49, "269": 49, "270": 49, "271": 49, "272": 49, "273": [49, 64], "274": 49, "275": [49, 73], "276": [49, 64], "277": 49, "278": 49, "279": 49, "280": [49, 117], "281": [49, 62, 73, 110, 117, 130], "282": [49, 117], "283": [49, 64], "284": 49, "285": 49, "286": 49, "287": 49, "288": 49, "289": 49, "290": 49, "291": 49, "292": 49, "293": 49, "294": [49, 82], "295": 49, "296": 49, "297": 49, "298": 49, "299": 49, "300": [49, 87, 90, 92], "301": [49, 59], "302": [49, 82], "303": 49, "304": 49, "305": 49, "306": 49, "307": 49, "308": 49, "309": 49, "310": 49, "311": [49, 59, 64, 92], "312": 49, "313": 49, "314": 49, "315": 49, "316": 49, "317": 49, "318": 49, "319": 49, "320": 49, "321": 49, "322": 49, "323": 49, "324": 49, "325": 49, "326": 49, "327": 49, "328": 49, "329": 49, "330": 49, "331": 49, "332": [49, 82], "333": 49, "334": 49, "335": 49, "336": [49, 69], "337": 49, "338": 49, "339": 49, "340": [49, 110, 117], "341": 49, "342": 49, "343": 49, "344": 49, "345": [49, 73, 77, 82], "346": 49, "347": 49, "348": 49, "349": 49, "350": [49, 121], "351": 49, "352": [49, 73], "353": 49, "354": 49, "355": 49, "356": 49, "357": 49, "358": 49, "359": 49, "360": [49, 110], "361": 49, "362": 49, "363": 49, "364": 49, "365": 49, "366": 49, "367": 49, "368": 49, "369": 49, "370": [49, 107, 110, 116, 117], "371": 49, "372": 49, "373": 49, "374": 49, "375": 49, "376": [49, 73], "377": 49, "378": 49, "379": 49, "380": [49, 77, 82, 110, 121], "381": [49, 107], "382": 49, "383": 49, "384": 49, "385": 49, "386": 49, "387": 49, "388": 49, "389": 49, "390": 49, "391": 49, "392": 49, "393": [49, 82], "394": 49, "395": 49, "396": 49, "397": 49, "398": 49, "399": 49, "400": [49, 69, 88, 91, 98], "401": 49, "402": 49, "403": 49, "404": 49, "405": 49, "406": 49, "407": 49, "408": 49, "409": 49, "410": 49, "411": 49, "412": 49, "413": 49, "414": 49, "415": 49, "416": 49, "417": 49, "418": 49, "419": 49, "420": [49, 62, 73], "421": [49, 107], "422": 49, "423": 49, "424": 49, "425": 49, "426": 49, "427": 49, "428": 49, "429": 49, "430": 49, "431": 49, "432": 49, "433": 49, "434": 49, "435": 49, "436": 49, "437": 49, "438": 49, "439": 49, "440": 49, "441": 49, "442": 49, "443": 49, "444": 49, "445": 49, "446": 49, "447": 49, "448": 49, "449": 49, "450": 49, "451": 49, "452": 49, "453": 49, "454": 49, "455": 49, "456": 49, "457": 49, "458": 49, "459": [49, 73], "460": 49, "461": 49, "462": 49, "463": 49, "464": 49, "465": 49, "466": 49, "467": 49, "468": 49, "469": 49, "470": 49, "471": 49, "472": 49, "473": 49, "474": 49, "475": 49, "476": 49, "477": 49, "478": 49, "479": 49, "480": 49, "481": 49, "482": 49, "483": 49, "484": 49, "485": 49, "486": 49, "487": 49, "488": 49, "489": 49, "490": [49, 115], "491": 49, "492": 49, "493": 49, "494": 49, "495": 49, "496": 49, "497": 49, "498": 49, "499": 49, "501": [49, 107], "502": 49, "503": 49, "504": 49, "505": 49, "506": 49, "507": 49, "508": 49, "509": 49, "510": 49, "511": [49, 77, 82, 115], "512": 49, "513": 49, "514": 49, "515": 49, "516": 49, "517": 49, "518": 49, "519": 49, "520": 49, "521": 49, "522": 49, "523": 49, "524": 49, "525": 49, "526": 49, "527": 49, "528": 49, "529": 49, "530": 49, "531": 49, "532": 49, "533": 49, "534": [49, 77, 82], "535": 49, "536": 49, "537": 49, "538": 49, "539": 49, "540": 49, "541": 49, "542": 49, "543": [49, 77, 82], "544": 49, "545": 49, "546": 49, "547": 49, "548": 49, "549": 49, "550": [49, 130], "551": 49, "552": 49, "553": 49, "554": 49, "555": 49, "556": 49, "557": 49, "558": 49, "559": 49, "560": 49, "561": 49, "562": 49, "564": [49, 107], "565": 49, "566": 49, "567": 49, "568": [49, 61, 73], "569": 49, "570": 49, "571": 49, "572": 49, "573": 49, "574": 49, "575": 49, "576": 49, "578": 49, "579": 49, "580": 49, "581": [49, 103], "582": 49, "583": 49, "584": 49, "585": 49, "586": 49, "587": 49, "588": 49, "589": 49, "590": 49, "591": 49, "592": 49, "593": 49, "594": 49, "595": [49, 70], "596": 49, "597": 49, "598": 49, "599": 49, "601": 49, "602": 49, "603": 49, "604": 49, "605": 49, "606": 49, "607": 49, "608": 49, "609": 49, "610": 49, "611": 49, "612": 49, "613": 49, "614": 49, "615": 49, "616": 49, "617": 49, "618": 49, "619": 49, "620": 49, "621": 49, "622": 49, "623": 49, "624": 49, "625": 49, "626": [49, 77, 82], "627": 49, "628": 49, "629": 49, "630": 49, "631": 49, "632": 49, "633": 49, "634": 49, "635": 49, "636": 49, "637": 49, "638": 49, "639": 49, "640": 49, "641": 49, "642": 49, "643": 49, "644": 49, "645": 49, "646": 49, "647": 49, "648": 49, "649": 49, "650": [49, 95], "651": 49, "652": 49, "653": 49, "654": 49, "655": 49, "656": 49, "657": 49, "658": 49, "659": 49, "660": 49, "661": 49, "662": 49, "663": 49, "664": 49, "665": 49, "666": 49, "667": 49, "668": 49, "669": 49, "670": 49, "671": 49, "672": 49, "673": 49, "674": 49, "675": 49, "676": 49, "677": 49, "678": [49, 77, 82], "679": 49, "680": 49, "681": 49, "682": 49, "683": 49, "684": 49, "685": 49, "686": 49, "687": 49, "688": 49, "689": 49, "690": 49, "691": [49, 73], "692": [49, 84], "693": [49, 84], "694": [49, 84], "695": [49, 84], "696": [49, 84], "697": 49, "698": 49, "699": 49, "701": 49, "702": 49, "703": 49, "704": 49, "705": 49, "706": 49, "707": [49, 74], "708": 49, "709": [49, 74], "710": [49, 74, 110], "711": 49, "712": [49, 74], "713": 49, "714": 49, "715": [49, 61, 73], "716": 49, "717": 49, "718": 49, "719": 49, "720": 49, "721": 49, "722": 49, "723": 49, "724": 49, "725": [49, 61, 73], "726": [49, 61, 73, 130], "727": 49, "728": 49, "729": 49, "730": [49, 110], "731": 49, "732": 49, "733": 49, "734": [49, 61, 73, 130], "735": 49, "736": 49, "737": 49, "738": 49, "739": 49, "740": 49, "741": 49, "742": 49, "743": 49, "744": 49, "745": 49, "746": 49, "747": 49, "748": 49, "749": 49, "750": 49, "751": 49, "752": [49, 69, 105], "753": [49, 69, 105], "754": [49, 69, 105], "755": [49, 69, 105], "756": 49, "757": 49, "758": 49, "759": 49, "760": 49, "761": 49, "762": 49, "763": 49, "764": 49, "765": 49, "766": 49, "767": 49, "768": 49, "769": 49, "770": 49, "771": 49, "772": 49, "773": 49, "774": 49, "775": 49, "776": 49, "777": [49, 69, 105], "778": [49, 69, 105], "779": [49, 69, 105], "780": [49, 69, 105], "781": [49, 69, 103, 105], "782": 49, "783": 49, "784": 49, "785": 49, "786": 49, "787": 49, "788": 49, "789": 49, "790": 49, "791": 49, "792": 49, "793": 49, "794": 49, "795": 49, "796": 49, "797": 49, "798": 49, "799": 49, "800": 49, "801": 49, "802": 49, "803": 49, "804": 49, "805": 49, "806": 49, "807": 49, "808": 49, "809": 49, "810": 49, "811": 49, "812": 49, "813": 49, "814": 49, "815": 49, "816": 49, "817": 49, "818": 49, "819": 49, "820": 49, "821": 49, "822": 49, "823": 49, "824": 49, "826": 49, "827": 49, "828": 49, "829": 49, "830": [49, 110], "831": 49, "832": 49, "833": 49, "834": 49, "835": 49, "836": 49, "837": 49, "838": 49, "839": 49, "840": [49, 117], "841": [49, 103], "842": 49, "843": 49, "844": 49, "845": 49, "846": 49, "847": 49, "848": 49, "849": 49, "850": 49, "851": 49, "852": 49, "853": 49, "854": 49, "855": 49, "856": 49, "857": 49, "858": 49, "859": 49, "860": [49, 103], "861": [49, 103], "862": 49, "863": 49, "864": 49, "865": 49, "866": 49, "867": [49, 77, 82], "868": 49, "869": 49, "870": 49, "871": 49, "872": 49, "873": 49, "874": 49, "875": 49, "876": 49, "877": 49, "878": 49, "879": 49, "880": 49, "881": 49, "882": 49, "883": 49, "884": 49, "885": 49, "886": 49, "887": 49, "888": 49, "889": 49, "890": 49, "891": 49, "892": 49, "893": 49, "894": 49, "895": 49, "896": 49, "897": 49, "898": 49, "899": 49, "900": 49, "901": 49, "902": 49, "903": 49, "904": 49, "905": 49, "906": 49, "907": 49, "908": 49, "909": 49, "910": 49, "911": 49, "912": 49, "913": 49, "914": 49, "915": 49, "916": 49, "917": 49, "918": 49, "919": 49, "920": 49, "921": 49, "922": 49, "923": 49, "924": 49, "925": 49, "926": 49, "927": 49, "928": 49, "929": 49, "930": 49, "931": 49, "932": 49, "933": 49, "934": 49, "935": 49, "936": 49, "937": 49, "938": 49, "939": 49, "940": 49, "941": 49, "942": 49, "943": 49, "944": 49, "945": 49, "946": 49, "947": 49, "948": 49, "949": 49, "950": 49, "951": 49, "952": 49, "953": [49, 110], "954": [49, 103], "955": 49, "956": 49, "957": [49, 69], "958": 49, "959": 49, "960": [49, 103], "961": 49, "962": 49, "963": 49, "964": [49, 103], "965": 49, "966": 49, "967": 49, "968": 49, "969": 49, "970": 49, "971": 49, "972": 49, "973": [49, 82], "974": 49, "975": 49, "976": 49, "977": 49, "978": 49, "979": 49, "980": [49, 121], "981": 49, "982": 49, "983": 49, "984": 49, "985": 49, "986": 49, "987": 49, "988": 49, "989": 49, "990": 49, "991": 49, "992": 49, "993": 49, "994": 49, "995": 49, "996": 49, "997": 49, "998": 49, "999": 49, "1000": [49, 77, 82, 113, 120, 130], "1001": 49, "1002": 49, "1003": 49, "1004": 49, "1005": 49, "1006": 49, "1007": 49, "1008": 49, "1009": 49, "1010": 49, "1011": [49, 82], "1012": 49, "1013": 49, "1014": 49, "1015": 49, "1016": 49, "1017": 49, "1018": 49, "1019": 49, "1020": [49, 57], "1021": 49, "1022": 49, "1023": [49, 64], "1024": 49, "1025": 49, "1026": 49, "1027": 49, "1028": 49, "1029": 49, "1030": 49, "1031": 49, "1032": [49, 57], "1033": 49, "1034": [49, 57], "1035": 49, "1036": 49, "1037": 49, "1038": 49, "1039": 49, "1040": 49, "1041": 49, "1042": 49, "1043": [49, 57], "1044": 49, "1045": 49, "1046": 49, "1047": 49, "1048": 49, "1049": 49, "1050": 49, "1051": 49, "1052": 49, "1053": 49, "1054": 49, "1055": 49, "1056": 49, "1057": 49, "1058": 49, "1059": 49, "1060": 49, "1061": [49, 57], "1062": 49, "1063": 49, "1064": 49, "1065": 49, "1066": 49, "1067": 49, "1068": 49, "1069": 49, "1070": 49, "1071": 49, "1072": 49, "1073": 49, "1074": 49, "1075": 49, "1076": [49, 57], "1077": 49, "1078": 49, "1079": 49, "1080": 49, "1081": 49, "1082": 49, "1083": 49, "1084": 49, "1085": 49, "1086": 49, "1087": 49, "1088": 49, "1089": 49, "1090": 49, "1091": 49, "1092": 49, "1093": 49, "1094": 49, "1095": 49, "1096": 49, "1097": 49, "1098": 49, "1099": 49, "1100": 49, "1101": 49, "1102": 49, "1103": 49, "1104": 49, "1105": 49, "1106": 49, "1107": 49, "1108": [49, 57], "1109": 49, "1110": 49, "1111": 49, "1112": 49, "1113": 49, "1114": 49, "1115": 49, "1116": 49, "1117": 49, "1118": 49, "1119": 49, "1120": [49, 64], "1121": 49, "1122": 49, "1123": 49, "1124": 49, "1125": [49, 50], "1126": [49, 53], "1127": 49, "1128": 49, "1129": 49, "1130": 49, "1131": 49, "1132": 49, "1133": 49, "1134": 49, "1135": 49, "1136": 49, "1137": 49, "1138": 49, "1139": 49, "1140": 49, "1141": 49, "1142": 49, "1143": 49, "1144": 49, "1145": 49, "1146": [49, 57], "1147": [49, 54], "1148": 49, "1149": 49, "1150": 49, "1151": 49, "1152": 49, "1153": 49, "1154": 49, "1155": 49, "1156": 49, "1157": 49, "1158": 49, "1159": 49, "1160": 49, "1161": 49, "1162": 49, "1163": 49, "1164": 49, "1165": 49, "1166": 49, "1167": 49, "1168": 49, "1169": 49, "1170": 49, "1171": 49, "1172": 49, "1173": 49, "1174": 49, "1175": 49, "1176": 49, "1177": 49, "1178": 49, "1179": 49, "1180": 49, "1181": 49, "1182": 49, "1183": [49, 92], "1184": 49, "1185": 49, "1186": 49, "1187": 49, "1188": 49, "1189": 49, "1190": 49, "1191": [49, 57], "1192": 49, "1193": 49, "1194": 49, "1195": 49, "1196": 49, "1197": 49, "1198": 49, "1199": 49, "1200": 49, "1201": 49, "1202": 49, "1203": 49, "1204": 49, "1205": 49, "1206": 49, "1207": 49, "1208": 49, "1209": 49, "1210": 49, "1211": 49, "1212": 49, "1213": 49, "1214": 49, "1215": 49, "1216": [49, 57], "1217": 49, "1218": 49, "1219": 49, "1220": 49, "1221": 49, "1222": 49, "1223": 49, "1224": 49, "1225": 49, "1226": 49, "1227": 49, "1228": 49, "1229": 49, "1230": [49, 82], "1231": 49, "1232": 49, "1233": 49, "1234": 49, "1235": 49, "1236": 49, "1237": 49, "1238": 49, "1239": 49, "1240": 49, "1241": 49, "1242": 49, "1243": 49, "1244": 49, "1245": [49, 51, 55], "1246": 49, "1247": 49, "1248": 49, "1249": 49, "1250": 49, "1251": 49, "1252": [49, 64], "1253": 49, "1254": 49, "1255": 49, "1256": 49, "1257": 49, "1258": [49, 53], "1259": 49, "1260": 49, "1261": 49, "1262": 49, "1263": 49, "1264": [49, 52], "1265": 49, "1266": [49, 64], "1267": 49, "1268": 49, "1269": 49, "1270": 49, "1271": 49, "1272": 49, "1273": 49, "1274": 49, "1275": 49, "1276": 49, "1277": 49, "1278": 49, "1279": 49, "1280": 49, "1281": 49, "1282": 49, "1283": 49, "1284": 49, "1285": 49, "1286": 49, "1287": 49, "1288": 49, "1289": 49, "1290": 49, "1291": 49, "1292": 49, "1293": 49, "1294": 49, "1295": 49, "1296": 49, "1297": 49, "1298": 49, "1299": 49, "1300": 49, "1301": 49, "1302": 49, "1303": 49, "1304": 49, "1305": 49, "1306": 49, "1307": 49, "1308": 49, "1309": 49, "1310": 49, "1311": 49, "1312": 49, "1313": [49, 57], "1314": [49, 74], "1315": [49, 74], "1316": [49, 74], "1317": [49, 74], "1318": [49, 74], "1319": 49, "1320": 49, "1321": 49, "1322": 49, "1323": 49, "1324": 49, "1325": 49, "1326": 49, "1327": 49, "1328": 49, "1329": 49, "1330": 49, "1331": 49, "1332": 49, "1333": 49, "1334": 49, "1335": 49, "1336": 49, "1337": 49, "1338": [49, 56, 60], "1339": [49, 58], "1340": 49, "1341": 49, "1342": 49, "1343": 49, "1344": 49, "1345": [49, 57], "1346": 49, "1347": 49, "1348": 49, "1349": 49, "1350": 49, "1351": 49, "1352": 49, "1353": 49, "1354": 49, "1355": [49, 110], "1356": 49, "1357": [49, 57], "1358": 49, "1359": [49, 59], "1360": 49, "1361": 49, "1362": 49, "1363": 49, "1364": [49, 57], "1365": [49, 61], "1366": 49, "1367": [49, 107], "1368": 49, "1369": 49, "1370": 49, "1371": 49, "1372": 49, "1373": 49, "1374": 49, "1375": 49, "1376": 49, "1377": 49, "1378": 49, "1379": 49, "1380": 49, "1381": 49, "1382": [49, 53], "1383": [49, 117], "1384": 49, "1385": 49, "1386": 49, "1387": 49, "1388": 49, "1389": 49, "1390": 49, "1391": 49, "1392": 49, "1393": 49, "1394": 49, "1395": 49, "1396": 49, "1397": 49, "1398": 49, "1399": 49, "1400": 49, "1401": 49, "1402": 49, "1403": 49, "1404": 49, "1405": 49, "1406": 49, "1407": 49, "1408": 49, "1409": 49, "1410": 49, "1411": 49, "1412": 49, "1413": 49, "1414": 49, "1415": 49, "1416": 49, "1417": 49, "1418": 49, "1419": 49, "1420": 49, "1421": 49, "1422": 49, "1423": 49, "1424": [49, 82], "1425": 49, "1426": 49, "1427": 49, "1428": 49, "1429": 49, "1430": 49, "1431": 49, "1432": 49, "1433": 49, "1434": 49, "1435": 49, "1436": 49, "1437": 49, "1438": 49, "1439": 49, "1440": 49, "1441": 49, "1442": 49, "1443": 49, "1444": 49, "1445": 49, "1446": 49, "1447": 49, "1448": 49, "1449": 49, "1450": 49, "1451": 49, "1452": 49, "1453": 49, "1454": 49, "1455": 49, "1456": 49, "1457": 49, "1458": 49, "1459": 49, "1460": 49, "1461": 49, "1462": 49, "1463": 49, "1464": 49, "1465": 49, "1466": 49, "1467": 49, "1468": 49, "1469": 49, "1470": 49, "1471": 49, "1472": 49, "1473": 49, "1474": 49, "1475": 49, "1476": 49, "1477": 49, "1478": 49, "1479": 49, "1480": 49, "1481": 49, "1482": 49, "1483": 49, "1484": 49, "1485": 49, "1486": 49, "1487": 49, "1488": 49, "1489": 49, "1490": 49, "1491": [49, 57], "1492": 49, "1493": 49, "1494": 49, "1495": 49, "1496": 49, "1497": 49, "1498": 49, "1499": 49, "1500": [49, 120], "1501": 49, "1502": 49, "1503": 49, "1504": 49, "1505": 49, "1506": 49, "1507": 49, "1508": 49, "1509": 49, "1510": 49, "1511": 49, "1512": 49, "1513": 49, "1514": 49, "1515": 49, "1516": 49, "1517": 49, "1518": 49, "1519": 49, "1520": 49, "1521": 49, "1522": 49, "1523": 49, "1524": 49, "1525": 49, "1526": 49, "1527": 49, "1528": 49, "1529": 49, "1530": 49, "1531": 49, "1532": [49, 52], "1533": 49, "1534": 49, "1535": 49, "1536": 49, "1537": 49, "1538": 49, "1539": 49, "1540": 49, "1541": 49, "1542": 49, "1543": 49, "1544": 49, "1545": 49, "1546": 49, "1547": 49, "1548": 49, "1549": 49, "1550": 49, "1551": 49, "1552": 49, "1553": 49, "1554": 49, "1555": 49, "1556": 49, "1557": 49, "1558": 49, "1559": 49, "1560": 49, "1561": [49, 73], "1562": 49, "1563": [49, 57], "1564": 49, "1565": [49, 59], "1566": 49, "1567": [49, 53], "1568": [49, 92], "1569": [49, 57], "1570": 49, "1571": 49, "1572": 49, "1573": 49, "1574": 49, "1575": 49, "1576": 49, "1577": 49, "1578": 49, "1579": 49, "1580": 49, "1581": 49, "1582": 49, "1583": 49, "1584": 49, "1585": 49, "1586": 49, "1587": 49, "1588": 49, "1589": 49, "1590": 49, "1591": 49, "1592": 49, "1593": 49, "1594": 49, "1595": 49, "1596": 49, "1597": 49, "1598": 49, "1599": 49, "1600": 49, "1601": 49, "1602": 49, "1603": 49, "1604": 49, "1605": 49, "1606": [49, 82], "1607": 49, "1608": 49, "1609": 49, "1610": 49, "1611": 49, "1612": 49, "1613": 49, "1614": 49, "1615": 49, "1616": 49, "1617": 49, "1618": 49, "1619": 49, "1620": 49, "1621": 49, "1622": 49, "1623": 49, "1624": 49, "1625": 49, "1626": 49, "1627": 49, "1628": 49, "1629": 49, "1630": 49, "1631": 49, "1632": 49, "1633": 49, "1634": 49, "1635": 49, "1636": 49, "1637": 49, "1638": 49, "1639": 49, "1640": 49, "1641": 49, "1642": 49, "1643": 49, "1644": 49, "1645": 49, "1646": 49, "1647": 49, "1648": 49, "1649": 49, "1650": 49, "1651": 49, "1652": 49, "1653": 49, "1654": 49, "1655": 49, "1656": 49, "1657": 49, "1658": 49, "1659": 49, "1660": 49, "1661": 49, "1662": 49, "1663": 49, "1664": 49, "1665": 49, "1666": 49, "1667": [49, 73], "1668": 49, "1669": 49, "1670": 49, "1671": 49, "1672": 49, "1673": 49, "1674": 49, "1675": 49, "1676": 49, "1677": 49, "1678": 49, "1679": 49, "1680": 49, "1681": 49, "1682": 49, "1683": 49, "1684": [49, 50], "1685": 49, "1686": 49, "1687": 49, "1688": 49, "1689": 49, "1690": 49, "1691": 49, "1692": 49, "1693": 49, "1694": 49, "1695": 49, "1696": 49, "1697": 49, "1698": 49, "1699": 49, "1700": 49, "1701": 49, "1702": 49, "1703": 49, "1704": 49, "1705": 49, "1706": [49, 106], "1707": 49, "1708": 49, "1709": 49, "1710": 49, "1711": 49, "1712": 49, "1713": 49, "1714": 49, "1715": 49, "1716": 49, "1717": 49, "1718": 49, "1719": [49, 52, 62], "1720": 49, "1721": 49, "1722": 49, "1723": 49, "1724": 49, "1725": 49, "1726": 49, "1727": [49, 52, 62], "1728": 49, "1729": [49, 54], "1730": 49, "1731": [49, 73], "1732": 49, "1733": 49, "1734": [49, 51, 53, 55], "1735": [49, 52], "1736": 49, "1737": 49, "1738": 49, "1739": 49, "1740": [49, 73], "1741": 49, "1742": [49, 50, 51, 54, 55, 73], "1743": 49, "1744": [49, 59], "1745": 49, "1746": 49, "1747": 49, "1748": 49, "1749": 49, "1750": [49, 106], "1751": 49, "1752": 49, "1753": 49, "1754": 49, "1755": 49, "1756": 49, "1757": 49, "1758": 49, "1759": 49, "1760": [49, 61, 73], "1761": 49, "1762": 49, "1763": 49, "1764": 49, "1765": 49, "1766": 49, "1767": 49, "1768": [49, 52], "1769": 49, "1770": 49, "1771": 49, "1772": 49, "1773": [49, 53], "1774": 49, "1775": 49, "1776": 49, "1777": [49, 53], "1778": 49, "1779": 49, "1780": 49, "1781": 49, "1782": 49, "1783": 49, "1784": 49, "1785": 49, "1786": 49, "1787": 49, "1788": 49, "1789": 49, "1790": 49, "1791": 49, "1792": 49, "1793": 49, "1794": 49, "1795": 49, "1796": 49, "1797": 49, "1798": 49, "1799": 49, "1800": 49, "1801": [49, 57, 110], "1802": 49, "1803": 49, "1804": [49, 102], "1805": 49, "1806": 49, "1807": 49, "1808": 49, "1809": 49, "1810": 49, "1811": 49, "1812": 49, "1813": 49, "1814": 49, "1815": 49, "1816": [49, 73], "1817": 49, "1818": 49, "1819": 49, "1820": 49, "1821": 49, "1822": 49, "1823": 49, "1824": 49, "1825": 49, "1826": 49, "1827": 49, "1828": 49, "1829": 49, "1830": 49, "1831": 49, "1832": 49, "1833": 49, "1834": 49, "1835": 49, "1836": 49, "1837": 49, "1838": 49, "1839": 49, "1840": 49, "1841": 49, "1842": 49, "1843": 49, "1844": 49, "1845": 49, "1846": 49, "1847": 49, "1848": 49, "1849": 49, "1850": 49, "1851": 49, "1852": 49, "1853": 49, "1854": 49, "1855": 49, "1856": 49, "1857": 49, "1858": 49, "1859": 49, "1860": 49, "1861": 49, "1862": 49, "1863": 49, "1864": 49, "1865": [49, 102], "1866": 49, "1867": 49, "1868": 49, "1869": 49, "1870": 49, "1871": 49, "1872": 49, "1873": 49, "1874": 49, "1875": 49, "1876": 49, "1877": 49, "1878": 49, "1879": 49, "1880": 49, "1881": 49, "1882": 49, "1883": 49, "1884": 49, "1885": 49, "1886": 49, "1887": 49, "1888": 49, "1889": 49, "1890": 49, "1891": [49, 72], "1892": [49, 72], "1893": 49, "1894": 49, "1895": 49, "1896": 49, "1897": 49, "1898": 49, "1899": 49, "1900": 49, "1901": 49, "1902": 49, "1903": 49, "1904": 49, "1905": 49, "1906": 49, "1907": 49, "1908": 49, "1909": 49, "1910": 49, "1911": 49, "1912": 49, "1913": 49, "1914": 49, "1915": [49, 72], "1916": 49, "1917": 49, "1918": 49, "1919": 49, "1920": 49, "1921": [49, 72], "1922": 49, "1923": [49, 72], "1924": 49, "1925": 49, "1926": 49, "1927": 49, "1928": 49, "1929": 49, "1930": [49, 72], "1931": 49, "1932": 49, "1933": 49, "1934": [49, 53, 72], "1935": 49, "1936": 49, "1937": 49, "1938": 49, "1939": 49, "1940": 49, "1941": 49, "1942": 49, "1943": [49, 59], "1944": [49, 72], "1945": [49, 53], "1946": 49, "1947": 49, "1948": 49, "1949": 49, "1950": 49, "1951": 49, "1952": 49, "1953": 49, "1954": 49, "1955": [49, 53], "1956": 49, "1957": 49, "1958": 49, "1959": 49, "1960": 49, "1961": 49, "1962": [49, 72], "1963": 49, "1964": 49, "1965": [49, 72], "1966": 49, "1967": 49, "1968": 49, "1969": [49, 62, 73], "1970": 49, "1971": 49, "1972": [49, 102], "1973": 49, "1974": 49, "1975": 49, "1976": 49, "1977": [49, 53], "1978": [49, 73, 106], "1979": 49, "1980": [49, 62, 73], "1981": [49, 62, 73, 120], "1982": 49, "1983": 49, "1984": 49, "1985": [49, 62, 73], "1986": 49, "1987": [49, 50, 62, 73], "1988": 49, "1989": 49, "1990": 49, "1991": 49, "1992": [49, 73], "1993": [49, 62, 73], "1994": [49, 61, 73, 103, 110], "1995": 49, "1996": [49, 53, 73], "1997": 49, "1998": [49, 57, 58, 61, 73], "2000": [49, 103, 120], "2001": [49, 73], "2002": 49, "2003": 49, "2004": [49, 61, 73, 126, 129], "2005": [49, 103], "2006": 49, "2007": [49, 122, 127, 129], "2008": [49, 130], "2009": 49, "2010": [49, 61, 73, 130], "2011": [49, 130], "2012": [49, 130], "2013": [49, 130], "2014": 49, "2015": [49, 62, 73, 130], "2016": 49, "2017": [49, 61, 62, 73, 130], "2018": 49, "2020": 49, "2021": 49, "2022": 49, "2024": 49, "2025": 49, "2026": [49, 59], "2027": 49, "2028": 49, "2029": 49, "2030": 49, "2031": 49, "2032": 49, "2033": 49, "2034": 49, "2035": 49, "2036": 49, "2037": 49, "2038": 49, "2039": 49, "2040": 49, "2041": 49, "2042": [49, 56, 60], "2043": 49, "2044": 49, "2045": 49, "2046": 49, "2047": 49, "2048": 49, "2049": 49, "2050": 49, "2051": 49, "2052": 49, "2053": 49, "2054": 49, "2055": 49, "2056": 49, "2057": 49, "2058": [49, 53, 58], "2059": 49, "2060": 49, "2061": 49, "2062": 49, "2063": 49, "2064": 49, "2065": 49, "2066": [49, 52, 62], "2067": 49, "2068": 49, "2069": 49, "2070": 49, "2071": 49, "2072": 49, "2073": 49, "2074": 49, "2075": 49, "2076": 49, "2077": 49, "2078": [49, 52, 102], "2079": 49, "2080": 49, "2081": 49, "2082": 49, "2083": 49, "2084": 49, "2085": 49, "2086": 49, "2087": 49, "2088": 49, "2089": 49, "2090": [49, 73], "2091": 49, "2092": 49, "2093": [49, 54], "2094": 49, "2095": [49, 50, 51, 54, 55, 73], "2096": 49, "2097": 49, "2098": 49, "2099": 49, "2100": 49, "2101": 49, "2102": 49, "2103": [49, 54], "2104": 49, "2105": 49, "2106": 49, "2107": 49, "2108": 49, "2109": [49, 82], "2110": 49, "2111": 49, "2112": [49, 72], "2113": 49, "2114": 49, "2115": 49, "2116": 49, "2117": 49, "2118": 49, "2119": 49, "2120": 49, "2121": 49, "2122": 49, "2123": 49, "2124": 49, "2125": 49, "2126": 49, "2127": 49, "2128": 49, "2129": 49, "2130": 49, "2131": 49, "2132": 49, "2133": 49, "2134": 49, "2135": 49, "2136": 49, "2137": 49, "2138": 49, "2139": 49, "2140": 49, "2141": 49, "2142": 49, "2143": 49, "2144": 49, "2145": 49, "2146": 49, "2147": 49, "2148": 49, "2149": 49, "2150": 49, "2151": 49, "2152": 49, "2153": 49, "2154": 49, "2155": 49, "2156": 49, "2157": [49, 72], "2158": 49, "2159": 49, "2160": 49, "2161": 49, "2162": 49, "2163": 49, "2164": 49, "2165": 49, "2166": 49, "2167": 49, "2168": 49, "2169": 49, "2170": 49, "2171": 49, "2172": 49, "2173": 49, "2174": 49, "2175": 49, "2176": 49, "2177": 49, "2178": [49, 52], "2179": 49, "2180": 49, "2181": 49, "2182": 49, "2183": 49, "2184": 49, "2185": 49, "2186": 49, "2187": 49, "2188": 49, "2189": 49, "2190": 49, "2191": 49, "2192": 49, "2193": 49, "2194": 49, "2195": 49, "2196": 49, "2197": 49, "2198": 49, "2199": 49, "2200": 49, "2201": 49, "2202": 49, "2203": 49, "2204": 49, "2205": 49, "2206": 49, "2207": 49, "2208": 49, "2209": 49, "2210": 49, "2211": [49, 51, 55], "2212": 49, "2213": 49, "2214": 49, "2215": 49, "2216": 49, "2217": 49, "2218": 49, "2219": 49, "2220": 49, "2221": 49, "2222": 49, "2223": 49, "2224": 49, "2225": 49, "2226": 49, "2227": 49, "2228": 49, "2229": 49, "2230": 49, "2231": 49, "2232": 49, "2233": 49, "2234": 49, "2235": 49, "2236": 49, "2237": 49, "2238": 49, "2239": 49, "2240": 49, "2241": 49, "2242": 49, "2243": 49, "2244": 49, "2245": 49, "2246": 49, "2247": 49, "2248": 49, "2249": 49, "2250": 49, "2251": 49, "2252": 49, "2253": [49, 56, 60], "2254": 49, "2255": 49, "2256": 49, "2257": 49, "2258": 49, "2259": 49, "2260": 49, "2261": 49, "2262": 49, "2263": 49, "2264": 49, "2265": [49, 58, 61], "2266": 49, "2267": 49, "2268": 49, "2269": 49, "2270": 49, "2271": 49, "2272": 49, "2273": 49, "2274": 49, "2275": 49, "2276": 49, "2277": 49, "2278": 49, "2279": 49, "2280": 49, "2281": 49, "2282": 49, "2283": 49, "2284": 49, "2285": 49, "2286": 49, "2287": 49, "2288": [49, 52], "2289": 49, "2290": 49, "2291": 49, "2292": 49, "2293": 49, "2294": 49, "2295": [49, 51, 55], "2296": [49, 52, 62], "2297": 49, "2298": 49, "2299": 49, "2300": 49, "2301": 49, "2302": 49, "2303": 49, "2304": 49, "2305": 49, "2306": 49, "2307": 49, "2308": 49, "2309": 49, "2310": 49, "2311": 49, "2312": 49, "2313": 49, "2314": 49, "2315": 49, "2316": [49, 73], "2317": 49, "2318": 49, "2319": 49, "2320": 49, "2321": 49, "2322": 49, "2323": 49, "2324": 49, "2325": 49, "2326": 49, "2327": 49, "2328": 49, "2329": 49, "2330": 49, "2331": 49, "2332": 49, "2333": 49, "2334": 49, "2335": 49, "2336": 49, "2337": 49, "2338": 49, "2339": 49, "2340": 49, "2341": 49, "2342": 49, "2343": 49, "2344": 49, "2345": 49, "2346": 49, "2347": [49, 57], "2348": 49, "2349": 49, "2350": 49, "2351": 49, "2352": 49, "2353": 49, "2354": 49, "2355": 49, "2356": 49, "2357": 49, "2358": 49, "2359": 49, "2360": 49, "2361": 49, "2362": 49, "2363": 49, "2364": 49, "2365": 49, "2366": 49, "2367": 49, "2368": 49, "2369": 49, "2370": 49, "2371": 49, "2372": 49, "2373": 49, "2374": 49, "2375": 49, "2376": 49, "2377": 49, "2378": 49, "2379": 49, "2380": 49, "2381": 49, "2382": 49, "2383": 49, "2384": 49, "2385": 49, "2386": 49, "2387": 49, "2388": 49, "2389": 49, "2390": 49, "2391": 49, "2392": 49, "2393": 49, "2394": 49, "2395": 49, "2396": 49, "2397": 49, "2398": [49, 52], "2399": 49, "2400": 49, "2401": 49, "2402": 49, "2403": 49, "2404": 49, "2405": 49, "2406": [49, 50, 51, 54, 55, 73], "2407": 49, "2408": 49, "2409": 49, "2410": 49, "2411": 49, "2412": 49, "2413": 49, "2414": 49, "2415": [49, 53], "2416": 49, "2417": 49, "2418": 49, "2419": 49, "2420": 49, "2421": 49, "2422": [49, 59], "2423": [49, 52, 62], "2424": [49, 106], "2425": 49, "2426": 49, "2427": 49, "2428": [49, 119], "2429": 49, "2430": 49, "2431": 49, "2432": 49, "2433": 49, "2434": 49, "2435": 49, "2436": 49, "2437": 49, "2438": 49, "2439": [49, 119], "2440": 49, "2441": 49, "2442": 49, "2443": 49, "2444": 49, "2445": 49, "2446": 49, "2447": 49, "2448": 49, "2449": 49, "2450": 49, "2451": 49, "2452": 49, "2453": 49, "2454": 49, "2455": 49, "2456": 49, "2457": 49, "2458": 49, "2459": 49, "2460": 49, "2461": 49, "2462": 49, "2463": 49, "2464": 49, "2465": 49, "2466": 49, "2467": 49, "2468": 49, "2469": 49, "2470": [49, 54], "2471": 49, "2473": 49, "2474": 49, "2476": 49, "2477": 49, "2480": 49, "2481": 49, "2482": 49, "2483": 49, "2484": 49, "2485": 49, "2486": 49, "2487": 49, "2488": 49, "2489": [49, 106], "2490": 49, "2491": 49, "2492": 49, "2493": 49, "2494": [49, 119], "2495": 49, "2496": 49, "2497": 49, "2498": 49, "2499": [49, 52], "2500": 49, "2501": 49, "2502": [49, 51, 55], "2503": 49, "2504": 49, "2505": 49, "2506": 49, "2507": [49, 82], "2508": 49, "2509": 49, "2510": 49, "2511": 49, "2512": 49, "2513": 49, "2514": 49, "2515": 49, "2516": 49, "2517": 49, "2518": 49, "2519": 49, "2520": 49, "2521": 49, "2522": 49, "2523": 49, "2524": 49, "2525": 49, "2526": 49, "2527": 49, "2528": [49, 59], "2529": 49, "2530": [49, 59], "2531": 49, "2532": [49, 67, 76], "2533": 49, "2534": [49, 73], "2535": 49, "2536": 49, "2537": 49, "2538": 49, "2539": 49, "2540": 49, "2541": 49, "2542": 49, "2543": 49, "2544": 49, "2545": 49, "2546": 49, "2547": 49, "2548": [49, 59], "2549": 49, "2550": 49, "2551": 49, "2552": [49, 119], "2553": 49, "2554": 49, "2555": 49, "2556": 49, "2557": 49, "2558": 49, "2559": 49, "2560": 49, "2561": 49, "2562": 49, "2563": 49, "2564": 49, "2565": [49, 56], "2566": [49, 60], "2567": 49, "2568": 49, "2569": 49, "2570": 49, "2571": 49, "2572": 49, "2573": 49, "2574": 49, "2575": 49, "2576": 49, "2577": 49, "2578": 49, "2579": 49, "2580": 49, "2581": [49, 119], "2582": 49, "2583": [49, 53], "2584": 49, "2585": 49, "2586": 49, "2587": 49, "2588": 49, "2589": 49, "2590": [49, 59], "2591": 49, "2592": 49, "2593": 49, "2594": 49, "2595": 49, "2596": 49, "2597": 49, "2598": 49, "2599": 49, "2600": 49, "2601": [49, 59], "2602": 49, "2603": 49, "2604": 49, "2605": 49, "2606": 49, "2607": 49, "2608": 49, "2609": 49, "2610": 49, "2611": 49, "2612": 49, "2613": [49, 59], "2614": 49, "2615": [49, 59], "2616": 49, "2617": 49, "2618": 49, "2619": [49, 59], "2620": 49, "2621": 49, "2622": 49, "2623": 49, "2624": 49, "2625": 49, "2626": 49, "2627": 49, "2628": 49, "2629": [49, 58, 59], "2630": 49, "2631": 49, "2632": 49, "2633": 49, "2634": 49, "2635": 49, "2636": 49, "2637": 49, "2638": 49, "2639": 49, "2640": 49, "2641": 49, "2642": 49, "2643": 49, "2644": 49, "2645": 49, "2646": 49, "2647": 49, "2648": 49, "2649": 49, "2650": 49, "2651": 49, "2652": 49, "2653": 49, "2654": 49, "2655": 49, "2656": 49, "2657": [49, 59], "2658": 49, "2659": 49, "2660": [49, 59], "2661": 49, "2662": 49, "2663": 49, "2664": 49, "2665": 49, "2666": 49, "2667": 49, "2668": 49, "2669": 49, "2670": 49, "2671": [49, 59], "2672": 49, "2673": 49, "2674": 49, "2675": 49, "2676": 49, "2677": [49, 59], "2678": 49, "2679": 49, "2680": 49, "2681": 49, "2682": 49, "2683": 49, "2684": 49, "2685": 49, "2686": 49, "2687": 49, "2688": 49, "2689": 49, "2690": [49, 53], "2691": 49, "2692": 49, "2693": 49, "2694": 49, "2695": 49, "2696": 49, "2697": 49, "2698": 49, "2699": 49, "2700": 49, "2701": [49, 59], "2702": [49, 59], "2703": 49, "2704": 49, "2705": 49, "2706": 49, "2707": 49, "2708": [49, 59], "2709": 49, "2710": 49, "2711": 49, "2712": 49, "2713": 49, "2714": 49, "2715": 49, "2716": 49, "2717": 49, "2718": [49, 59], "2719": 49, "2720": 49, "2721": 49, "2722": 49, "2723": 49, "2724": 49, "2725": 49, "2726": 49, "2727": [49, 73], "2728": 49, "2729": 49, "2730": 49, "2731": 49, "2732": 49, "2733": [49, 56, 58, 60], "2734": 49, "2735": [49, 59], "2736": 49, "2737": 49, "2738": 49, "2739": 49, "2740": 49, "2741": 49, "2742": 49, "2743": 49, "2744": 49, "2745": 49, "2746": 49, "2747": 49, "2748": 49, "2749": 49, "2750": 49, "2751": 49, "2752": 49, "2753": 49, "2754": 49, "2755": 49, "2756": 49, "2757": 49, "2758": 49, "2759": 49, "2760": 49, "2761": 49, "2762": 49, "2763": 49, "2764": 49, "2765": 49, "2766": 49, "2767": 49, "2768": 49, "2769": 49, "2770": 49, "2771": 49, "2772": 49, "2773": 49, "2774": 49, "2775": 49, "2776": 49, "2777": 49, "2778": 49, "2779": 49, "2780": 49, "2781": 49, "2782": 49, "2783": 49, "2784": 49, "2785": 49, "2786": 49, "2787": 49, "2788": 49, "2789": 49, "2790": 49, "2791": 49, "2792": 49, "2793": 49, "2794": 49, "2795": 49, "2796": 49, "2797": 49, "2798": [49, 57], "2799": [49, 69], "2800": [49, 69], "2801": 49, "2802": 49, "2803": 49, "2804": 49, "2805": 49, "2806": 49, "2807": 49, "2808": 49, "2809": 49, "2810": 49, "2811": 49, "2812": 49, "2813": 49, "00000": [49, 54, 57, 58, 59, 65, 72, 73, 92, 102], "00001": 49, "28090": 49, "28101": 49, "28110": 49, "28120": 49, "28130": 49, "establish": [49, 111, 130], "move": 49, "cursor": 49, "hover": [49, 90], "contemporan": [49, 54], "markov": [50, 53, 62, 73, 108, 123, 130, 131], "barri": [50, 62, 73], "hartigan": [50, 62, 73], "bh": [50, 62, 73], "nfp": [50, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 73, 121], "dlc": [50, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62], "unique_q": [50, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62], "6941": 50, "6028": 50, "keylnlnfpdlcunique_q": [50, 52, 53, 55, 60, 61, 62], "6028132truetru": 50, "stand": [50, 113], "largest": [50, 53], "lf": [50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 73, 103, 106, 110, 112, 115, 116, 117, 119, 120, 121], "motif2": 50, "psub": 50, "galago": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 71, 72, 73, 103], "8750": [50, 107, 112, 116], "0649": [50, 57], "0409": [50, 106], "0192": [50, 56, 57, 58, 59, 60], "8058": 50, "0404": [50, 59, 106], "0413": 50, "0255": 50, "8879": 50, "0611": 50, "0207": [50, 53], "0194": 50, "7915": 50, "howlermon": [50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 67, 70, 71, 72, 73, 76, 81, 100, 101, 102, 103, 107, 110, 112, 114, 116, 117], "9688": 50, "0241": 50, "0041": 50, "0030": 50, "0374": 50, "9407": 50, "0069": [50, 56, 57, 58, 59, 60], "0150": 50, "0038": [50, 61], "9591": 50, "0333": 50, "0031": 50, "0068": 50, "0406": 50, "9494": 50, "rhesu": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 71, 72, 73, 103], "9879": 50, "0078": [50, 51, 52, 55, 56, 57, 58, 59, 60], "0015": [50, 56, 57, 58, 59, 60], "0028": [50, 51, 52, 54, 55, 62, 73], "0187": [50, 56, 57, 58, 59, 60], "9710": 50, "0040": [50, 56, 57, 58, 59, 60, 72, 119], "0063": [50, 61], "0019": 50, "0009": [50, 56, 57, 58, 59, 60], "9850": 50, "0122": [50, 61], "0017": 50, "0295": 50, "9620": 50, "orangutan": [50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 71, 72, 73, 89, 103], "9911": 50, "0059": 50, "0082": [50, 56, 57, 58, 59, 60], "9898": 50, "0020": 50, "9952": 50, "0073": 50, "9910": 50, "gorilla": [50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 71, 72, 73, 103, 114], "9980": 50, "0010": 50, "9962": 50, "0029": 50, "0033": [50, 51, 52, 55, 61], "9967": 50, "9941": 50, "9918": 50, "9971": 50, "0083": [50, 61], "9900": 50, "chimpanze": [50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 71, 72, 73, 103], "9956": 50, "0044": 50, "9959": 50, "9990": 50, "9946": 50, "0054": [50, 72], "9868": 50, "0025": [50, 51, 52, 54, 55, 62, 72, 73], "0034": [50, 52, 54, 62, 73], "0121": [50, 51, 52, 54, 55], "9797": 50, "9916": 50, "0065": [50, 61], "0057": 50, "9926": 50, "9913": 50, "0043": [50, 61], "0045": 50, "0023": [50, 56, 57, 58, 59, 60, 72], "9933": 50, "0018": [50, 56, 57, 58, 59, 60, 72], "9920": 50, "0053": [50, 72], "0011": [50, 56, 57, 58, 59, 60], "9948": 50, "3757": [50, 51, 54, 55, 73], "edgemotifmotif2psub": 50, "galagott0": 50, "galagotc0": 50, "galagota0": 50, "galagotg0": 50, "galagoct0": 50, "3ag0": 50, "3gt0": 50, "3gc0": 50, "3ga0": 50, "3gg0": 50, "acgt": [50, 51, 52, 53, 54, 55, 62, 73, 107, 110, 116, 117, 119, 120], "37570": [50, 51, 54, 55, 73], "17420": [50, 51, 54, 55, 73], "20950": [50, 51, 54, 55, 73], "fig": [50, 54, 60, 91, 94, 95, 96, 97, 98], "scale_bar": [50, 60, 95, 97, 98], "But": [50, 69, 83, 84, 105, 111], "continu": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 73, 82, 103, 106], "demonstr": [50, 51, 52, 53, 67, 73, 76, 79, 82, 84, 88, 100, 103, 109, 117], "tabul": [50, 51], "2x": 50, "behaviour": [51, 53, 73, 103], "homogen": 51, "rate": [51, 108, 112, 130], "0450": [51, 52, 54, 55], "0215": [51, 52, 55, 62], "0061": [51, 52, 54, 55, 73, 119], "0077": [51, 52, 54, 55, 61, 62, 73, 92], "edgeparentlength": [51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 73, 103, 106, 107, 110, 116, 119, 120], "galagoroot0": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 73, 103], "howlermonroot0": [51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 73, 103], "rhesusedg": [51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 73, 103], "orangutanedg": [51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 73, 103], "gorillaedg": [51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 73, 103], "humanedg": [51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 73, 103, 106, 107, 110, 116, 117], "chimpanzeeedg": [51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 73, 103], "0edg": [51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 73, 103, 106, 107, 110, 116, 117], "1edg": [51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 73, 103], "2edg": [51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 73, 103], "3root0": [51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 73, 103], "en": [51, 53, 55, 97, 111], "kaehler": [51, 53, 60, 61, 62, 73, 130], "stationari": [51, 62, 63, 73, 97, 107, 123, 130, 131], "dure": [51, 64, 71, 73, 83, 84], "optimis": [51, 61, 62, 72, 103, 106, 107, 110, 112, 114, 115, 116, 117, 119, 121], "8699": [51, 55], "6639": [51, 55], "9110": [51, 55], "5906": [51, 55], "0239": [51, 53, 55, 61], "6296": [51, 55], "4167": [51, 55, 73], "ca": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 73, 82, 103, 110], "ga": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 68, 73, 103, 110], "tc": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 68, 73, 82, 103, 104, 110, 120], "tg": [51, 52, 53, 55, 56, 57, 58, 59, 60, 67, 68], "ag": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 67, 68, 70, 99], "cg": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 68], "tt": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 68, 70, 99, 105, 113, 120], "86993": [51, 55], "66390": [51, 55], "91101": [51, 55], "59062": [51, 55], "12456": [51, 55], "02398": [51, 55], "22111": [51, 55], "22950": [51, 55], "62961": [51, 55], "gtr": [52, 61, 73, 103], "alt": [52, 56, 57, 58, 59, 73, 107, 112], "hyp": 52, "degre": [52, 73, 110, 116, 117], "freedom": [52, 73, 110, 116, 117], "lr": [52, 56, 57, 58, 59, 73, 103, 107, 110, 116, 121], "df": [52, 56, 57, 58, 59, 73, 77, 82, 103, 110, 116, 121], "pvalu": [52, 56, 57, 58, 59, 82], "3813": [52, 102], "6992": [52, 62, 73], "5741": [52, 62], "6987": [52, 55], "8834": 52, "lrdfpvalu": [52, 56, 57, 58, 59], "381360": 52, "hypothesiskeylnlnfpdlcunique_q": [52, 56, 57, 58, 59], "574119truetru": [52, 62], "883425truetru": 52, "05": [52, 82, 92, 113, 114], "381277653557845": 52, "15324334546495605": 52, "9473": [52, 62], "3389": [52, 62], "9666": [52, 62], "0448": [52, 62], "0060": [52, 62], "0119": [52, 62], "3792": [52, 62], "global": [52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 73, 84, 103, 107, 110, 116, 117, 119, 121], "22965": [52, 62], "24780": [52, 62], "94732": [52, 62], "33895": [52, 62], "37920": [52, 62], "17190": [52, 62], "20660": [52, 62], "8700": 52, "6670": 52, "9111": 52, "5925": 52, "0324": [52, 106], "6294": 52, "4136": 52, "3756": 52, "87003": 52, "66700": 52, "91111": 52, "59252": 52, "12646": 52, "03248": 52, "21781": 52, "22880": 52, "62941": 52, "37560": 52, "17680": 52, "20780": [52, 102], "flexibl": [52, 84, 113], "downstream": 52, "sqlitedb": [52, 111], "myresult": 52, "select_seq": [53, 64], "henc": 53, "sm": [53, 55, 73, 106, 110, 112, 116, 117, 120], "unique_tre": [53, 55], "sm_arg": [53, 55], "lf_arg": [53, 55], "time_het": [53, 54, 55], "param_rul": [53, 55], "opt_arg": [53, 55], "split_codon": [53, 55], "interfac": [53, 76, 84, 87, 111, 114, 116, 126, 129, 130], "descript": [53, 60, 61, 62, 73, 76, 82], "quantiti": 53, "why": [53, 111], "5964": 53, "258314truetru": 53, "0635": 53, "0209": 53, "7944": [53, 59], "3266": 53, "6766": 53, "0612": 53, "8312": 53, "5001": 53, "5616": 53, "0213": [53, 56, 57, 58, 59, 60], "3793": 53, "06353": 53, "19451": 53, "02091": 53, "79442": 53, "32665": 53, "67669": 53, "06121": 53, "11260": 53, "83121": 53, "humanroot0": [53, 119], "rhesusroot0": 53, "37930": 53, "17340": 53, "20580": 53, "258307147838": 53, "Of": [53, 63, 107, 123], "signific": [53, 63, 103, 107], "2814": 53, "tgtggcacaaa": [53, 67, 73, 76, 85], "tgtggcaaaaa": 53, "length_a": 53, "9292254577518095": 53, "5867": 53, "4461": 53, "7571": 53, "4200": 53, "446142truetru": 53, "757114": 53, "269014": 53, "420014": 53, "achiev": [53, 67, 73, 98], "7529": 53, "4660": 53, "4151": 53, "3739": 53, "4118": 53, "8499": 53, "0220": [53, 61], "7348": 53, "9255": 53, "2915": 53, "0316": 53, "3443": 53, "3607": 53, "75293": 53, "46602": 53, "41512": 53, "37393": 53, "411816": 53, "125816": 53, "84992": 53, "02201": 53, "AT": [53, 54, 67, 68, 113], "92555": 53, "34430": 53, "13820": 53, "15670": 53, "term": [54, 61, 73, 98, 103], "highlight": 54, "style_edg": [54, 95, 97], "tip2": [54, 58, 59, 95, 97], "outgroup": 54, "red": [54, 69], "ingroup": 54, "interest": [54, 57, 58, 66, 67, 73, 84, 107, 113, 117], "member": [54, 67], "outsid": [54, 69, 105], "suffic": 54, "outcom": 54, "black": [54, 126], "6982": 54, "2973": 54, "0062": [54, 56, 57, 58, 59, 60], "7828": 54, "0384": [54, 119], "7244": 54, "0214": [54, 61], "5002": 54, "9011": 54, "3244": 54, "3343": 54, "0170": [54, 61], "7649": 54, "4580": 54, "5747": 54, "3531": 54, "9555": 54, "6219": 54, "3394": 54, "9906": 54, "edgeparentlengtha": 54, "17291": 54, "00623": 54, "78281": 54, "03841": 54, "72442": 54, "32446": 54, "04501": 54, "02141": 54, "00770": [54, 61, 92], "21033": 54, "50020": 54, "20930": 54, "90111": 54, "35314": 54, "00250": 54, "00610": 54, "00280": 54, "00340": 54, "01211": 54, "00761": 54, "01701": 54, "24700": 54, "76491": 54, "45803": 54, "62191": 54, "11470": 54, "33942": 54, "9604": 55, "960422truetru": 55, "emploi": [56, 58, 63, 107], "hypothes": [56, 63, 107], "gene": [56, 69, 105, 111, 118, 131], "\u03c9": 56, "nonsynonym": [56, 73, 103, 117], "synonym": [56, 73, 103, 117], "idea": [56, 58, 99, 111], "omega_eq_1": 56, "gnc": [56, 57, 58, 59, 61, 63, 73, 131], "5034": 56, "0338": 56, "6715": 56, "5250": 56, "6713": [56, 58, 60], "503410": 56, "525022truetru": 56, "273323truetru": [56, 58, 60], "8614": [56, 60], "5373": [56, 60, 121], "9792": [56, 60], "6667": [56, 60], "9195": 56, "8014": [56, 60], "2911": [56, 60], "0723": [56, 60], "8204": [56, 60], "5232": [56, 60], "0640": [56, 58, 60], "0233": [56, 57, 58, 60, 61], "0075": [56, 57, 58, 59, 60, 61], "0182": [56, 57, 58, 59, 60, 61], "0085": [56, 57, 58, 59, 60, 61], "0100": [56, 58, 60], "0366": [56, 58, 60], "0238": [56, 57, 58, 59, 60, 61], "aaa": [56, 57, 58, 59, 60, 61, 67, 68, 69, 73, 85, 103, 104, 105], "aac": [56, 57, 58, 59, 60, 61, 67, 68, 69, 73, 76, 85, 103], "aag": [56, 57, 58, 59, 60, 61, 67, 68, 73, 85, 103], "aat": [56, 57, 58, 59, 60, 61, 67, 68, 73, 85, 103], "aca": [56, 57, 58, 59, 60, 61, 67, 68, 73, 85, 103], "acc": [56, 57, 58, 59, 60, 61, 67, 68, 73, 85, 103, 120], "acg": [56, 57, 58, 59, 60, 61, 67, 68, 73, 79, 85, 103], "0556": [56, 57, 58, 59, 60], "0235": [56, 57, 58, 59, 60], "0344": [56, 57, 58, 59, 60], "0228": [56, 57, 58, 59, 60, 61], "0046": [56, 57, 58, 59, 60], "0008": [56, 57, 58, 59, 60], "0289": [56, 57, 58, 59, 60], "aga": [56, 57, 58, 59, 60, 61, 67, 68, 73, 85, 103], "agc": [56, 57, 58, 59, 60, 61, 67, 68, 73, 85, 103], "agg": [56, 57, 58, 59, 60, 61, 67, 68, 73, 79, 85, 103], "agt": [56, 57, 58, 59, 60, 61, 67, 68, 73, 85, 103], "ata": [56, 57, 58, 59, 60, 61, 67, 68, 73, 85, 103], "atc": [56, 57, 58, 59, 60, 61, 67, 68, 73, 85, 103], "att": [56, 57, 58, 59, 60, 61, 67, 68, 73, 85, 103], "0231": [56, 57, 58, 59, 60], "0286": [56, 57, 58, 59, 60], "0140": [56, 57, 58, 59, 60, 72], "0381": [56, 57, 58, 59, 60], "0186": [56, 57, 58, 59, 60], "0070": [56, 57, 58, 59, 60], "0128": [56, 57, 58, 59, 60], "caa": [56, 57, 58, 59, 60, 61, 67, 68, 73, 85, 103], "cac": [56, 57, 58, 59, 60, 61, 67, 68, 73, 74, 85, 103], "cag": [56, 57, 58, 59, 60, 61, 67, 68, 73, 85, 103], "cat": [56, 57, 58, 59, 60, 61, 67, 68, 73, 85, 90, 103], "cca": [56, 57, 58, 59, 60, 61, 67, 68, 70, 73, 85, 99, 103], "ccc": [56, 57, 58, 59, 60, 61, 67, 68, 69, 73, 85, 103, 105, 118], "ccg": [56, 57, 58, 59, 60, 61, 67, 68, 73, 85, 103], "cct": [56, 57, 58, 59, 60, 61, 67, 68, 73, 85, 103, 120], "0196": [56, 57, 58, 59, 60], "0052": [56, 57, 58, 59, 60], "0221": [56, 57, 58, 59, 60], "0195": [56, 57, 58, 59, 60], "0006": [56, 57, 58, 59, 60], "0263": [56, 57, 58, 59, 60, 61], "cga": [56, 57, 58, 59, 60, 61, 67, 68, 73, 85, 103], "cgc": [56, 57, 58, 59, 60, 61, 67, 68, 73, 85, 103], "cgg": [56, 57, 58, 59, 60, 61, 67, 68, 73, 85, 103, 120], "cgt": [56, 57, 58, 59, 60, 61, 67, 68, 73, 85, 103], "cta": [56, 57, 58, 59, 60, 61, 67, 68, 73, 85, 103, 104], "ctc": [56, 57, 58, 59, 60, 61, 67, 68, 73, 85, 103, 104], "ctg": [56, 57, 58, 59, 60, 61, 67, 68, 73, 85, 103], "ctt": [56, 57, 58, 59, 60, 61, 67, 68, 73, 85, 103], "0032": [56, 57, 58, 59, 60], "0137": [56, 57, 58, 59, 60, 72], "0125": [56, 57, 58, 59, 60], "0105": [56, 57, 58, 59, 60, 61, 106], "gaa": [56, 57, 58, 59, 60, 61, 67, 68, 73, 85, 103, 104], "gac": [56, 57, 58, 59, 60, 61, 67, 68, 73, 85, 103], "gag": [56, 57, 58, 59, 60, 61, 67, 68, 73, 85, 103], "gat": [56, 57, 58, 59, 60, 61, 67, 68, 73, 85, 103], "gca": [56, 57, 58, 59, 60, 61, 67, 68, 73, 74, 85, 103], "gcc": [56, 57, 58, 59, 60, 61, 67, 68, 73, 74, 85, 103], "gcg": [56, 57, 58, 59, 60, 61, 67, 68, 73, 74, 85, 103], "gct": [56, 57, 58, 59, 60, 61, 67, 68, 73, 74, 76, 85, 103], "0755": [56, 57, 58, 59, 60], "0303": [56, 57, 58, 59, 60], "0315": [56, 57, 58, 59, 60], "0158": [56, 57, 58, 59, 60], "0096": [56, 57, 58, 59, 60, 72], "0014": [56, 57, 58, 59, 60, 72], "gga": [56, 57, 58, 59, 60, 61, 67, 68, 73, 85, 103], "ggc": [56, 57, 58, 59, 60, 61, 67, 68, 73, 85, 103], "ggt": [56, 57, 58, 59, 60, 61, 67, 68, 73, 85, 103], "gta": [56, 57, 58, 59, 60, 61, 67, 68, 73, 85, 103], "gtc": [56, 57, 58, 59, 60, 61, 67, 68, 73, 85, 103], "gtg": [56, 57, 58, 59, 60, 61, 67, 68, 73, 85, 103], "gtt": [56, 57, 58, 59, 60, 61, 67, 68, 69, 73, 85, 103, 105], "0161": [56, 57, 58, 59, 60], "0090": [56, 57, 58, 59, 60], "0067": [56, 57, 58, 59, 60], "0133": [56, 57, 58, 59, 60], "0148": [56, 57, 58, 59, 60, 106], "tac": [56, 57, 58, 59, 60, 61, 67, 68, 73, 85, 103], "tat": [56, 57, 58, 59, 60, 61, 67, 68, 73, 85, 103], "tca": [56, 57, 58, 59, 60, 61, 67, 68, 73, 85, 103], "tcc": [56, 57, 58, 59, 60, 61, 67, 68, 73, 79, 85, 103], "tcg": [56, 57, 58, 59, 60, 61, 67, 68, 73, 85, 103, 120], "tct": [56, 57, 58, 59, 60, 61, 67, 68, 73, 85, 103, 120], "tgc": [56, 57, 58, 59, 60, 61, 67, 68, 73, 74, 85, 103], "tgg": [56, 57, 58, 59, 60, 61, 67, 68, 73, 74, 85, 103], "0101": [56, 57, 58, 59, 60, 61], "0251": [56, 57, 58, 59, 60], "tgt": [56, 57, 58, 59, 60, 61, 67, 68, 73, 74, 85, 103], "tta": [56, 57, 58, 59, 60, 61, 67, 68, 73, 85, 103], "ttg": [56, 57, 58, 59, 60, 61, 67, 68, 73, 85, 103], "0201": [56, 57, 58, 59, 60, 61], "0212": [56, 57, 58, 59, 60], "0108": [56, 57, 58, 59, 60], "86143": [56, 60], "53730": [56, 60], "97921": [56, 60], "66672": [56, 60], "20426": [56, 60], "25657": 56, "91951": 56, "22530": [56, 60], "80141": [56, 60], "comega": [56, 60], "07230": [56, 60], "aaaaacaagaatacaaccacgactagaagc": [56, 57, 58, 59, 60, 61], "05560": [56, 57, 58, 59, 60], "02350": [56, 57, 58, 59, 60], "03440": [56, 57, 58, 59, 60], "02280": [56, 57, 58, 59, 60, 61], "00460": [56, 57, 58, 59, 60], "00080": [56, 57, 58, 59, 60], "02890": [56, 57, 58, 59, 60], "02310": [56, 57, 58, 59, 60], "aggagtataatcatgattcaacaccagcat": [56, 57, 58, 59, 60, 61], "01400": [56, 57, 58, 59, 60, 72], "03810": [56, 57, 58, 59, 60], "01860": [56, 57, 58, 59, 60], "00700": [56, 57, 58, 59, 60], "01280": [56, 57, 58, 59, 60], "01920": [56, 57, 58, 59, 60], "01960": [56, 57, 58, 59, 60], "00520": [56, 57, 58, 59, 60], "02380": [56, 57, 58, 59, 60, 61], "ccacccccgcctcgacgccggcgtctactc": [56, 57, 58, 59, 60, 61], "01950": [56, 57, 58, 59, 60], "00620": [56, 57, 58, 59, 60], "00060": [56, 57, 58, 59, 60], "02630": [56, 57, 58, 59, 60, 61], "00110": [56, 57, 58, 59, 60], "00090": [56, 57, 58, 59, 60], "00230": [56, 57, 58, 59, 60], "00320": [56, 57, 58, 59, 60], "01370": [56, 57, 58, 59, 60, 72], "ctgcttgaagacgaggatgcagccgcggct": [56, 57, 58, 59, 60, 61], "01250": [56, 57, 58, 59, 60], "01050": [56, 57, 58, 59, 60, 61, 106], "07550": [56, 57, 58, 59, 60], "03030": [56, 57, 58, 59, 60], "03150": [56, 57, 58, 59, 60], "01580": [56, 57, 58, 59, 60], "00960": [56, 57, 58, 59, 60], "00140": [56, 57, 58, 59, 60], "ggaggcgggggtgtagtcgtggtttactat": [56, 57, 58, 59, 60, 61], "01610": [56, 57, 58, 59, 60], "00900": [56, 57, 58, 59, 60], "00670": [56, 57, 58, 59, 60], "01330": [56, 57, 58, 59, 60], "01480": [56, 57, 58, 59, 60, 106], "00690": [56, 57, 58, 59, 60], "02130": [56, 57, 58, 59, 60], "tcatcctcgtcttgctggtgtttattcttg": [56, 57, 58, 59, 60, 61], "02210": [56, 57, 58, 59, 60], "00820": [56, 57, 58, 59, 60], "00150": [56, 57, 58, 59, 60], "02510": [56, 57, 58, 59, 60], "00180": [56, 57, 58, 59, 60], "00400": [56, 57, 58, 59, 60], "02010": [56, 57, 58, 59, 60, 61], "02120": [56, 57, 58, 59, 60], "00780": [56, 57, 58, 59, 60], "evid": [57, 73], "nielsen": [57, 103], "yang": [57, 58, 61, 73, 103, 106, 110], "sites_diff": 57, "4048": 57, "4954": 57, "6708": [57, 59], "3119": [57, 59], "6707": 57, "6095": 57, "404820": 57, "311924truetru": [57, 59], "609526truetru": 57, "bin": [57, 59, 73, 103, 107, 115], "ve": [57, 67, 73, 99, 117, 124], "purifi": [57, 130], "oomega": 57, "bprob": [57, 59, 73, 103, 107, 115], "8530": 57, "5646": 57, "9734": 57, "6404": 57, "3218": 57, "0814": 57, "7829": 57, "0292": 57, "8052": 57, "0905": 57, "5463": 57, "0099": [57, 59], "0364": 57, "85303": 57, "56460": 57, "97341": 57, "64042": 57, "18016": 57, "32188": 57, "08141": 57, "23470": 57, "78291": 57, "binbprobsomega": [57, 103], "ve0": 57, "10431": 57, "0000052606733014e": 57, "neutral0": [57, 103], "80521": 57, "090519": 57, "999999981174817": 57, "get_bin_prob": [57, 59, 103, 107], "0839": 57, "0843": 57, "0798": 57, "0760": 57, "0937": 57, "5173": 57, "0695": 57, "7725": 57, "8127": 57, "8643": 57, "7851": [57, 61], "7961": 57, "7668": 57, "8125": 57, "7927": 57, "8032": 57, "8141": 57, "8164": 57, "8070": 57, "8655": 57, "7670": 57, "4824": 57, "8197": 57, "7909": 57, "0784": 57, "0837": 57, "0893": 57, "0764": 57, "0882": 57, "0948": 57, "0993": 57, "0766": 57, "0003": 57, "0875": 57, "012345678910111213141516171819": [57, 59], "14910": 57, "08390": 57, "13130": 57, "11460": 57, "15690": 57, "08430": 57, "11910": 57, "10200": 57, "07980": 57, "07600": 57, "09370": 57, "15630": 57, "51730": 57, "06950": 57, "77250": 57, "81270": 57, "86430": 57, "78510": 57, "79610": 57, "76680": 57, "81250": 57, "79270": 57, "80320": 57, "81410": 57, "81640": 57, "80700": 57, "86550": 57, "76700": 57, "48240": 57, "81970": 57, "07840": 57, "10340": 57, "13570": 57, "08370": 57, "08930": 57, "07640": 57, "10320": 57, "08820": 57, "09480": 57, "10610": 57, "10760": 57, "09930": 57, "13450": 57, "07660": 57, "00030": 57, "11080": 57, "lineag": [58, 59, 73, 117], "hc_differ": 58, "9248": 58, "0265": 58, "6710": 58, "8109": 58, "924810": 58, "810924truetru": 58, "8620": 58, "5360": 58, "9790": 58, "6698": 58, "9208": 58, "8024": 58, "2882": 58, "0675": 58, "5237": 58, "7906": 58, "6351": 58, "86203": 58, "53600": 58, "97901": 58, "66982": 58, "20586": 58, "26297": 58, "92081": 58, "22650": [58, 61], "80241": 58, "edgeparentlengthomega": [58, 73, 110, 117], "52370": 58, "13390": 58, "06400": 58, "02330": 58, "00750": 58, "01822": 58, "00852": 58, "01000": 58, "03660": 58, "undergon": 59, "group": [59, 78, 103], "adapt": [59, 103], "foreground": [59, 103], "ll": [59, 66, 67, 82, 88, 94, 99, 102, 103, 107, 110, 112, 113, 114, 115, 117, 120, 121], "scope": [59, 103, 110, 121], "succinct": [59, 103, 109, 114], "zhang_test": 59, "9647": 59, "6705": 59, "8296": 59, "964730": 59, "829627truetru": 59, "8556": 59, "5352": 59, "9747": 59, "6590": 59, "0126": 59, "9653": 59, "0531": 59, "2a": [59, 103], "2b": [59, 103], "6408": 59, "5420": 59, "0648": 59, "0365": 59, "0234": 59, "85563": 59, "53520": 59, "97471": 59, "65902": 59, "19436": 59, "26018": 59, "01261": 59, "24220": 59, "79441": 59, "binbprob": 59, "2a0": 59, "2b0": 59, "edgebinomega": 59, "galago01": 59, "0000003589777765e": 59, "galago11": 59, "galago2a1": 59, "galago2b1": 59, "howlermon01": 59, "howlermon11": 59, "howlermon2a1": 59, "howlermon2b1": 59, "rhesus01": 59, "rhesus11": 59, "rhesus2a1": 59, "rhesus2b1": 59, "orangutan01": 59, "orangutan11": 59, "orangutan2a1": 59, "orangutan2b1": 59, "gorilla01": 59, "gorilla11": 59, "gorilla2a1": 59, "gorilla2b1": 59, "human01": 59, "human11": 59, "human2a19": 59, "999999964736553": 59, "human2b19": 59, "chimpanzee01": 59, "chimpanzee11": 59, "chimpanzee2a19": 59, "chimpanzee2b19": 59, "011": [59, 67], "02a1": 59, "02b1": 59, "12a1": 59, "12b1": 59, "22a1": 59, "22b1": 59, "32a1": 59, "32b1": 59, "0758": 59, "0427": 59, "0670": 59, "0585": [59, 106], "0800": 59, "0429": 59, "0607": 59, "0518": 59, "0410": [59, 72], "0391": [59, 72, 82], "0479": 59, "0796": 59, "0355": 59, "0619": 59, "2931": 59, "2928": 59, "0568": 59, "0329": 59, "0505": 59, "0444": 59, "0598": 59, "0331": 59, "0460": 59, "0396": [59, 72], "0318": 59, "0368": 59, "0595": 59, "0276": 59, "0469": [59, 106], "6126": 59, "6542": 59, "7069": 59, "6236": 59, "6341": 59, "6074": 59, "6539": 59, "6313": 59, "6426": 59, "6564": 59, "6588": 59, "6475": 59, "7072": 59, "6078": 59, "3794": 59, "6634": 59, "6299": 59, "07580": 59, "04270": 59, "06700": 59, "05850": [59, 106], "08000": 59, "04290": 59, "06070": 59, "05180": 59, "04100": [59, 72], "03910": [59, 72], "04790": 59, "07960": 59, "26150": 59, "03550": 59, "25480": 59, "27020": 59, "29310": 59, "25900": 59, "26290": 59, "25280": 59, "27010": 59, "26190": 59, "26600": 59, "27080": 59, "27180": 59, "26770": 59, "29280": 59, "25300": 59, "15650": 59, "27350": 59, "05680": 59, "03290": 59, "05050": 59, "04440": 59, "05980": 59, "03310": 59, "04600": 59, "03960": [59, 72], "03180": 59, "03680": 59, "05950": 59, "20260": 59, "02760": 59, "61260": 59, "65420": 59, "70690": 59, "62360": 59, "63410": 59, "60740": 59, "65390": 59, "63130": 59, "64260": 59, "65640": 59, "65880": 59, "64750": 59, "70720": 59, "60780": 59, "37940": 59, "66340": 59, "formal": [60, 91, 107], "elsewher": [60, 114], "abbrevi": [60, 61, 62, 72, 73, 79], "9196": 60, "25667": 60, "91961": 60, "cnfgtr": [61, 73, 103], "analag": [61, 73], "yap": [61, 62, 73, 103, 130], "lindsai": [61, 73, 103, 129, 130], "easteal": [61, 73, 103, 130], "huttlei": [61, 62, 73, 99, 101, 102, 103, 105, 106, 107, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 129, 130], "mol": [61, 73, 103], "biol": [61, 62, 73, 103, 122, 127, 129], "evol": [61, 73, 103], "hky": [61, 73, 103, 107, 112], "transit": [61, 70, 73, 107, 117, 121], "transvers": [61, 70, 73, 107, 117, 121], "muse": [61, 73, 103], "gaut": [61, 73, 103], "mg94gtr": [61, 73, 103, 110], "gy94": [61, 73, 103], "goldman": [61, 73, 103, 110], "y98": [61, 73], "h04g": [61, 73], "cpg": [61, 69, 73, 105], "h04gk": [61, 73], "h04ggk": [61, 73], "gen": [61, 73], "typeabbreviationdescript": [61, 62, 73], "codoncnfgtrcondit": [61, 73], "codoncnfhkycondit": [61, 73], "codonmg94hkymus": [61, 73], "codonmg94gtrmus": [61, 73], "codongy94goldman": [61, 73], "codony98yang": [61, 73], "codonh04ghuttlei": [61, 73], "codonh04gkhuttlei": [61, 73], "codonh04ggkhuttlei": [61, 73], "codongncgener": [61, 73], "robust": [61, 87, 117, 130], "configur": [61, 62, 63, 103, 124], "6739": 61, "3067": 61, "306777truetru": 61, "0656": 61, "9391": 61, "9475": 61, "7569": 61, "5330": 61, "0659": 61, "0352": 61, "0540": 61, "0242": 61, "0307": 61, "0543": 61, "0237": 61, "0021": 61, "0297": 61, "0280": 61, "0405": 61, "0226": [61, 82], "0071": 61, "0141": 61, "0203": 61, "0165": 61, "0022": [61, 72], "0012": 61, "0035": 61, "0058": 61, "0123": 61, "0098": 61, "0703": 61, "0112": 61, "0310": 61, "0154": 61, "0036": 61, "0145": [61, 82], "0151": 61, "0072": 61, "0051": [61, 92], "0139": 61, "0094": 61, "0210": 61, "0171": 61, "0039": [61, 72], "0222": 61, "0107": 61, "0146": 61, "tomega": [61, 103, 110], "06563": 61, "93910": 61, "78511": 61, "94754": 61, "05400": 61, "02420": 61, "03070": 61, "05430": 61, "02370": 61, "00630": 61, "00210": 61, "02970": 61, "01220": 61, "04050": 61, "02260": [61, 82], "00710": 61, "01410": 61, "02030": 61, "02200": 61, "01650": 61, "00430": 61, "02390": 61, "00220": 61, "00120": 61, "00350": 61, "00580": 61, "01230": 61, "00980": 61, "07030": 61, "01120": 61, "03100": 61, "01540": 61, "00830": 61, "00360": 61, "01510": 61, "00720": 61, "00510": 61, "01390": 61, "01700": 61, "00940": 61, "02100": 61, "00390": 61, "02140": 61, "00380": 61, "00330": 61, "02220": 61, "discret": [62, 63, 73, 103, 107], "biometr": [62, 73], "dt": [62, 73], "dinucleotid": [62, 67, 68, 73, 113], "trinucleotid": [62, 67, 68, 73], "sy": [62, 73, 120], "ssgn": [62, 73], "symmetr": [62, 73], "journal": [62, 73], "theoret": [62, 73], "biologi": [62, 73, 123, 130], "k80": [62, 73], "kimura": [62, 73], "jc69": [62, 72, 73], "juke": [62, 73], "cantor": [62, 73], "tamura": [62, 73], "nei": [62, 73], "hasegawa": [62, 73], "kishino": [62, 73], "yano": [62, 73], "felsenstein": [62, 73, 120], "nucleotidebhbarri": [62, 73], "nucleotidedtdiscret": [62, 73], "nucleotidegngener": [62, 73], "nucleotidessgnstrand": [62, 73], "nucleotidek80kimura": [62, 73], "nucleotidejc69juk": [62, 73], "nucleotidegtrgener": [62, 73], "nucleotidetn93tamura": [62, 73], "nucleotidehky85hasegawa": [62, 73], "nucleotidef81felsenstein": [62, 73], "lanav": 62, "design": [63, 77, 82, 106, 107, 111], "enabl": [63, 111], "understand": 63, "batch": [63, 113], "amount": [63, 111, 126, 129], "aka": 63, "pipelin": [63, 123, 130], "thousand": 63, "sever": [63, 90, 104], "featur": [63, 66, 67, 73, 105, 109, 118, 126], "trap": 63, "relationship": 63, "hmm": [63, 107], "possess": [63, 69], "That": [63, 76, 99, 114, 124], "said": 63, "task": [63, 64, 111, 117, 123], "aros": 64, "traceback": [64, 67, 69, 74, 83, 84, 105], "recent": [64, 67, 69, 74, 83, 84, 105], "_read_it": 64, "posixpath": 64, "_call": 64, "val": [64, 65], "_load_seq": 64, "_parser": 64, "read_text": 64, "opt": 64, "hostedtoolcach": 64, "x64": 64, "encod": [64, 73], "buffer": 64, "_open": 64, "_accessor": 64, "filenotfounderror": 64, "errno": 64, "wrapper": [65, 82], "up_to": 65, "first4": 65, "gcaagcgtttat": 65, "gcttttgtcaat": 65, "gcaa": 65, "gctt": 65, "agcaa": 65, "abil": [65, 73, 90, 123, 124, 130], "seqscollectiontyp": 65, "lambda": [65, 67, 76, 77, 82, 84, 107], "gcaagcgttta": 65, "gcttttgtcaa": 65, "agcaagcgtttat": 65, "tttt": [65, 69, 105], "pairwisedistancetyp": 65, "ham": [65, 72], "percent_dist": 65, "5000": 65, "namesab": 65, "a0": 65, "b0": 65, "50000": 65, "biolog": [66, 75, 107, 108, 123, 130], "manipul": [66, 75, 118, 123, 126, 129, 130], "critic": [66, 79, 113], "intend": [66, 126], "my_seq": [66, 67, 74], "agtacactggt": 66, "rnaseq": 66, "acguacguacguacgu": [66, 79], "nacguacguacguacgu": 66, "conveni": [66, 73, 76, 103, 125], "my_gen": [66, 74], "tcatgtgacca": 66, "accagtgtact": 66, "gcttgggaaagtcaaatggaa": 66, "pep": [66, 74], "awesqm": 66, "acgtacgtacgtacgt": 66, "extra_seq": 66, "ctgac": 66, "long_seq": 66, "agtacactggtctgac": 66, "gtaca": 66, "nonegtaca": 66, "easiest": 66, "atgatgatgatg": [66, 67], "pos3": [66, 67], "assert": [66, 67, 82, 84, 105, 107, 114], "gggg": [66, 67, 69], "pos12": 66, "get_slic": [66, 67, 69, 105, 118], "atatatat": 66, "acaacuggcucugaug": 66, "auuaugcuau": 66, "uau": 66, "auuaugcuauuau": 66, "url": [67, 78, 129, 130], "hood": 67, "veri": [67, 73, 84, 103, 104, 111, 112, 113, 114, 126, 129, 130], "long": 67, "better": [67, 111], "atgacc": 67, "atcgcc": 67, "paml": [67, 73, 86, 100, 106], "nineband": [67, 70, 76, 77, 81, 82, 100, 101, 102, 107, 110, 114, 116, 117], "gcaaggcgccaacagagcagatgggctgaaagtaaggaaacatgtaatgataggcagact": 67, "gcagtgagccagcagagcagatgggctgcaagtaaaggaacatgtaacgacaggcaggtt": 67, "gcaaggagccaacataacagatgggctggaagtaaggaaacatgtaatgataggcggact": 67, "gcaaggagccaacataacagatgggctgaaagtgaggaaacatgtaatgataggcagact": 67, "dogfac": [67, 70, 76, 77, 81, 82, 85, 100, 101, 102, 107, 110, 114, 116, 117], "gcaaggagccagcagaacagatgggttgaaactaaggaaacatgtaatgataggcagact": 67, "atgaa": 67, "agtgatg": 67, "gatg": 67, "new_seq": 67, "seq0": 67, "seq4": 67, "atgcc": 67, "new_aln": 67, "ataggatg": 67, "agcg": 67, "atgctggg": 67, "tggg": 67, "desir": [67, 73, 107, 109], "atgaatg": 67, "get_seq_nam": 67, "long_testseq": [67, 76, 86, 101, 102, 107, 110, 112, 116, 117, 121], "tgtggcacaaatactcatgccagc": 67, "fasta_1": 67, "fasta_2": 67, "later": [67, 73, 103, 105, 110, 116], "cctggg": 67, "bcctggg": 67, "ccuggg": 67, "bccuggg": 67, "tyv": 67, "te": 67, "prot": 67, "xtyv": 67, "primate_cdx2_promot": [67, 86, 119], "remove_fil": 67, "error_on_miss": 67, "fasta_align": 67, "got": [67, 111], "string_list": 67, "tgtggcacagatgctcatgccagc": 67, "tgtggcacaaatactcatgccaac": 67, "subscript": 67, "column_four": 67, "bytesequ": 67, "atgatgatg": 67, "notat": [67, 82, 105], "acgtaa": 67, "acgaca": 67, "acgcaatga": 67, "acgcaa": 67, "acgac": 67, "sometim": [67, 76], "atgaaggtg": 67, "atgaaggtgatg": 67, "atgaaggngatg": 67, "nuc": 67, "atgaaggg": 67, "trinuc": 67, "atgaag": 67, "just_variable_aln": 67, "aagcaaaact": 67, "aagcaagact": 67, "gggcccagct": 67, "aaataaaact": 67, "aaacaaaata": 67, "just_constant_aln": 67, "tgtggcacaa": 67, "variable_codon": 67, "aagcaaaac": 67, "aagcaagac": 67, "gggcccagc": 67, "aaataaaac": 67, "aaacaaaat": 67, "tgtggcacaga": [67, 76, 85], "humantgtggcacaaatactcatgccagctcattacagcatgagaacagcagtttattactcact": 67, "dogfacedtgtggcacaaatactcatgccaactcattacagcatgagaacagcagtttattatacact": [67, 76], "ct": [67, 68, 76, 120], "no_n_char": 67, "atgaaggtgat": 67, "seq2atgaaggtgatg": 67, "addition": [67, 130], "atgaaggngat": 67, "seq3atgaaggngatg": 67, "ipuac": 67, "25520602569782896": 67, "25808595480726626": 67, "24390784226849802": 67, "24280017722640673": 67, "trinuc_alphabet": [67, 68], "3f": 67, "037": 67, "034": [67, 70], "030": [67, 103], "029": 67, "028": 67, "027": [67, 70], "026": 67, "025": 67, "024": 67, "023": [67, 70, 110], "021": [67, 73, 117], "020": [67, 73, 103], "019": [67, 70], "018": 67, "017": 67, "015": 67, "014": 67, "013": [67, 70], "012": [67, 73, 77, 82], "010": [67, 103], "009": [67, 73], "008": [67, 73], "007": 67, "006": [67, 73], "003": [67, 73], "002": [67, 73], "pseudo": [67, 105, 118], "slightli": [67, 73, 107, 111], "aacaac": 67, "aagaag": 67, "clearli": 67, "aacgtaag": 67, "dinuc_alphabet": [67, 68], "incid": 67, "naiv": 67, "aaagtaag": 67, "aaaa": [67, 69, 105], "comprehens": [67, 114, 123], "di_nuc": 67, "nn": 67, "c1": 67, "c2": 67, "6666666666666666": 67, "atgaagg": 67, "aggtgatg": 67, "seq_to_aln_map": 67, "tell": [67, 111], "oppos": 67, "aln_to_seq_map": 67, "therefor": [67, 114], "seq_po": 67, "computation": 67, "discuss": [67, 73, 117], "stretch": 67, "anywher": 67, "certain": [67, 77, 82], "percentag": 67, "atga": 67, "atgaggatg": 67, "aggatg": 67, "commonli": [67, 117], "partial": 67, "filtered_aln": 67, "4th": 67, "atgagtgatg": 67, "gt": [68, 70, 73, 120], "gg": [68, 105, 120], "tagt": 68, "dnasequ": [68, 69, 78, 79, 80, 105, 118], "nonetagt": 68, "extens": [69, 73, 92, 123, 130], "advanc": [69, 71, 108, 114, 130], "plenti": 69, "pars": [69, 76, 77, 82, 92, 106, 109], "richgenbankpars": 69, "st_genome_part": 69, "gb": 69, "ae006468": 69, "thrl": 69, "10020": 69, "thra": 69, "thrb": 69, "3730": 69, "thrc": 69, "3733": 69, "5020": 69, "yaaa": 69, "5887": 69, "5113": 69, "yaaj": 69, "7396": 69, "5965": 69, "talb": 69, "7664": 69, "8618": 69, "mog": 69, "8728": [69, 107], "9319": 69, "yaah": 69, "9942": 69, "9375": 69, "locus_tag": 69, "type_": 69, "isinst": 69, "stm0001": 69, "stm0002": 69, "stm0003": 69, "stm0004": 69, "stm0005": 69, "stm0006": 69, "stm0007": 69, "stm0008": 69, "stm0009": 69, "s1": [69, 91], "aagaagaagacccccaaaaaaaaaa": 69, "ttttttttttaaaaagggaaccct": 69, "exon": [69, 105, 118], "s2": [69, 91, 118], "cgaaacgttt": [69, 105], "s3": 69, "ccccc": [69, 105, 118], "tttttaaaaa": 69, "exon1": [69, 105, 118], "exon2": [69, 105, 118], "exon3": [69, 118], "cpgs_seri": 69, "cpgsite": [69, 105], "cpg1": 69, "cpg2": 69, "intron": [69, 118], "get_coordin": [69, 105], "not_cd": 69, "get_shadow": [69, 105, 118], "onto": [69, 105, 114], "aaaccccca": 69, "seq_exon": 69, "red_data": 69, "redlin": 69, "seq1ccccc": 69, "seq1tttttaaaaa": 69, "ccccctttttaaaaaccc": 69, "aagaagaagacccccaaaaaaaaaattttttttttaaaaagggaaccct": 69, "cccccccctttttaaaaa": 69, "_annotat": [69, 105], "_as_map": [69, 105], "_map": [69, 105], "sliced_annot": [69, 105], "_sliced_annot": [69, 105], "hasattr": [69, 105], "_repr_polici": [69, 105], "slicemap": [69, 105], "newmap": [69, 105], "__invers": [69, 105], "_invers": [69, 105], "new_span": [69, 105], "lostspan": [69, 105], "lo": [69, 73, 105], "last_hi": [69, 105], "elif": [69, 105], "uninvert": [69, 105], "hi": [69, 73, 105], "ex2_start": 69, "ex2_end": 69, "remapped_to": [69, 105], "aaaaaaaaa": [69, 105], "cccccccccccccccccccc": [69, 105], "match_exon": [69, 105], "li": [69, 105], "lost": [69, 105], "ttttt": [69, 105], "again": [69, 73, 105, 117, 130], "diff_len_seq": [69, 105], "cccccccccccccccccccccccccccc": [69, 105], "nonmatch": [69, 105], "repeat": [69, 105, 118], "project": [69, 105, 126], "aln_exon": [69, 105], "cpgsite2": 69, "cpgsite3": 69, "cgcg": 69, "parent_length": 69, "_featur": 69, "dont_exist": [69, 105], "aln3": [69, 115], "cccaaaaa": [69, 105], "ex1": [69, 105], "cccc": [69, 105], "opposit": [69, 105], "cccccaaaaaaaaaattttttttttaaagg": 69, "plus_rpt": 69, "blah": 69, "minu": [69, 91, 105, 111], "minus_rpt": 69, "aaaaaaaaaaaaa": 69, "cctttaaaaaaaaaattttttttttggggg": 69, "no_cd": 69, "caagacagacaaataaaaatgacagagtacacaacatcc": 69, "cgcgtacaggaaacacagaaaaaagcccgcacctgaacagtgcgggcttttttttcgaccagagatcacgaggtaacaacc": 69, "cccaaaaagggaa": [69, 105], "ttttg": [69, 105], "norwegian": [69, 105], "aaaaagggaa": [69, 105], "persist": 69, "ttccctttttggg": 69, "caaaa": 69, "ttcccttttt": 69, "ccccaaaaagggaa": 69, "rpt": 69, "atgaccctgtaaaaaatgtgttaaccc": 69, "cds1": 69, "cds2": 69, "all_cd": 69, "coding_seq": 69, "noncoding_seq": 69, "agagatt": 69, "ae006468agagattacgtctggttgcaagagatcatgacagggggaattggttgaaaataaatatat": 69, "aaaccggttt": 69, "repeat_unit": 69, "rep2": 69, "visualis": [69, 90, 93, 126, 129, 130], "treealign": 70, "guid": 70, "test2": [70, 86], "gcagtgagcca": 70, "gcca": 70, "gcaaggagcca": 70, "dogfacedgcaaggagccagcagaacagatgggttgaaactaaggaaacatgtaatgataggcagact": 70, "046": 70, "058": 70, "079": 70, "062": 70, "cgcca": 70, "hum": [70, 99], "aagcagatccaggaaagcagcgagaatggcagcctggccgcgcgccaggagaggcaggcccaggtcaacctcact": [70, 99], "mu": [70, 76, 81, 99], "aagcagatccaggagagcggcgagagcggcagcctggccgcgcggcaggagaggcaggcccaagtcaacctcacg": [70, 99], "ctgaacaagcagccactttcaaacaagaaa": [70, 99], "unaligned_dna": [70, 99], "aagcagatccaggaaagcagcgagaatggcagcctggccgcgcgccaggagaggcaggcc": [70, 99], "caggtcaacctcact": [70, 99], "aagcagatccaggagagcggcgagagcggcagcctggccgcgcggcaggagaggcaggcc": [70, 99], "caagtcaacctcacg": [70, 99], "kqiqessengslaarqerqaqvnlt": [70, 99], "kqiqesgesgslaarqerqaqvnlt": [70, 99], "lnkqplsnkk": [70, 99], "aligned_aa_seq": [70, 99], "lnkq": [70, 99], "pl": [70, 99], "nkk": [70, 99], "aligned_aa": [70, 99], "aligned_dna": [70, 99], "aagcagatcca": [70, 99], "ctgaacaagca": [70, 99], "humaagcagatccaggaaagcagcgagaatggcagcctggccgcgcgccaggagaggcaggcc": [70, 99], "ratct": [70, 99], "pure": 71, "stepwis": [71, 114], "taxa": [71, 103, 114], "exhaust": 71, "least_squar": [71, 114], "wl": [71, 114], "deserialise_object": [71, 73], "dists_for_phylo": [71, 86, 102, 114], "trex": [71, 114], "return_al": [71, 114], "best": [71, 73, 104, 109, 117, 124, 126, 129], "scoredtreecollect": 71, "randomis": 71, "maximum_likelihood": [71, 114], "insensit": [72, 79], "logdet": 72, "abbreviationsuit": 72, "paralineardna": 72, "logdetdna": 72, "jc69dna": 72, "tn93dna": 72, "hammingdna": 72, "percentdna": 72, "0704": 72, "0089": 72, "0700": 72, "0086": 72, "0393": 72, "0736": 72, "0719": 72, "0173": 72, "0423": 72, "0411": [72, 92], "nameschimpanzeegalagogorillahowlermonhumanorangutanrhesu": 72, "chimpanzee0": 72, "19210": 72, "00540": 72, "07040": 72, "00890": 72, "galago0": 72, "19230": 72, "21570": 72, "19650": 72, "19440": 72, "gorilla0": 72, "07000": 72, "00860": 72, "howlermon0": [72, 102], "07360": 72, "07190": 72, "human0": [72, 102], "01730": 72, "orangutan0": 72, "rhesus0": 72, "19620": 72, "03930": 72, "04230": 72, "04110": [72, 92], "get_distance_calcul": 72, "dist_calc": 72, "tn93pair": 72, "0x7fa2fc2c87f0": 72, "get_pairwise_dist": [72, 100, 101, 102], "stderr": 72, "0103": 72, "0095": 72, "seq2galagohowlermonrhesusorangutangorillahumanchimpanze": 72, "galago00": 72, "0102748270583958960": 72, "0096163078326485620": 72, "0095356465322767870": 72, "0094913822495401760": 72, "0096150330918649170": 72, "009469268026590141": 72, "01027482705839589600": 72, "0054118117125547720": 72, "00533485849516111750": 72, "0052656124746942460": 72, "0054067602387489840": 72, "005273572620183854": 72, "00541181171255477200": 72, "00394085494178657550": 72, "0038527981619030950": 72, "0040050459201001250": 72, "0038665597157698894": 72, "003940854941786575500": 72, "00222911247430113750": 72, "00251518387918036550": 72, "0022606571679022955": 72, "002229112474301137500": 72, "00175969199023268760": 72, "0013848543487237903": 72, "001759691990232687600": 72, "0017949285088691988": 72, "0094692680265901410": 72, "0052735726201838540": 72, "00386655971576988940": 72, "00226065716790229550": 72, "00138485434872379030": 72, "00179492850886919880": 72, "significantli": [72, 103, 111, 126], "estimatedist": [72, 100, 101, 102], "submodel": [72, 100, 101, 102], "0697": 72, "0395": 72, "0693": 72, "0136": 72, "0729": 72, "0713": 72, "0421": 72, "18920": 72, "06970": 72, "18910": 72, "21120": 72, "19340": 72, "19150": 72, "06930": 72, "01360": 72, "07290": 72, "07130": 72, "03950": 72, "19300": 72, "04210": 72, "dso78": 73, "dayhoff": [73, 106], "empir": [73, 108], "mo": 73, "schwartz": 73, "rm": 73, "orcutt": 73, "bc": [73, 82], "pp": [73, 103, 107], "atla": 73, "suppl": 73, "nation": 73, "biomed": 73, "research": 73, "foundat": 73, "washington": 73, "dat": [73, 106], "jone": 73, "taylor": 73, "thornton": 73, "wr": 73, "jm": 73, "rapid": 73, "appl": 73, "biosci": 73, "jun": 73, "ah96": 73, "adachi": 73, "mtrev24": 73, "ah96_mtmamm": 73, "mammalian": 73, "mtmam": 73, "whelan": 73, "globular": 73, "evolut": [73, 107, 109, 129, 130], "wag": 73, "proteindso78dayhoff": 73, "proteinjtt92jon": 73, "proteinah96adachi": 73, "proteinah96_mtmammalsadachi": 73, "proteinwg01whelan": 73, "timereversiblenucleotid": [73, 107, 115], "num_motif": 73, "gamma": [73, 115], "sub_mod": 73, "with_rat": 73, "timereversiblecodon": [73, 103], "make_likelihood_funct": [73, 103, 106, 107, 110, 112, 115, 116, 117, 119, 120, 121], "set_align": [73, 103, 106, 107, 110, 115, 116, 117, 119, 121], "great": 73, "precan": 73, "init": [73, 103, 107, 117], "rule": [73, 103, 117], "galagoroot1": 73, "howlermonroot1": 73, "000": [73, 103, 111], "3root1": 73, "aaaaacaagaatacaaccacgactagaagcaggagtata": [73, 103], "atcatgattcaacaccagcatccacccccgcctcgacgc": [73, 103], "cggcgtctactcctgcttgaagacgaggatgcagccgcg": [73, 103], "gctggaggcgggggtgtagtcgtggtttactattcatcc": [73, 103], "tcgtcttgctggtgtttattcttgttt": [73, 103], "maximis": [73, 84], "essenti": [73, 103, 118], "is_const": [73, 103, 107, 115, 117], "closer": 73, "quicker": 73, "stuck": 73, "close": [73, 107, 109, 114], "seem": 73, "too": [73, 117], "sensibl": 73, "fulli": [73, 84], "sites_independ": [73, 107], "hidden": [73, 108], "simul": [73, 84, 108, 109, 110, 115, 126, 129], "anneal": [73, 84, 110], "powel": [73, 84, 110], "slow": [73, 107, 111], "adequ": 73, "setup": [73, 107], "max_restart": [73, 103, 115], "restart": 73, "spot": 73, "overcom": 73, "maxima": 73, "crude": 73, "rigor": [73, 110], "global_toler": [73, 110], "guarante": [73, 84, 105], "sure": 73, "proce": [73, 114], "endlessli": 73, "successfulli": [73, 109], "monitor": 73, "situat": 73, "limit_act": 73, "hide": [73, 103], "max_evalu": 73, "return_calcul": 73, "err": 73, "catch": 73, "shouldn": [73, 105], "7690": 73, "9585": 73, "3159": 73, "9700": 73, "0449": 73, "0216": 73, "0120": 73, "23165": 73, "25340": 73, "95852": 73, "31595": 73, "reus": [73, 103], "768994254068": 73, "get_aic": 73, "14017": 73, "537988508137": 73, "aic": 73, "second_ord": 73, "732482608959": 73, "get_bic": 73, "14112": 73, "615784310927": 73, "exchang": [73, 117, 121], "a_g": 73, "253426612104869": 73, "0060601250493658035": 73, "mprob": 73, "24060": 73, "get_statist": [73, 103, 115], "with_motif_prob": 73, "clock": [73, 112, 116], "is_independ": [73, 110, 116, 117, 121], "set_nam": [73, 116], "null_lnl": [73, 110, 116], "null_nfp": [73, 110, 116], "7177": 73, "4403": 73, "044": 73, "004": 73, "3760": 73, "alt_lnl": 73, "alt_nfp": 73, "7175": 73, "7756": 73, "chi": [73, 107, 110, 116], "scipi": [73, 103, 107, 110, 116, 121], "chi2": [73, 103, 107, 110, 116, 121], "sf": [73, 103, 107, 110, 116, 121], "4f": [73, 84, 107, 114], "3294": 73, "reli": [73, 104, 111], "asymptot": 73, "lrt": [73, 107], "small": [73, 76, 82, 103, 107, 111, 112, 114, 116], "simulate_align": [73, 115, 120], "sim_aln": 73, "agaataaaggt": 73, "agaataaagga": 73, "chimpanzeeagaataaaggtatggatcaattagaccaatctccatgagggcaaaaccgcgatcagtgcg": 73, "kappa_lo": 73, "kappa_ml": 73, "kappa_hi": 73, "get_param_interv": 73, "2f": [73, 111, 112], "human_lo": 73, "human_ml": 73, "human_hi": 73, "reload": 73, "disk": 73, "acgg": 73, "atag": 73, "atgg": 73, "newlf": 73, "3333": 73, "0833": 73, "aroot1": 73, "broot1": 73, "croot1": 73, "33330": 73, "08330": 73, "41670": 73, "likely_ancestral_seq": 73, "0tgtggcacaaatactcatgccagctcattacagcatgagaacagtttattactcactaaa": 73, "Or": [73, 77, 82], "ancestral_prob": 73, "reconstruct_ancestral_seq": 73, "18160": 73, "quit": [73, 103], "difficult": 73, "easi": [73, 130], "nest": [73, 103, 107], "relax": 73, "until": [73, 114], "markedli": 73, "standard_cod": [74, 80], "tttgcaaac": [74, 80], "fan": [74, 80], "atgctaacataaa": 74, "mlt": 74, "hk": 74, "fmla": 74, "lc": 74, "yv": 74, "stops_frame1": 74, "stop_index": 74, "nonetaa": 74, "flat_list": 74, "agtacactggtt": 74, "atgcactggtaa": 74, "nucleicacidsequ": 74, "orig_codon": 74, "posn": 74, "motif_set": 74, "_quick_motifset": 74, "mhw": 74, "caaatgtattaa": 74, "qmy": 74, "githubusercont": [76, 77, 82], "com": [76, 77, 82, 124], "overridden": 76, "protein_seq": 76, "dekql": 76, "rg": 76, "ddk": 76, "srg": 76, "proteins_load": 76, "make_": 76, "aatcg": 76, "aatcgga": 76, "seqs_load": 76, "while": [76, 84, 104, 111, 117, 129], "molecul": 76, "comment": 76, "accomplish": 76, "whitespac": 76, "dna_seq": 76, "sample1": 76, "musculu": 76, "aacctgc": 76, "sample2": 76, "gallu": 76, "tgcaac": 76, "loaded_seq": 76, "sample2aac": 76, "aatca": 76, "0x7f7faf29f820": 76, "minimalfastapars": 76, "tgtggcacaaatactcatgccagctcattacagcatgagaacagcagtttattactcactaaagacagaatgaatgtagaaaaggctgaattctgtaataaaagcaaacagcctggcttagcaaggagccaacataacagatgggctggaagtaaggaaacatgtaatgataggcggactcccagcgaaaaaaaggtagatctgaatgctgatcccctgtgtgagagaaaagaatggaataagcagaaactgccatgctcagagaatcctagagatactgaagatgttccttggataacactaaatagcagcattcagaaagttaatgagtggttttccagaagtgatgaactgttaggttctgatgactcacatgatggggagtctgaatcaaatgccttggacgttctaaatgaggtagatgaatattctggttcttcagagaaaatagacttactggccagtgatcctcatgaggctttaatatgtgaaagagttcactccaaatcagtagagagtaatattgaagacaaaatatttgggaaaacctatcggaagaaggcaagcctccccaacttaagccatgtaactgaaattataggagcatttgttactgagccacagataatacaagagcgtcccctcacaaataaattaaagcgtaaaaggacatcaggccttcatcctgaggattttatcaagaaagcagatttggcagttcaaaagactcctgaaatgataaatcagggaactaaccaaacggagcagaatggtcaagtgatgaatattactaatagtggtcatgagaataaaacaaaaggtgattctattcagaatgagaaaaatcctaacccaatagaatcactcgaaaaagaatctttcaaaacgaaagctgaacctataagcagcagtataagcaatatggaactcgaattaaatatccacaattcaaaagcacctaaaaagaatctgaggaggaagtctaccaggcatattcatgcgcttgaactagtcagtagaaatctaagcccacctaattgtactgaattgcaaattgatagttgttctagcagtgaagagataaagaaaaaaaagtacaaccaaatgccagtcaggcacagcagaaacctacaactcatggaaggtaaagaacctgcaactggagccaagaagaacaagccaaatgaacagacaagtaaaagacatgacagcgatactttcccagagctgaagaatgcacctggttcttttactaagtgttcaaataccagtgaacttaaagaatttaatcctagccttccaagagaagaaaaagagaaactagaaacagttaaagtgtctaataatgctgaagaccccaaagatctcatgttaagtggagaaagggttttgcaaactgaaagatctgtagagagtagcagtatttcattggtacctggtactgattatggcactcaggaaagtatctcgttactggaagttagcactctagggaaggcaaaaacagaaccaaataaatgtgtgagtcagtgtgcagcatttgaaaaccccaagggactaattcatggttccaaagataatagaaatgacacagaaggctttaagtatccattgggacatgaagttaaccactcaaatccagaagaggaatgtgcacactctgggtccttaaagaaacaaagtccaaaagtcacttttgaatgtgaacaaaaggaaaatcaaggaaagaatgagtctaataagcctgtacagacagttaatatcactgcaggctttcctgtggttggtcagaaagataagccagttgataatgccaaatgtaaaggaggctctaggttttgtctatcatctcagttcagaggcaacgaaactggactcattactccaaataaacatggacttttacaaaacccatatcgtataccaccactttttcccatcaagtcatttgttaaaactaaatgtaagaaaaatctgctagaggaaaactttgaggaacattcaatgtcacctgaaagagaaatgggaaatgagaacattccaagtacagtgagcacaattagccgtaataacagagaaaatgtttttaaagaagccagctcaagcaatattaatgaagtaggttccagtgatgaaaacattcaagcagaactaggtagaaacagagggccaaaattgaatgctatgcttagattaggggttttgcaacctgaggtctataaacaaagtcttcctggaagtaataagcatcctgaaataaaaaagcaagaagttcagactgttaatacagatttctctccactgatttcagataacttagaacagcctatgagtagtcatgcatctcaggtttgttctgagacacctgatgacctgttagatgatggtgaaataaaggaagatactagttttgctgaaaatgacattaaggaaagttctgctgtttttagcaaaagcgtccagaaaggagagcttagcaggagtcctagccctttcacccatacacatttggctcagggttaccgaagaggg": 76, "tgtggcacaaatactcatgccagctcattacagcatgagaacagcagtttgttactcactaaagacacactgaatgtagaaaaggctgaattctgtaataaaagcaaacagcctggcttagcaaggagccaacataacagatgggctgaaagtgaggaaacatgtaatgataggcagactcccagcgagaaaaaggtagatgtggatgctgatcccctgcatgggagaaaagaatggaataagcagaaacctccgtgctctgagaatcctagagatactgaagatgttgcttggataatgctaaatagcagcattcagaaagttaatgagtggttttccagaagtgatgaactgttaacttctgatgactcacatgatggggggtctgaatcaaatgccttggaagttctaaatgaggtagatggatattctagttcttcagagaaaatagacttactggccagtgatcctcatgatcatttgatatgtgaaagagttcactgcaaatcagtagagagtagtattgaagataaaatatttgggaaaacctatcggaggaaggcaagcctccctaacttgagccacgtaactgaaattataggagcatttgttactgagccacagataatacaagagcatcctctcacaaataaattaaagcgtaaaaggacatcaggacttcatcctgaggattttatcaagaaagcagatttggcagttcaaaagactcctgaaaagataaatcagggaactaaccaaacagagcggaatgatcaagtgatgaatattactaacagtggtcatgagaataaaacaaaaggtgattctattcagaatgagaacaatcctaacccagtagaatcactggaaaaagaatcattcaaaagtaaagctgaacctataagcagtagtataagcaatatggaattagaattgaatgtccacaattccaaagcatctaaaaagaatctgagaaggaagtctaccaggcatattcatgagcttgaactagtcagtagaaatctaagcccacctaattatactgaagtacaaattgatagttgttctagcagtgaagagataaagaaaaaaaattacaaccaaatgccagtcaggcacagcagaaagctacaactcatggaagataaagaacgtgcagctagagccaaaaagagcaagccaaatgaacaaacaagtaaaagacatgccagtgatactttcccagaactgaggaacatacctggttcttttactaactgttcaaatactaatgaatttaaagaatttaatcctagccttccaagagaacaaacagagaaactagaaacagttaaactgtctaataatgccaaagaccccaaagatctcatgttaagtggagaaagtgttttgcaaattgaaagatctgtagagagtagcagtattttgttgatacctggtactgattatggcactcaggaaagtatctcattactggaagttagcactctggggaaggcaaaaacagaaccaaataaatgtgtgagtcagtgtgcagcatttgaaaaccccaaggaactaattcatggttctaaagatactagaaatggcacagaaggcttgaagtatccattgggacctgaagttaactactcaaatccagaaaaggaatgtgcatgctctaggtccttaaagaaacaaagtccaaaggtcactcctgaatgtgaacaaaaggaaaatcaaggagagaaagagtctaatgagcttgtagagacagttaataccactgcaggctttcctatggtttgtcagaaagataagccagttgattatgccagatgtgaaggaggctctaggctttgtctatcatctcagttcagaggcaacgaaactggactcattattccaaataaacatggacttttacagaacccatatcatatgtcaccgcttattcccaccaggtcatttgttaaaactaaatgtaagaaaaacctgctagaagaaaactctgaggaacattcaatgtcacctgaaagagcaatgggaaacaagaacattccaagtacagtgagcacaattagccataataacagagaaaatgcttttaaagaaaccagctcaagcagtatttatgaagtaggttccagtgatgaaaacattcaagcagagctaggtagaaacagaaggccaaaattgaatgctatgcttagattagggcttctgcaacctgagatttgtaagcaaagtcttcctataagtgataaacatcctgaaattaaaaagcaagaagttcagactgttaatacagacgtctctctactgatttcatataacctagaacagcatatgagcagtcatacatctcaggtttgttctgagacacctgacaacctgttagatgatggtgaaataaaggaagatactagttttgctgaatatggcattaaggagacttctactgtttttagcaaaagtgtccagagaggagagctcagcaggagccctagccctttcacccatacacatttggctcaggtttaccaaagaggg": 76, "tgtggcacagatgctcatgccagctcattacagcctgagaccagcagtttattgctcattgaagacagaatgaatgcagaaaaggctgaattctgtaataaaagcaaacagcctggcatagcagtgagccagcagagcagatgggctgcaagtaaaggaacatgtaacgacaggcaggttcccagcggggaaaaggtaggtccaaacgctgactcccttagtgatagagagaagtggactcacccgcaaagtctgtgccctgagaattctggagctaccaccgatgttccttggataacactaaatagcagcgttcagaaagttaatgagtggttttccagaactggtgaaatgttaacttctgacagcgcatctgccaggaggcacgagtcaaatgctttggaagtttcaaacgaagtggatgggggttttagttcttcaaggaaaacagacttagtaacccccgacccccatcatactttaatgtgtggaagagacttctccaaaccagtagaggataatatcagtgataaaatatttgggaaatcctatcagagaaagggaagccgccctcacctgaaccatgtgactgaaattataggcacatttattacagaaccacagataacacaagagcagcccttcacaaataaattaaaacgtaagagaagtacatcccttcaacctgaggacttcatcaagaaagcagattcagcaggtcaaaggactcctgacaacataaatcagggaactgacctaatggagccaaatgagcaagcagtgagtactaccagtaactgtcaggagaacaaaatagcaggtagtaatctccagaaagagaaaagcgctcatccaactgaatcattgagaaaggaaccttccacagcaggagccaaatctataagcaacagtgtaagtgatttggaggtagaattaaacgtccacagttcaaaagcacctaagaaaaatctgaggaggaagtctatcaggtgtgctcttccacttgaaccaatcagtagaaatccaagcccacctacttgtgctgagcttcaaatcgatagttgtggtagcagtgaagaaacaaagaaaaaccattccaaccaacagccagccgggcaccttagagagcctcaactcatcgaagacactgaacctgcagcggatgccaagaagaacgagccaaatgaacacataaggaagagacgtgccagcgatgctttcccagaagagaaaaacaaagctggtttattaactagctgttcaagtcctagaaaatctcaagggcctaatcccagccctcagagaacaggaacagagcaacttgaaacacgccaaatgtctgacagtgccaaagaactcggggatcgggtcctaggaggagagcccagtggcaaaactgaccgatctgaggagagcaccagcgtatccttggtacctgacactgactacgacactcagaacagtgtctcagtcctggacgctcacactgtcagatatgcaagaacaggatccgctcagtgtatgactcagtttgtagcaagcgaaaaccccaaggaactcgtccatggctctaacaatgctgggagtggcacagagggtctcaagccccccttgagacacgcgcttaacctctcaaaacctcaaaaggactgtgctcactctgtgccctcaaaggaactgagtccaaaggtgacagctaaaggtaaacaaaaagaacgtcagggacaggaagaatttgaaagtcacgtacaagcagttgcggccacagtgggcttacctgtgccctgtcaagaaggtaagctagctgctgatacaatgtgtgatagaggttgtaggctttgtccatcatctcattacagaagcggggagaatggactcagcgccacaggtaaatcaggaatttcacaaaactcacattttaaacaatcagtttctcccatcaggtcatctataaaaactgacaataggaaacctctgacagagggacgatttgagagacatacatcatcaactgagatggcggtgggaaatgagaaccttcagagtacagtgcacacagttagcctgaataacagaggaaatgcttgtcaagaagccggctcgggcagtattcatgaagtatgttccactggtgactccttcccaggacaactaggtagaaacagagggcctaaggtgaacactgtgcctccattagatagtatgcagcctggtgtctgtcagcaaagtgttcctgtaagtgataagtatcttgaaataaaaaagcaggagggtgaggctgtctgtgcagacttctctccactattctcagaccatcttgagcaatctatgagtggtaaggtttttcaggtttgctctgagacacctgatgacctgctggatgatgttgaaatacagggacatactagctttggtgaaggtgacataatggagagatctgctgtctttaacggaagcatcctgagaagggagtccagtaggagccctagtcctgtaacccatgcatcgaagtctcagagtctccacagagcg": 76, "tgtggcacaaatactcatgccaacttattacagcatgagaacagcagtttattactcactaaagacagaatgaatgtagaaaaggctgaattctgtaataaaagcaaacagcctggcttagcaaggcgccaacagagcagatgggctgaaagtaaggaaacatgtaatgataggcagactcccagcgagaaaaaggtagatgtggatgctgatcccctgtatgggcgaaaagaactgaataagcagaaacctccatgctctgagagtcatagagatacccaagatattccttggataatgctgaatagtagcattcagaaagttaacgagtggttttccagaggtgatgacatattaacttctgatgactcacacgatagggggtctgaattaaatgcattgaaagtttcaaaagaagtagatgaatattctagtttttcagagaagatagacttaatggccattaatcctcatgatactttacaatttgaaagagtccaattgaaaccagcagagagtaacatcaaagataaaatatttgggaaaacctatcataggaaggcaagcctccctaacttgagccacataacccgatttataggagctattgctgcagagcccaagataacacaagagcattccctccaaaataaaataaagcgtaaaagggcatcaggccttcgtcctgaggatttatccaagaaagtagatttgacagttcaaaaaacccctgaaaagataaatcagggaactgaccaaatggagcagaatgatccagtgatgaatattgctaatagtggtcatgagaatgaaacaaaaggtgattgtgttcagaaagagaaaaatgctaatccgacagaatcattgggaaaagaatctttcagaactaaaggcgaacctataagcagcagtataagcaatatggaactagaattaaatattttaaattcaaaagcatctaagaagaatccgaagaggatgtccaccaggcatattcatgcacttgaactaggcagtagaaatccaagcccacctaatcatactgaactacaaattgatagttgttctagcattgaagagatagagaaaataaattctaaccaaaagccaatcagacacaacagaatgcttcaactcacgaaagaaaaagaaaccacaactggagccaaaaagaataagccaaatgaacaaataagtgaaagacatgccagtgatgctttcctagaacttaaaaatgtaactgattttcttcctaaatgttcaagttctgataaacttcaaaaatttaattctagcctgcaaggagaagtagcagagaacctagaaacaattcaagtgtctgatagtaccagggaccctgaagatctggtggtaagtggagaaaagtgtttgcaaactgaaagatctgcagagagtaccggtatttcagtggtacctgatactgattatggcactcaagacagtatctcattactggaagctgacaccctggggaaggcaaaaacagcactaaatcaacatgtgagtcagtatgtagcaattagaaatgccactgaactttcccatggttctaaagacactagaaatgacactgaagattttaaggattcattgagacatgaagttaaccactcgaatccagaaaatgaatgtgcacactccaggttcttagggaaacaaagtccaaaagtcacctttgaatgtagacataaagaaaatcaggggaagaaagagtctaaaaaacatgtgcaggtaattcacacaactgcaggctttcctatagtttgtcagaaagataagccaggtgattatgccaaaggtcaaggagtctctaggctttgtcagtcctctcaggccagaggcaatgaatctgaactcattaattcaaatgaacatgaaatttcacaaaacccagatcaaatgccatcactttctcacatgaagtcatctgttaaaactaaatgtaaggaaaacctgtcagaggaaaagtttgaggaacttacagtgtcacttgaaagaacaatggtaaatgagaacattcaaagtacagtaagcacaattagccacagtaacagagaaaacacttttaaagaagccagctcaagcagtattaatgaagtagggtccagtgatgagaacattcaagcagaagtaggtagaaacagagcacctaaattaaatgctatgctcagattaggtcttatgcaacctgaagtctataagcaaagtcttcctataaccaataaatatcctgaaataaaaagtcaaggaattcgggctgttgatatagacttctctccactaatttcagataacctacaactacctatgaatagttgtgcttcccagatttgttctgagacacctgatgacttgttagatgatgatgaaataaaggaaaataactgctttgctgaaagtgacattaaggaaagatctgctatttttagcaaaactgtccagaaaagagagttcagaaggagccctagccctttagtccatacaagttttgctcagggtcaccaaagaaag": 76, "tgtggcacaaatactcatgccaactcattacagcatgagaacagcagtttattatacactaaagacagaatgaatgtagaaaagactgacttctgtaataaaagcaaacagcctggcttagcaaggagccagcagaacagatgggttgaaactaaggaaacatgtaatgataggcagacttccagcgagaaaaaggtagttctgaatgctgatcccctgaatggaagaataaaactgaataagcagaaacctccatgctctgacagtcctagagattccaaagatattccttggataacacggaatagtagcatacagaaagttaatgagtggttttccagacgtgatgaaacattaacttctgatgtcttacttgatgagaggtctgaatcaaatgtggtagaagttccaaatgaagtagatggatactctggtgcttcagaggaaatagccttaaaggccagtgatcctcatggtgctttaatatgtgaaagagttcactccaaattgatagaaagtaatattgaagataaaatatttgggaaaacatatcggaggaaagcaagcctccctaacttaagccacataactgaaattacaagagcatctgctacagaacctcagataacacaagagtgccccctcacaaataaactaaaacgtaaaagaacatcaggccttcatcctgaggattttatcaagaaaatagatttgacaactcaaaaaacttctgaaaatataattgagggaactgaccaaatagagcagaatggtcatgtgatgaatagttctaatgatggtcatgagaatgaaacaaaaggtgattatgttcagaagaagaaaaatacaaacccaacagaatcattggaaaaagaatctttcagaactaaagttgagtctgtacccaacaacataagcaatgtggaactagaattaaatattcacggttcaaaagcactcaagaagaatctgaggaggaagtccaccaggcatattcatgcacttgaactagtcaatagaaattcaagcccacctaatcatactgaactacaaattgatagttgttccagcagtgaagaactgaaggaaaaaaattctgaccgaatgccagacagacacagcaaaaaacttcagttcgtagaagataaagaatctgcaactggagccaagaagaacatgccaaatgaggcaataaataaaagactttccagtgaagcttttcccgaattaaataacgtacctggtttttttactaatggttcaagttctaataaacgtcaagagtttaatcctagccttcaaggagaagaaatagagaatctacgaacaattcaagtgtctaatagcaccaaagaccccaaaattctaatctttggtgaaggaagaggttcacaaactgatcgatctacagagagtaccagtattttattgggacctgaaacggattatggcactcaagatagtatctcattactggaatctgacatcccagggagggcaaagacagcaccaaaccaacatgcagatctgtgtgcagcaattgaaaaccccagagaacttattcatgattttaaagaaactagaaatgacacagagagctttaaagatccattgagacatgaagttaactcctcagacccagaaaaggaatgtgcacactccaggtccttgataaaacaaagtccaaaagtcactcttgaatgtgaccgaaaaggaaatcagggaaagaaagagtctaacgagcatgtgcaggcagtttatacaactataggctttcctggggtttctgagaaagacaaaccaggagattatgccagatataaagaagtctctaggctttgtcagtcatttcagtctagaagaaatgaaactgagctcactattgcaaataaacttggactttcacaaaacccatatcatatgccatccatttctcccatcaagtcatctgttaaaactatatgtaagaaaaatctgtcagaggaaaagtttgaagaacattcaatattccctgaaagagcaataggaaatgagaccattcaaagtacagtgggcacaattagccaaaataacagagaaagcacttttaaagaaggcagctcaagcggtatttatgaagcaggttccagtggtgaaaacattcaagcagaactaagtagaaacagaggaccaaaattaaatgctgtgcttcagttgggtctcatgcagcctgaagtctatgagcaaagccttcctctaagtaataaacattctgaaataaaaaggcaaggagttcaggctgttaatgcagatgtctctccacaaatttcagataacttagagcaacctatgaacagtaatatttctcaggtttgttctgagacaccggatgacctgttaaatgatgacaaaataaaggacaatatcagctttgatgaaagtggcattcaggaaagatctgctgtttttagcaaaaatgtccagaaaggagaattcagaaggagccctagtcccttagcccatgcaagtttgtctcaaggtcgcccaagaagg": 76, "flexibli": 76, "address": 76, "labelpars": 76, "someth": [76, 82], "latin_to_common": 76, "latin": 76, "homo": 76, "sapien": 76, "pan": 76, "troglodty": 76, "label_pars": 76, "split_with": 76, "abcd": [76, 77, 82, 84], "richlabel": 76, "fasta_data": 76, "gi": 76, "10047090": 76, "np_055147": 76, "muscl": 76, "link": [76, 86, 130], "mnmskqpvsnvraiqaninipmgafrpgagqpprrkectpeveegvpptsdeekkpipgakklpgpavnl": 76, "seiqnikselkyvpkaeq": 76, "10047092": 76, "np_037391": 76, "neuron": 76, "manrgpsyglsrevqekieqkydadlenklvdwiilqcaediehpppgrahfqkwlmdgtvlcklinsli": 76, "ppgqepipkiseskmafkqmeqisqflkaaetygvrttdifqtvdlwegkdmaavqrtlmalgsvavtkd": 76, "locu": [77, 82, 121], "np_003077": [77, 82], "con": [77, 82], "5386": [77, 82], "np_004893": [77, 82], "121351": [77, 82], "4264": [77, 82], "np_005079": [77, 82], "9516594": [77, 82], "9789": [77, 82], "np_005500": [77, 82], "noncon": [77, 82], "np_055852": [77, 82], "10933217": [77, 82], "7090": [77, 82], "locusregionratio": [77, 82], "np_003077con2": [77, 82], "np_004893con121351": [77, 82], "np_005079con9516594": [77, 82], "np_005500noncon0": [77, 82], "np_055852noncon10933217": [77, 82], "pkl": [77, 82], "cerebellumdukednaseseq": [77, 82, 86], "pk": [77, 82, 86], "chr1": [77, 82], "29214": [77, 82], "29566": [77, 82], "0724": [77, 82], "89933": [77, 82], "90118": [77, 82], "0313": [77, 82], "545979": [77, 82], "546193": [77, 82], "0428": [77, 82], "713797": [77, 82], "714639": [77, 82], "3215": [77, 82], "9516595": [77, 82], "np_005079con9516595": [77, 82], "locusratio": [77, 82], "np_0030772": [77, 82], "np_004893121351": [77, 82], "np_0050799516594": [77, 82], "np_0055000": [77, 82], "np_05585210933217": [77, 82], "5386013224378985": [77, 82], "abc": [77, 82, 84], "91011": [77, 82], "cab": [77, 82], "ab": [77, 79, 82, 84, 113], "0a": [77, 82], "3c": [77, 82], "d2d": [77, 82], "parentxlength": [77, 82], "root1": [77, 82], "00004": [77, 82], "abcddata": [77, 82], "x5": [77, 82], "ynone": [77, 82], "recod": [79, 103, 104], "maintain": [79, 84], "protein_with_stop": 79, "abbreviationnumb": 79, "statesmoltyp": 79, "2moltyp": 79, "4moltyp": 79, "21moltyp": 79, "22moltyp": 79, "52moltyp": 79, "256moltyp": 79, "statement": [79, 103, 126], "brca1": [79, 85, 86, 87, 90, 91, 92, 103], "bat": [79, 85, 86, 92], "aggctt": 79, "seq1aggctt": 79, "customis": 79, "mt": 79, "dnagap": 79, "iupac_dna_char": 79, "iupac_dna_ambigu": 79, "iupac_dna_ambiguities_compl": 79, "dnastandardpair": 79, "noneacg": 79, "builtin": [79, 84, 111], "thisisaprqtein": 80, "myprotein": 80, "abglobin_aa": [80, 86, 106], "tr": 81, "temp": 81, "names_nod": 81, "hu": 81, "0311054096183": 81, "0415847131449": 81, "277353608988": 81, "0939768158209": 81, "113211053859": 81, "human_dist": 81, "0726901227632": 81, "3467553610937": 81, "18310641816450002": 81, "2023406562026": 81, "4102925130849": 81, "0382963424874": 81, "0197278502379": 81, "splitlin": 81, "sub_tre": 81, "simple_tree_str": [81, 109], "simple_tre": [81, 109], "tr1": 81, "tr2": 81, "fewer": 81, "tree_str": 81, "tipdist": 81, "perfectli": [81, 104], "08352668213457076": 81, "writabl": 82, "my": [82, 102], "u9": 82, "u6": 82, "float64": 82, "regionratio": 82, "con2": 82, "con121351": 82, "scientif": 82, "5e": 82, "2e": 82, "4e": 82, "08": [82, 103], "np_004893con1": 82, "np_005079con9": 82, "np_005500noncon7": 82, "np_055852noncon1": 82, "neat": 82, "tardigrad": 82, "0425": 82, "wrap_tabl": 82, "namea": 82, "tardigrade0": 82, "04250": 82, "largecon": 82, "r_v": 82, "locusregionratiolargecon": 82, "5386fals": 82, "4264true": 82, "9789true": 82, "0000fals": 82, "7090fals": 82, "42635634111": 82, "978886133": 82, "382703020266491e": 82, "708952725": 82, "dictat": 82, "538601e": 82, "213514e": 82, "516595e": 82, "382703e": 82, "093322e": 82, "chisquar": 82, "tv": 82, "syn": 82, "nsyn": 82, "tstv": 82, "syn3136": 82, "nsyn58138": 82, "6730": 82, "3270": 82, "7488": 82, "0225": 82, "7312": 82, "syn22": 82, "673044": 82, "nsyn66": 82, "3270129": 82, "syn1": 82, "02250": 82, "g_test": 82, "g_independ": 82, "william": 82, "gdfpvalu": 82, "97310": 82, "simpli": [82, 109, 113, 114], "table1": 82, "table2": 82, "data1": 82, "data2": 82, "data1np_003077con2": 82, "data1np_004893con121351": 82, "data1np_005079con9516594": 82, "data1np_005500noncon0": 82, "data1np_055852noncon10933217": 82, "data2np_003077con2": 82, "data2np_004893con121351": 82, "data2np_005079con9516594": 82, "data2np_005500noncon0": 82, "data2np_055852noncon10933217": 82, "20571166": 82, "652796596": 82, "all_numer": 82, "extern": [82, 126, 129], "sub_tabl": 82, "syntax": [82, 114], "big_numer": 82, "math": [82, 84, 111, 113, 126, 129], "keycount": 82, "restrict": [82, 107], "region_typ": 82, "stats_tabl": 82, "right_largecon": 82, "locusregionratioright_largecon": 82, "prefix": 82, "right_": 82, "cartesian": 82, "14sk041": 82, "14sk802": 82, "2920": 82, "id14sk04114sk802": 82, "2920332294": 82, "1606302229": 82, "393141125": 82, "2109138120": 82, "tp": 82, "14sk041332302141138": 82, "14sk802294229125120": 82, "finer": 82, "tex": 82, "htp": 82, "hline": 82, "bf": 82, "ccr": 82, "browser": [82, 86], "bigger": 82, "bgraph": 82, "chromstartendvalu": 82, "11001011": 82, "11011021": 82, "11021031": 82, "11031041": 82, "11041051": 82, "straight_html": 82, "known_format": 82, "stats_tab": 82, "implicitli": 82, "txt": 82, "storag": [83, 84], "union_dict": [83, 84], "bitwis": [83, 84], "__getattr__": [83, 84], "super": [83, 84], "minimis": 84, "lie": 84, "simulatedann": 84, "had": [84, 111], "deviat": 84, "diffomega": 84, "omega_from_": 84, "omega_est": 84, "xinit": 84, "6150": 84, "multidimension": 84, "my_var": 84, "cookbook": [84, 123], "carri": 84, "foo": 84, "__doc__": 84, "is_iter": 84, "can_it": 84, "cannot_it": 84, "is_char": 84, "recursive_flatten": 84, "not_list_tupl": 84, "add_lowercas": 84, "life": 84, "classcheck": 84, "not_okai": 84, "okai": 84, "my_dict": 84, "asasa": 84, "assur": [84, 117], "go": [84, 99, 103, 107, 114, 117], "listandstr": 84, "ab_cd": 84, "isn": 84, "functionwrapp": 84, "0x7ff46f85bee0": 84, "context": 84, "constrainedcontain": 84, "constrainedstr": 84, "constrainedlist": 84, "constraineddict": 84, "cover": [84, 105, 118], "stai": [84, 105], "integr": [84, 129], "light": 84, "constrainterror": 84, "__setitem__": 84, "item_is_valid": 84, "value_mask": 84, "vertebr": [85, 111], "yeast": 85, "mold": 85, "protozoan": 85, "coelenter": 85, "mycoplasma": 85, "spiroplasma": 85, "invertebr": 85, "ciliat": 85, "nuclear": 85, "dasycladacean": 85, "hexamita": 85, "echinoderm": 85, "flatworm": 85, "euplotid": 85, "bacteri": 85, "archaeal": 85, "plant": 85, "plastid": 85, "ascidian": 85, "blepharisma": 85, "macronuclear": 85, "chlorophycean": 85, "trematod": 85, "scenedesmu": 85, "obliquu": 85, "thraustochytrium": 85, "rhabdopleurida": 85, "candid": 85, "sr1": 85, "gracilibacteria": 85, "pachysolen": 85, "tannophilu": 85, "karyorelict": 85, "condylostoma": 85, "mesodinium": 85, "peritrich": 85, "blastocrithidia": 85, "balanophoracea": 85, "cephalodiscida": 85, "idnam": 85, "1standard": 85, "2vertebr": 85, "3yeast": 85, "4mold": 85, "5invertebr": 85, "6ciliat": 85, "9echinoderm": 85, "10euplotid": 85, "11bacteri": 85, "12altern": 85, "13ascidian": 85, "14altern": 85, "15blepharisma": 85, "16chlorophycean": 85, "21trematod": 85, "22scenedesmu": 85, "23thraustochytrium": 85, "24rhabdopleurida": 85, "25candid": 85, "26pachysolen": 85, "27karyorelict": 85, "28condylostoma": 85, "29mesodinium": 85, "30peritrich": 85, "31blastocrithidia": 85, "32balanophoracea": 85, "33cephalodiscida": 85, "nt_seq": 85, "flyingfox": 85, "freetail": 85, "dogfacedtgtggcacaaatactcatgcc": 85, "littlebro": 85, "tombbat": 85, "aa_seq": 85, "cgtnahasslq": 85, "cgtnthanslq": 85, "cgtdthasslq": 85, "dogfacedcgtnthanslqhenssllyt": 85, "alanin": 85, "cystein": 85, "aspart": 85, "glutam": 85, "phenylalanin": 85, "glycin": 85, "histidin": 85, "isoleucin": 85, "lysin": 85, "leucin": 85, "methionin": 85, "asparagin": 85, "prolin": 85, "glutamin": 85, "arginin": 85, "serin": 85, "threonin": 85, "valin": 85, "tryptophan": 85, "tyrosin": 85, "aaiupac": 85, "codecodon": 85, "alanineagct": 85, "cysteinectgt": 85, "aciddgat": 85, "acidegaa": 85, "phenylalaninefttt": 85, "glycinegggt": 85, "histidinehcat": 85, "isoleucineiatt": 85, "lysinekaaa": 85, "leucineltta": 85, "methioninematg": 85, "asparaginenaat": 85, "prolinepcct": 85, "glutamineqcaa": 85, "argininercgt": 85, "serinestct": 85, "threoninetact": 85, "valinevgtt": 85, "tryptophanwtga": 85, "tyrosineytat": 85, "download": [86, 124], "click": [86, 88, 91, 123, 126, 129], "refseq": 86, "refseqs_protein": 86, "inseq": 86, "inseqs_protein": 86, "f9": 86, "tbp": [86, 92], "yet": 87, "fast": [87, 91], "citat": [87, 88, 130], "coevo": 87, "techniqu": [88, 113], "gibb": 88, "mcintyr": 88, "exact": 88, "tp53": 89, "ensembl": [89, 126, 129, 131], "ortholog": [89, 111], "marmoset": 89, "transcript": [89, 92], "get_data_stor": 89, "dp": 89, "remove_track": 89, "left_track": 89, "bottom_track": 89, "highli": 90, "diverg": [90, 130], "pangolin": 90, "dog": 90, "llama": 90, "pig": [90, 104], "cow": [90, 106], "hippo": 90, "spermwhal": 90, "humpbackw": 90, "mole": 90, "pangolincatdogllamapigcowhippospermwhalehumpbackwmol": 90, "0000030000": 90, "pointer": 90, "tgatgtaaggtagtt": 91, "ctggaagggt": 91, "disappear": 91, "factor": 92, "tata": 92, "pwm": 92, "freqarr": 92, "to_freq_arrai": 92, "0797": 92, "3728": 92, "3907": 92, "7943": 92, "0463": 92, "0900": [92, 107], "9049": 92, "9614": 92, "0257": 92, "0771": 92, "9100": 92, "0129": 92, "07970": 92, "37280": 92, "15680": 92, "79430": 92, "11830": 92, "09000": 92, "90490": 92, "96140": 92, "02570": 92, "07710": 92, "91000": 92, "bear": 92, "mind": 92, "render": 92, "scheme": 92, "backend": 93, "excel": 93, "graph": 93, "interact": 93, "ens_tre": [94, 95, 96, 97], "placement": [95, 97], "label_pad": [95, 96], "africanel": [95, 97], "manate": [95, 97], "legendgroup": [95, 97], "afrotheria": [95, 97], "magenta": [95, 97], "show_support": 98, "support_xshift": 98, "support_yshift": 98, "yshift": 98, "xshift": 98, "author": [99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 129], "paradigm": [99, 103], "artifici": 99, "unaligned_aa": 99, "serv": 99, "won": [99, 114, 117, 118], "catherin": 100, "lozupon": [100, 129], "myclust": 100, "test_upgma": 100, "phylo": [101, 114], "nj": 101, "mytre": 101, "test_nj": 101, "4022": 102, "0730": 102, "3487": 102, "3363": 102, "namesdogfacedhowlermonhumanmousenineband": 102, "dogfaced0": 102, "19720": 102, "40220": 102, "07300": 102, "34870": 102, "33630": 102, "mouse0": 102, "ninebande0": 102, "20190": 102, "18650": 102, "18040": 102, "38130": 102, "cpu": [102, 111], "master": [102, 111], "wb": 102, "dump": 102, "sake": 103, "nf": 103, "ii": [103, 107], "iii": [103, 107], "tf": 103, "iv": 103, "cnf": 103, "mprob_model": 103, "overhead": 103, "argument_nam": 103, "argument_valu": 103, "prefac": 103, "optimiser_arg": 103, "6767": 103, "0980": 103, "04": [103, 107, 116, 117], "03": [103, 107, 110, 116, 117], "070": 103, "060": [103, 110, 117], "040": 103, "080": 103, "mle": 103, "nearli": [103, 107], "procedur": [103, 109], "neutral_lnl": 103, "get_log_likelihood": [103, 107, 110, 116], "neutral_nfp": 103, "get_num_free_param": [103, 107, 110, 116], "non_neutral_lnl": 103, "non_neutral_nfp": 103, "6762": 103, "5761": 103, "083": 103, "conduct": [103, 107, 121, 123], "002635763176590749": 103, "surprisingli": 103, "ask": [103, 105, 107], "chimp_human_clade_lnl": 103, "chimp_human_clade_nfp": 103, "028426324904039284": 103, "consum": 103, "recreat": 103, "richer": 103, "previou": 103, "annot_tre": 103, "get_annotated_tre": [103, 110], "omega_ml": 103, "rate_lf": 103, "epsilon": [103, 107], "rate_lnl": 103, "rate_nfp": 103, "6755": 103, "4520": 103, "073": 103, "adaptive0": 103, "0008054431243294037": 103, "classif": [103, 107], "complex": [103, 109, 113, 123], "unfortun": [103, 126, 129], "ugli": 103, "bug": 103, "bin_param": 103, "rate_class_omega": 103, "rate_class_prob": 103, "rate_branch_lf": 103, "6753": 103, "4561": 103, "greg": 104, "caporaso": [104, 129], "detect": [104, 130], "confid": 104, "poorli": 104, "mislead": 104, "coupl": [104, 105], "strategi": 104, "validate_align": 104, "coevolve_pair": 104, "coevolve_pair_funct": 104, "pos1": 104, "pos2": 104, "31127812445913294": 104, "sca": 104, "9805368955362849": 104, "coevolve_posit": 104, "coevolve_position_funct": 104, "81127812": 104, "31127812": 104, "coevolve_align": 104, "coevolve_alignment_funct": 104, "dict_kei": 104, "intermolecular": 104, "consider": 104, "briefli": 104, "chicken": 104, "echidna": 104, "protein1": 104, "weird_db_identifi": 104, "protein2": 104, "aaai": 104, "ctai": 104, "ctcf": 104, "tcf": 104, "12255625": 104, "peter": 105, "maxwel": [105, 129], "aagaagaagacccccaaaaaaaaaattttttttttaaaaaaaaaaaaa": [105, 118], "orig": [105, 118], "fred": 105, "trev": 105, "belong": [105, 107], "origccccc": [105, 118], "ccccctt": [105, 118], "origccccctttttaaaaa": [105, 118], "monoton": 105, "sliceabl": [105, 118], "origccc": [105, 118], "feat": 105, "caagaag": 105, "attach": [105, 110], "detach": 105, "deal": [105, 111], "aaggggaaaacccccaaaaaaaaaattttttttttaaa": 105, "plus_cd": 105, "minus_cd": 105, "ggggccccctttttttttt": 105, "aaaaa": 105, "similarli": 105, "fall": 105, "without_gap": 105, "tcccc": 105, "omiss": 105, "as_one_span": 105, "straddl": 105, "aln_rc": 105, "rc_exon": 105, "all_exon": 105, "coord": 105, "resid": 105, "blue": 105, "frog": 105, "correctli": 105, "tttttggtt": 105, "enter": 105, "ctaaacgtcg": 105, "as_seri": 105, "as_item": 105, "serial": [105, 111], "itemwis": 105, "ctaaa": 105, "aaaaaaaaaa": 105, "tttttttttt": 105, "globin": 106, "substitution_model": [106, 107, 115], "empiricalproteinmatrix": 106, "paml_matrix": 106, "pamlmatrixpars": 106, "rabbit": 106, "goat": 106, "marsupi": 106, "matrix_fil": 106, "half": [106, 121], "white": 106, "empirical_matrix": 106, "empirical_frequ": 106, "unscal": 106, "0785": 106, "0545": 106, "0269": 106, "0972": 106, "0871": 106, "0335": 106, "0495": 106, "0398": 106, "0886": 106, "0336": 106, "0369": 106, "0805": 106, "0854": 106, "0507": 106, "0383": 106, "0696": 106, "0647": 106, "0299": 106, "rabbitedg": 106, "ratedg": 106, "1root0": [106, 107, 110, 116, 117], "cowroot0": 106, "marsupialroot0": 106, "acdefghikl": 106, "08710": 106, "03350": 106, "04690": 106, "04950": 106, "03980": 106, "08860": 106, "03360": 106, "03690": 106, "08050": 106, "mnpqrstvwy": 106, "04040": 106, "05070": 106, "03830": 106, "04090": 106, "06960": 106, "06470": 106, "postul": 107, "assumpt": 107, "question": 107, "throughout": 107, "fact": [107, 117], "tend": 107, "cluster": [107, 108], "priori": 107, "basi": 107, "classifi": [107, 131], "compon": [107, 109, 110, 112, 114, 116], "approxim": 107, "motifchang": 107, "treat_gap": 107, "model_gap": 107, "alias": 107, "lf_one": 107, "lnl_one": 107, "df_one": 107, "5889": [107, 116], "09": [107, 110, 116, 117], "howlermonedg": [107, 110, 116, 117], "mouseedg": [107, 110, 116, 117], "ninebanderoot0": [107, 110, 116, 117], "dogfacedroot0": [107, 110, 116, 117], "bin_submod": 107, "ordered_param": [107, 115], "lf_bin": 107, "lnl_bin": 107, "df_bin": 107, "8739": 107, "rate_shap": 107, "bin0": [107, 115], "bin1": [107, 115], "kapparate_shap": 107, "binbprobsr": [107, 115], "bin00": [107, 115], "bin10": [107, 115], "switch": [107, 110, 129], "almost": 107, "sole": 107, "lf_patch": 107, "lnl_patch": 107, "df_patch": 107, "bin_switch": 107, "bin_switchkapparate_shap": 107, "short": [107, 123], "997883439555153": 107, "1f": 107, "behav": [107, 111], "21st": 107, "8034881154053909": 107, "distinguish": [107, 123], "releas": [107, 125, 130], "silli": 107, "formattedi": 107, "single_kappa": 107, "kappa_bin_submod": 107, "lf_kappa": 107, "arbitrarili": 107, "smaller": [107, 114], "8749": 107, "8958": 107, "binbprobskappa": 107, "slow1": 107, "fast0": 107, "period": [108, 117, 130], "signal": [108, 130], "simplest": [108, 111], "script": [108, 111, 117, 126, 129], "loci": 108, "coevolutionari": 108, "neighbor": 108, "upgma": 108, "toni": 109, "walter": 109, "variou": 109, "dndparser": 109, "exception": 109, "rangenod": 109, "inherit": 109, "complex_tree_str": 109, "363564": 109, "ab294167": 109, "alkalibacterium": 109, "putridalgicola": 109, "0028006": 109, "55874": 109, "ab083411": 109, "marinilactibacillu": 109, "psychrotoleran": 109, "0022089": 109, "40998": 109, "15050": 109, "y10772": 109, "facklamia": 109, "homini": 109, "32304": 109, "132509": 109, "ay707780": 109, "aerococcu": 109, "viridan": 109, "58815": 109, "143063": 109, "ay879307": 109, "abiotrophia": 109, "defectiva": 109, "5807": 109, "83619": 109, "ab042060": 109, "bacillu": 109, "schlegelii": 109, "23569": 109, "03586": 109, "169722": 109, "ab275483": 109, "fibrobact": 109, "succinogen": 109, "38272": 109, "06516": 109, "03492": 109, "14265": 109, "63594": 109, "3589": 109, "m62687": 109, "intestinali": 109, "65866": 109, "314063": 109, "cp001146": 109, "dictyoglomu": 109, "thermophilum": 109, "38791": 109, "32147": 109, "276579": 109, "eu652053": 109, "thermu": 109, "scotoductu": 109, "57336": 109, "complex_tre": 109, "a_nod": 109, "wish": 109, "previous": 109, "unbranch": 109, "With": 109, "realist": 109, "manner": 109, "genu": 109, "suppress": 109, "ungainli": 109, "suppos": 109, "tips_to_delet": 109, "aerococcus_index": 109, "prevent": 109, "influenc": 110, "toolkit": [110, 129], "earli": 110, "cours": 110, "nonsens": 110, "8636": [110, 117], "8632": 110, "033": 110, "090": [110, 117], "sq": 110, "089238556654891": 110, "23163811517796853": 110, "homologs1": 111, "solv": [111, 123], "adopt": 111, "helper": 111, "worker": 111, "amongst": 111, "gain": 111, "stipul": 111, "prove": 111, "ineffici": 111, "concurr": [111, 129], "futur": [111, 129], "par_kw": 111, "undertaken": 111, "max_work": 111, "use_mpi": 111, "prime": 111, "chunk": 111, "is_prim": 111, "broken": 111, "get_rank": 111, "rank": 111, "sqrt_n": 111, "floor": 111, "112272535095293": 111, "112582705942171": 111, "115280095190773": 111, "115797848077099": 111, "117450548693743": 111, "993960000099397": 111, "world": 111, "On": 111, "mpi4pi": [111, 129], "tool": [111, 122, 127, 130, 131], "openmpi": 111, "conda": 111, "homebrew": 111, "prefer": [111, 124], "manag": [111, 131], "pip": [111, 124], "supercomput": 111, "facil": 111, "submit": 111, "job": 111, "queu": 111, "pb": 111, "schedul": 111, "resourc": 111, "ram": 111, "vari": 111, "experi": [111, 130], "care": 111, "bash": 111, "pbs_ncpu": 111, "stdout": 111, "mpiexec": 111, "pbs_cpu": 111, "migrat": 111, "runtimeerror": 111, "postprocess": 111, "__name__": 111, "__main__": 111, "readthedoc": 111, "stabl": 111, "architectur": 112, "properli": 112, "assembl": 112, "create_alt_funct": 112, "create_null_funct": 112, "howler": [112, 116], "monkei": [112, 116], "set_local_clock": [112, 116], "estimateprob": 112, "estimatep": 112, "set_num_repl": 112, "get_estimated_prob": 112, "get_observed_lnl": 112, "8751": [112, 116], "julien": [113, 130], "epp": [113, 130], "hua": [113, 130], "ying": [113, 129, 130], "scenario": 113, "nois": 113, "arang": 113, "randn": 113, "nse": 113, "convolv": 113, "exp": 113, "sig": 113, "sin": 113, "pi": 113, "dft": 113, "pwr": 113, "04081633": 113, "08333333": 113, "12765957": 113, "17391304": 113, "22222222": 113, "27272727": 113, "3255814": 113, "38095238": 113, "43902439": 113, "56410256": 113, "63157895": 113, "7027027": 113, "77777778": 113, "85714286": 113, "94117647": 113, "03030303": 113, "22580645": 113, "33333333": 113, "44827586": 113, "57142857": 113, "7037037": 113, "84615385": 113, "16666667": 113, "34782609": 113, "54545455": 113, "76190476": 113, "26315789": 113, "55555556": 113, "88235294": 113, "66666667": 113, "14285714": 113, "69230769": 113, "09090909": 113, "11111111": 113, "28571429": 113, "06015801": 113, "00000000e": 113, "00j": 113, "74686707": 113, "93971914e": 113, "02j": 113, "36784793": 113, "66370366e": 113, "04384413": 113, "86970840e": 113, "54473269": 113, "43777386e": 113, "28522968": 113, "33602932e": 113, "01j": 113, "09908167": 113, "09083592e": 113, "17082184": 113, "71376271e": 113, "89062721": 113, "28548281e": 113, "7963791": 113, "10035336e": 113, "01840271": 113, "80492960e": 113, "88651578": 113, "41151331e": 113, "19530165": 113, "51775974e": 113, "15022781": 113, "86446405e": 113, "08988438": 113, "80200034e": 113, "43529315": 113, "96947078e": 113, "02022101": 113, "21803410e": 113, "85047145": 113, "15731607e": 113, "43688846": 113, "25736906e": 113, "24122185": 113, "99636684e": 113, "07237075": 113, "52126090e": 113, "82213276": 113, "00931516e": 113, "13867235": 113, "81517725e": 113, "49837198": 113, "77574035e": 113, "46785187": 113, "22595745e": 113, "11562242": 113, "49254299e": 113, "1923063": 113, "71044818e": 113, "13909144": 113, "13690934e": 113, "25347752": 113, "74139986e": 113, "31153602": 113, "31846596e": 113, "40472419": 113, "65748222e": 113, "20432603": 113, "45226487e": 113, "7243685": 113, "04775797e": 113, "1815508": 113, "80212265e": 113, "28830449": 113, "72824059e": 113, "06062707": 113, "52301510e": 113, "02841505": 113, "00362778e": 113, "54158937": 113, "05374577e": 113, "79192147": 113, "74568790e": 113, "37803411": 113, "15026155e": 113, "9707734": 113, "07593113e": 113, "00458776": 113, "01619914e": 113, "72674876": 113, "73631881e": 113, "03109358": 113, "27252853e": 113, "07118569": 113, "66787987e": 113, "3787156": 113, "78325775e": 113, "74358583": 113, "70454093e": 113, "09857348": 113, "64330816e": 113, "58344276": 113, "46465366e": 113, "46042799": 113, "39206718e": 113, "max_pwr": 113, "max_period": 113, "768593471914606": 113, "auto_corr": 113, "63366075e": 113, "47309007e": 113, "99310414e": 113, "94779387e": 113, "02111589e": 113, "59402206e": 113, "38935958e": 113, "78082033e": 113, "67917301e": 113, "80558458e": 113, "50298023e": 113, "31498874e": 113, "58750562e": 113, "44274029e": 113, "59442269e": 113, "42494835e": 113, "23571124e": 113, "37998464e": 113, "19246214e": 113, "40423905e": 113, "37305496e": 113, "13403096e": 113, "11639561e": 113, "90121298e": 113, "19165151e": 113, "29071920e": 113, "03347404e": 113, "88866727e": 113, "61923373e": 113, "95836846e": 113, "19272046e": 113, "60842692e": 113, "70680982e": 113, "36897636e": 113, "74936245e": 113, "12432553e": 113, "85493706e": 113, "50657815e": 113, "12033008e": 113, "55562690e": 113, "03888477e": 113, "05790735e": 113, "29155248e": 113, "87540424e": 113, "35507983e": 113, "80308843e": 113, "14561492e": 113, "05380855e": 113, "57732301e": 113, "10932490e": 113, "86322889e": 113, "14559534e": 113, "80666743e": 113, "27850512e": 113, "87271137e": 113, "81441259e": 113, "36167153e": 113, "61436543e": 113, "02975923e": 113, "66247570e": 113, "05138114e": 113, "63658173e": 113, "41895898e": 113, "78396501e": 113, "46634150e": 113, "32607996e": 113, "90027551e": 113, "21450065e": 113, "54316580e": 113, "27121176e": 113, "63814161e": 113, "03866397e": 113, "82623015e": 113, "24702344e": 113, "03525898e": 113, "73098658e": 113, "24573472e": 113, "60152097e": 113, "58897479e": 113, "92571369e": 113, "56836331e": 113, "61934286e": 113, "69234791e": 113, "21888050e": 113, "98178529e": 113, "74044320e": 113, "40442056e": 113, "60242842e": 113, "64669169e": 113, "90300288e": 113, "05204196e": 113, "23056837e": 113, "50585679e": 113, "11958968e": 113, "84011202e": 113, "16394993e": 113, "59262996e": 113, "29507813e": 113, "791730073275666": 113, "atcgttgggaccggttcaagttttggaactcgcaaggggtgaatggtcttcgtctaacgctgg": 113, "ggaaccctgaatcgttgtaacgctggggtctttaaccgttctaatttaacgctggggggttct": 113, "aatttttaaccgcggaattgcgtc": 113, "seqtosymbol": 113, "seq_to_symbol": 113, "ipdft": 113, "22082108e": 113, "48683298e": 113, "74585634e": 113, "46410162e": 113, "20674669e": 113, "13171488e": 113, "21157382e": 113, "24998151e": 113, "17918725e": 113, "83176087e": 113, "68973168e": 113, "30390506e": 113, "77601816e": 113, "39581554e": 113, "80089521e": 113, "28140014e": 113, "59887450e": 113, "59868328e": 113, "51990117e": 113, "87861072e": 113, "21002402e": 113, "99221455e": 113, "02839146e": 113, "56255506e": 113, "06605556e": 113, "06350498e": 113, "87505455e": 113, "75521377e": 113, "58223742e": 113, "57383339e": 113, "86043328e": 113, "48856222e": 113, "41967659e": 113, "54831380e": 113, "74584888e": 113, "89930756e": 113, "92786864e": 113, "78419759e": 113, "45019553e": 113, "93168494e": 113, "25398249e": 113, "46051662e": 113, "62061706e": 113, "86912424e": 113, "51346882e": 113, "83960376e": 113, "57129507e": 113, "40313085e": 113, "21317980e": 113, "95053395e": 113, "58947522e": 113, "11597773e": 113, "52293480e": 113, "80798765e": 113, "97227258e": 113, "01955788e": 113, "95558284e": 113, "78752487e": 113, "52356140e": 113, "17250947e": 113, "74353209e": 113, "24590403e": 113, "68883280e": 113, "08133521e": 113, "43218310e": 113, "74997407e": 113, "04355896e": 113, "32410691e": 113, "22045261e": 113, "65309295e": 113, "00750601e": 113, "73887675e": 113, "47484570e": 113, "20342519e": 113, "91921485e": 113, "61856189e": 113, "29863885e": 113, "95716246e": 113, "59227384e": 113, "20247125e": 113, "78656372e": 113, "34363454e": 113, "87301027e": 113, "37423335e": 113, "84703756e": 113, "02913256e": 113, "07071489e": 113, "10946887e": 113, "14542396e": 113, "17861941e": 113, "20910287e": 113, "23692910e": 113, "26215890e": 113, "28485807e": 113, "30509645e": 113, "32294720e": 113, "33848600e": 113, "35179043e": 113, "36293943e": 113, "37201278e": 113, "37909065e": 113, "38425325e": 113, "38758049e": 113, "38915172e": 113, "38904543e": 113, "38733912e": 113, "38410910e": 113, "37943034e": 113, "37337637e": 113, "36601922e": 113, "35742932e": 113, "34767546e": 113, "33682480e": 113, "32494280e": 113, "31209329e": 113, "29833845e": 113, "28373882e": 113, "26835338e": 113, "25223958e": 113, "23545340e": 113, "21804940e": 113, "20008083e": 113, "18159967e": 113, "16265675e": 113, "14330180e": 113, "12358361e": 113, "10355008e": 113, "08324839e": 113, "06272504e": 113, "04202606e": 113, "02119707e": 113, "00028347e": 113, "79330530e": 113, "58383576e": 113, "37488120e": 113, "16690010e": 113, "96035593e": 113, "75571856e": 113, "55346580e": 113, "35408477e": 113, "15807318e": 113, "96594040e": 113, "77820828e": 113, "59541162e": 113, "41809819e": 113, "24682812e": 113, "08217267e": 113, "hybrid": 113, "54290319e": 113, "60000000e": 113, "04355163e": 113, "07127071e": 113, "07846097e": 113, "88607202e": 113, "89220041e": 113, "48101672e": 113, "62499076e": 113, "90751235e": 113, "71493695e": 113, "02075851e": 113, "07351455e": 113, "62081453e": 113, "82080569e": 113, "12560056e": 113, "91921215e": 113, "02238814e": 113, "56647179e": 113, "54701681e": 113, "69299309e": 113, "91987402e": 113, "65004405e": 113, "33027778e": 113, "50803983e": 113, "88754909e": 113, "50208551e": 113, "30756620e": 113, "60168337e": 113, "44647661e": 113, "93970600e": 113, "43865104e": 113, "02209421e": 113, "53958454e": 113, "96393432e": 113, "89209880e": 113, "27011732e": 113, "47950548e": 113, "50796497e": 113, "03815499e": 113, "57237024e": 113, "34562120e": 113, "05387527e": 113, "28772263e": 113, "28564753e": 113, "04187851e": 113, "37054384e": 113, "46537377e": 113, "35368513e": 113, "44639109e": 113, "21834784e": 113, "40399383e": 113, "48613629e": 113, "80782315e": 113, "47779142e": 113, "75126741e": 113, "91413684e": 113, "85175284e": 113, "29741283e": 113, "62295201e": 113, "34441640e": 113, "63253408e": 113, "37287324e": 113, "64998444e": 113, "17423584e": 113, "97232072e": 113, "86613578e": 113, "82654647e": 113, "04503603e": 113, "69438374e": 113, "89938281e": 113, "28137008e": 113, "95960742e": 113, "38556857e": 113, "64931942e": 113, "97858123e": 113, "29613692e": 113, "16074137e": 113, "55731274e": 113, "17181727e": 113, "32380616e": 113, "62454001e": 113, "90822254e": 113, "17479537e": 113, "42428932e": 113, "43787546e": 113, "43627188e": 113, "53585824e": 113, "04551433e": 113, "94771639e": 113, "52431781e": 113, "13943227e": 113, "61019291e": 113, "75895216e": 113, "17763660e": 113, "48805111e": 113, "75818129e": 113, "15275974e": 113, "93790246e": 113, "94575858e": 113, "94522714e": 113, "32403473e": 113, "92054550e": 113, "89715168e": 113, "12012911e": 113, "09805767e": 113, "07228795e": 113, "69535092e": 113, "67364959e": 113, "97482840e": 113, "62418659e": 113, "56747763e": 113, "53670676e": 113, "75671874e": 113, "94181358e": 113, "43609880e": 113, "40016166e": 113, "36319935e": 113, "48797024e": 113, "42990539e": 113, "24716721e": 113, "31065025e": 113, "goertzel": 113, "7685934719146": 113, "report": 113, "llim": 113, "period5": 113, "ipdft_pow": 113, "round": [113, 114], "486832980505154": 113, "alon": 113, "35516278555667": 113, "precomput": 113, "goertzel_calc": 113, "blockwise_bootstrap": 113, "contigu": 113, "num_rep": 113, "obs_stat": 113, "notion": 113, "quick": 113, "front": 113, "accordingli": 113, "hybrid_calcul": 113, "convertor": 113, "rb": 114, "extrem": 114, "exercis": 114, "ls_distance_matrix": 114, "ls_pairwise_matrix": 114, "hereaft": 114, "asaa": 114, "pick": 114, "graft": 114, "inspect": 114, "wls_stat": 114, "3308768548934439e": 114, "0015588630350439783": 114, "t1": 114, "t2": 114, "jackrabbit": 114, "treeshrew": 114, "literatur": 114, "seek": 114, "query_tre": 114, "evaluate_tre": 114, "893810255506769": 114, "evaluate_topologi": 114, "0084": 114, "mirror": 114, "ml": 114, "among": 115, "recov": 115, "equal_motif_prob": 115, "sequence_length": [115, 120], "10000": [115, 120], "scratch": 115, "densiti": 115, "decreas": 116, "chanc": 116, "captur": 116, "9425": 116, "7071645286014245": 116, "09989841175349772": 116, "facilit": 117, "remaind": 117, "attain": 117, "9489": 117, "9506": 117, "031": 117, "041": 117, "022": 117, "092": 117, "readabl": 117, "explicit": 117, "9424": 117, "8896": 117, "042": 117, "091": 117, "9442": 117, "4271": 117, "032": 117, "combo": 117, "gradual": 117, "8640": 117, "9290": 117, "921815649841181": 117, "8639": 117, "7171": 117, "8638": 117, "9572": 117, "portal": 118, "genbank": 118, "specialis": 118, "thought": 118, "orig2": 118, "receiv": 118, "aagaagaagaaaaaaaaaaatttttaaaaaaaa": 118, "9537": 119, "9589": 119, "macaqueroot0": 119, "chimproot0": 119, "24390": 119, "25810": 119, "24280": 119, "four": 120, "taxon": 120, "set_constant_length": 120, "set_motif_prob": 120, "4000": 120, "3000": 120, "aroot0": 120, "broot0": 120, "cedg": 120, "dedg": 120, "0root0": 120, "20000": 120, "30000": 120, "ttttcaatttc": 120, "attttagtcgg": 120, "tgtccaatata": 120, "attttcaatttctgggcccaagggcgctcgtttctggtgatttatctttcggtgcttgggg": 120, "ba": 120, "ttct": 120, "atgt": 120, "piec": 121, "recalcul": 121, "loci_nam": 121, "mod": 121, "9168": 121, "3331": 121, "kappalength": 121, "locusacgt": 121, "half0": 121, "all_lnl": 121, "all_nfp": 121, "9167": 121, "locuskappa": 121, "half4": 121, "half3": 121, "each_lnl": 121, "each_nfp": 121, "fly": 121, "lrdfp": 121, "5910": 121, "discov": [122, 127], "pleas": [122, 127], "ticket": [122, 127], "cite": [122, 127], "knight": [122, 127, 129, 130], "r171": [122, 127, 129], "acknowledg": [122, 127, 129], "provis": [122, 127], "wingwar": [122, 127], "licens": [122, 127, 130], "profession": [122, 127], "Their": [122, 127], "commit": [122, 127], "decad": [122, 127, 129], "scienc": [122, 127], "greatli": [122, 127], "appreci": [122, 127], "port": [122, 127], "pycog": [122, 127, 129], "wing": [122, 127], "refactor": [122, 127], "framework": 123, "anim": 123, "recip": 123, "tutori": 123, "api": [123, 126, 129, 131], "imag": [124, 130], "orca": 124, "dev": 124, "git": 124, "egg": 124, "bleed": 124, "speak": 124, "jupyterlab": 124, "particularli": 124, "c3": 124, "activ": 124, "instruct": 124, "pipi": 124, "bsd": [125, 130], "incorpor": 125, "emphasis": 126, "cogent": [126, 129], "pyevolv": [126, 129], "isort": 126, "rationalis": 126, "experiment": [126, 129], "rewrit": [126, 129], "massiv": [126, 129], "indirectli": [126, 129], "virtu": [126, 129], "older": [126, 129], "repositori": [126, 129], "histori": 126, "3rd": [126, 129], "parti": [126, 129], "burrito": [126, 129], "focuss": [126, 129, 130], "ensembldb3": [126, 129, 131], "eutil": [126, 129], "biocommon": [126, 129], "struct": [126, 129], "3d": [126, 129], "seqsim": [126, 129], "unifrac": [126, 129], "microbiom": [126, 129], "scikit": [126, 129], "bio": [126, 129], "motiv": 129, "grate": 129, "multitud": 129, "contribut": [129, 130], "year": 129, "co": 129, "public": 129, "lab": 129, "modernis": 129, "tqdm": 129, "tox": 129, "pytest": 129, "calendar": 129, "multpl": 129, "amd": 129, "butterfield": 129, "vedagiri": 129, "lang": 129, "lawrenc": 129, "wakefield": 129, "isaev": 129, "bmc": [129, 130], "www": [129, 130], "nlm": [129, 130], "nih": [129, 130], "gov": [129, 130], "pubm": [129, 130], "14706121": 129, "birmingham": 129, "carn": 129, "easton": 129, "eaton": 129, "hamadi": 129, "liu": 129, "mcdonald": 129, "robeson": 129, "sammut": 129, "smit": 129, "widmann": 129, "wikman": 129, "wilson": 129, "17708774": 129, "matur": 130, "endeavour": 130, "hope": 130, "companion": 130, "repo": 130, "anyon": 130, "novel": 130, "invent": 130, "undertak": 130, "exploratori": 130, "suit": 130, "galleri": 130, "notabl": 130, "barrier": 130, "comfort": 130, "benjamin": 130, "von": 130, "bing": 130, "rongli": 130, "systemat": 130, "25503772": 130, "overestim": 130, "28175284": 130, "helen": 130, "simon": 130, "19815689": 130, "harold": 130, "schranz": 130, "rob": 130, "patholog": 130, "pathogen": 130, "19099591": 130, "klara": 130, "verbyla": 130, "anuj": 130, "pahwa": 130, "yunli": 130, "shao": 130, "plo": 130, "ONE": 130, "e69187": 130, "23935949": 130, "fragment": 130, "21527008": 130, "bellani": 130, "proc": 130, "ieee": 130, "workshop": 130, "ieeexplor": 130, "6507731": 130, "pr": 131, "mysql": 131, "homologsampl": 131, "replat": 131, "mutationmotif": 131, "spectra": 131, "mutationorigin": 131, "learn": 131, "predict": 131, "geneticdist": 131, "distanxc": 131, "darwinian": 131}, "objects": {"cogent3.__init__": [[1, 0, 1, "", "available_apps"], [2, 0, 1, "", "available_codes"], [3, 0, 1, "", "available_models"], [4, 0, 1, "", "available_moltypes"], [5, 0, 1, "", "get_code"], [6, 0, 1, "", "get_model"], [7, 0, 1, "", "get_moltype"], [8, 0, 1, "", "load_aligned_seqs"], [9, 0, 1, "", "load_delimited"], [10, 0, 1, "", "load_seq"], [11, 0, 1, "", "load_table"], [12, 0, 1, "", "load_tree"], [13, 0, 1, "", "load_unaligned_seqs"], [14, 0, 1, "", "make_aligned_seqs"], [15, 0, 1, "", "make_seq"], [16, 0, 1, "", "make_table"], [17, 0, 1, "", "make_tree"], [18, 0, 1, "", "make_unaligned_seqs"]], "cogent3.app.composable": [[25, 0, 1, "", "define_app"]], "cogent3.core.alignment": [[20, 1, 1, "", "Alignment"], [21, 1, 1, "", "ArrayAlignment"], [22, 1, 1, "", "SequenceCollection"]], "cogent3.core.alignment.Alignment": [[20, 2, 1, "", "add_annotation"], [20, 2, 1, "", "add_feature"], [20, 2, 1, "", "add_from_ref_aln"], [20, 2, 1, "", "add_seqs"], [20, 2, 1, "", "alignment_quality"], [20, 2, 1, "", "annotate_from_gff"], [20, 3, 1, "", "annotations"], [20, 2, 1, "", "apply_pssm"], [20, 2, 1, "", "attach_annotations"], [20, 2, 1, "", "clear_annotations"], [20, 2, 1, "", "coevolution"], [20, 2, 1, "", "copy"], [20, 2, 1, "", "copy_annotations"], [20, 2, 1, "", "count_gaps_per_pos"], [20, 2, 1, "", "count_gaps_per_seq"], [20, 2, 1, "", "counts"], [20, 2, 1, "", "counts_per_pos"], [20, 2, 1, "", "counts_per_seq"], [20, 2, 1, "", "deepcopy"], [20, 3, 1, "", "default_gap"], [20, 2, 1, "", "degap"], [20, 2, 1, "", "detach_annotations"], [20, 2, 1, "", "distance_matrix"], [20, 2, 1, "", "dotplot"], [20, 2, 1, "", "entropy_per_pos"], [20, 2, 1, "", "entropy_per_seq"], [20, 2, 1, "", "filtered"], [20, 3, 1, "", "gap_chars"], [20, 2, 1, "", "gapped_by_map"], [20, 2, 1, "", "get_ambiguous_positions"], [20, 2, 1, "", "get_annotations_from_any_seq"], [20, 2, 1, "", "get_annotations_from_seq"], [20, 2, 1, "", "get_annotations_matching"], [20, 2, 1, "", "get_by_annotation"], [20, 2, 1, "", "get_by_seq_annotation"], [20, 2, 1, "", "get_degapped_relative_to"], [20, 2, 1, "", "get_drawable"], [20, 2, 1, "", "get_drawables"], [20, 2, 1, "", "get_gap_array"], [20, 2, 1, "", "get_gapped_seq"], [20, 2, 1, "", "get_identical_sets"], [20, 2, 1, "", "get_lengths"], [20, 2, 1, "", "get_motif_probs"], [20, 2, 1, "", "get_position_indices"], [20, 2, 1, "", "get_projected_annotations"], [20, 2, 1, "", "get_region_covering_all"], [20, 2, 1, "", "get_seq"], [20, 2, 1, "", "get_seq_indices"], [20, 2, 1, "", "get_similar"], [20, 2, 1, "", "get_translation"], [20, 2, 1, "", "has_terminal_stops"], [20, 2, 1, "", "information_plot"], [20, 3, 1, "", "is_array"], [20, 2, 1, "", "is_ragged"], [20, 2, 1, "", "iter_positions"], [20, 2, 1, "", "iter_selected"], [20, 2, 1, "", "iter_seqs"], [20, 2, 1, "", "iupac_consensus"], [20, 2, 1, "", "majority_consensus"], [20, 2, 1, "", "matching_ref"], [20, 3, 1, "", "moltype"], [20, 2, 1, "", "no_degenerates"], [20, 4, 1, "", "num_seqs"], [20, 2, 1, "", "omit_bad_seqs"], [20, 2, 1, "", "omit_gap_pos"], [20, 2, 1, "", "omit_gap_runs"], [20, 2, 1, "", "omit_gap_seqs"], [20, 2, 1, "", "pad_seqs"], [20, 4, 1, "", "positions"], [20, 2, 1, "", "probs_per_pos"], [20, 2, 1, "", "probs_per_seq"], [20, 2, 1, "", "project_annotation"], [20, 2, 1, "", "quick_tree"], [20, 2, 1, "", "rc"], [20, 2, 1, "", "rename_seqs"], [20, 2, 1, "", "replace_seqs"], [20, 2, 1, "", "reverse_complement"], [20, 2, 1, "", "sample"], [20, 2, 1, "", "seqlogo"], [20, 4, 1, "", "seqs"], [20, 2, 1, "", "set_repr_policy"], [20, 2, 1, "", "sliding_windows"], [20, 2, 1, "", "strand_symmetry"], [20, 2, 1, "", "take_positions"], [20, 2, 1, "", "take_positions_if"], [20, 2, 1, "", "take_seqs"], [20, 2, 1, "", "take_seqs_if"], [20, 2, 1, "", "to_dict"], [20, 2, 1, "", "to_dna"], [20, 2, 1, "", "to_fasta"], [20, 2, 1, "", "to_html"], [20, 2, 1, "", "to_json"], [20, 2, 1, "", "to_moltype"], [20, 2, 1, "", "to_nexus"], [20, 2, 1, "", "to_phylip"], [20, 2, 1, "", "to_pretty"], [20, 2, 1, "", "to_protein"], [20, 2, 1, "", "to_rich_dict"], [20, 2, 1, "", "to_rna"], [20, 2, 1, "", "to_type"], [20, 2, 1, "", "trim_stop_codons"], [20, 2, 1, "", "variable_positions"], [20, 2, 1, "", "with_gaps_from"], [20, 2, 1, "", "with_masked_annotations"], [20, 2, 1, "", "with_modified_termini"], [20, 2, 1, "", "write"]], "cogent3.core.alignment.ArrayAlignment": [[21, 2, 1, "", "add_from_ref_aln"], [21, 2, 1, "", "add_seqs"], [21, 2, 1, "", "alignment_quality"], [21, 3, 1, "", "alphabet"], [21, 2, 1, "", "apply_pssm"], [21, 2, 1, "", "coevolution"], [21, 2, 1, "", "copy"], [21, 2, 1, "", "count_gaps_per_pos"], [21, 2, 1, "", "count_gaps_per_seq"], [21, 2, 1, "", "counts"], [21, 2, 1, "", "counts_per_pos"], [21, 2, 1, "", "counts_per_seq"], [21, 2, 1, "", "deepcopy"], [21, 3, 1, "", "default_gap"], [21, 2, 1, "", "degap"], [21, 2, 1, "", "distance_matrix"], [21, 2, 1, "", "dotplot"], [21, 2, 1, "", "entropy_per_pos"], [21, 2, 1, "", "entropy_per_seq"], [21, 2, 1, "", "filtered"], [21, 3, 1, "", "gap_chars"], [21, 2, 1, "", "get_ambiguous_positions"], [21, 2, 1, "", "get_degapped_relative_to"], [21, 2, 1, "", "get_gap_array"], [21, 2, 1, "", "get_gapped_seq"], [21, 2, 1, "", "get_identical_sets"], [21, 2, 1, "", "get_lengths"], [21, 2, 1, "", "get_motif_probs"], [21, 2, 1, "", "get_position_indices"], [21, 2, 1, "", "get_seq"], [21, 2, 1, "", "get_seq_indices"], [21, 2, 1, "", "get_similar"], [21, 2, 1, "", "get_sub_alignment"], [21, 2, 1, "", "get_translation"], [21, 2, 1, "", "has_terminal_stops"], [21, 2, 1, "", "information_plot"], [21, 3, 1, "", "is_array"], [21, 2, 1, "", "is_ragged"], [21, 2, 1, "", "iter_positions"], [21, 2, 1, "", "iter_selected"], [21, 2, 1, "", "iter_seqs"], [21, 2, 1, "", "iupac_consensus"], [21, 2, 1, "", "majority_consensus"], [21, 2, 1, "", "matching_ref"], [21, 3, 1, "", "moltype"], [21, 4, 1, "", "named_seqs"], [21, 2, 1, "", "no_degenerates"], [21, 4, 1, "", "num_seqs"], [21, 2, 1, "", "omit_bad_seqs"], [21, 2, 1, "", "omit_gap_pos"], [21, 2, 1, "", "omit_gap_runs"], [21, 2, 1, "", "omit_gap_seqs"], [21, 2, 1, "", "pad_seqs"], [21, 4, 1, "", "positions"], [21, 2, 1, "", "probs_per_pos"], [21, 2, 1, "", "probs_per_seq"], [21, 2, 1, "", "quick_tree"], [21, 2, 1, "", "rc"], [21, 2, 1, "", "rename_seqs"], [21, 2, 1, "", "replace_seqs"], [21, 2, 1, "", "reverse_complement"], [21, 2, 1, "", "sample"], [21, 2, 1, "", "seqlogo"], [21, 4, 1, "", "seqs"], [21, 2, 1, "", "set_repr_policy"], [21, 2, 1, "", "sliding_windows"], [21, 2, 1, "", "strand_symmetry"], [21, 2, 1, "", "take_positions"], [21, 2, 1, "", "take_positions_if"], [21, 2, 1, "", "take_seqs"], [21, 2, 1, "", "take_seqs_if"], [21, 2, 1, "", "to_dict"], [21, 2, 1, "", "to_dna"], [21, 2, 1, "", "to_fasta"], [21, 2, 1, "", "to_html"], [21, 2, 1, "", "to_json"], [21, 2, 1, "", "to_moltype"], [21, 2, 1, "", "to_nexus"], [21, 2, 1, "", "to_phylip"], [21, 2, 1, "", "to_pretty"], [21, 2, 1, "", "to_protein"], [21, 2, 1, "", "to_rich_dict"], [21, 2, 1, "", "to_rna"], [21, 2, 1, "", "to_type"], [21, 2, 1, "", "trim_stop_codons"], [21, 2, 1, "", "variable_positions"], [21, 2, 1, "", "with_modified_termini"], [21, 2, 1, "", "write"]], "cogent3.core.alignment.SequenceCollection": [[22, 2, 1, "", "add_seqs"], [22, 2, 1, "", "annotate_from_gff"], [22, 2, 1, "", "apply_pssm"], [22, 2, 1, "", "copy"], [22, 2, 1, "", "copy_annotations"], [22, 2, 1, "", "counts"], [22, 2, 1, "", "counts_per_seq"], [22, 2, 1, "", "deepcopy"], [22, 2, 1, "", "degap"], [22, 2, 1, "", "dotplot"], [22, 2, 1, "", "entropy_per_seq"], [22, 2, 1, "", "get_ambiguous_positions"], [22, 2, 1, "", "get_identical_sets"], [22, 2, 1, "", "get_lengths"], [22, 2, 1, "", "get_motif_probs"], [22, 2, 1, "", "get_seq"], [22, 2, 1, "", "get_seq_indices"], [22, 2, 1, "", "get_similar"], [22, 2, 1, "", "get_translation"], [22, 2, 1, "", "has_terminal_stops"], [22, 3, 1, "", "is_array"], [22, 2, 1, "", "is_ragged"], [22, 2, 1, "", "iter_selected"], [22, 2, 1, "", "iter_seqs"], [22, 3, 1, "", "moltype"], [22, 4, 1, "", "num_seqs"], [22, 2, 1, "", "omit_gap_runs"], [22, 2, 1, "", "omit_gap_seqs"], [22, 2, 1, "", "pad_seqs"], [22, 2, 1, "", "probs_per_seq"], [22, 2, 1, "", "rc"], [22, 2, 1, "", "rename_seqs"], [22, 2, 1, "", "reverse_complement"], [22, 4, 1, "", "seqs"], [22, 2, 1, "", "set_repr_policy"], [22, 2, 1, "", "strand_symmetry"], [22, 2, 1, "", "take_seqs"], [22, 2, 1, "", "take_seqs_if"], [22, 2, 1, "", "to_dict"], [22, 2, 1, "", "to_dna"], [22, 2, 1, "", "to_fasta"], [22, 2, 1, "", "to_json"], [22, 2, 1, "", "to_moltype"], [22, 2, 1, "", "to_nexus"], [22, 2, 1, "", "to_phylip"], [22, 2, 1, "", "to_protein"], [22, 2, 1, "", "to_rich_dict"], [22, 2, 1, "", "to_rna"], [22, 2, 1, "", "trim_stop_codons"], [22, 2, 1, "", "with_modified_termini"], [22, 2, 1, "", "write"]], "cogent3.core.alphabet": [[24, 1, 1, "", "Alphabet"]], "cogent3.core.alphabet.Alphabet": [[24, 5, 1, "", "AlphabetError"], [24, 4, 1, "", "Triples"], [24, 2, 1, "", "adapt_motif_probs"], [24, 2, 1, "", "count"], [24, 2, 1, "", "counts"], [24, 2, 1, "", "from_indices"], [24, 2, 1, "", "from_ordinals_to_seq"], [24, 2, 1, "", "from_seq_to_array"], [24, 2, 1, "", "get_gap_motif"], [24, 2, 1, "", "get_matched_array"], [24, 2, 1, "", "get_motif_len"], [24, 2, 1, "", "get_subset"], [24, 2, 1, "", "get_word_alphabet"], [24, 2, 1, "", "includes_gap_motif"], [24, 2, 1, "", "index"], [24, 2, 1, "", "is_valid"], [24, 4, 1, "", "pairs"], [24, 2, 1, "", "resolve_ambiguity"], [24, 2, 1, "", "to_indices"], [24, 2, 1, "", "to_json"], [24, 2, 1, "", "to_rich_dict"], [24, 2, 1, "", "with_gap_motif"]], "cogent3.core.alphabet.Alphabet.AlphabetError": [[24, 3, 1, "", "args"], [24, 2, 1, "", "with_traceback"]], "cogent3.core.genetic_code": [[26, 1, 1, "", "GeneticCode"]], "cogent3.core.genetic_code.GeneticCode": [[26, 4, 1, "", "blocks"], [26, 2, 1, "", "changes"], [26, 2, 1, "", "get_stop_indices"], [26, 2, 1, "", "is_start"], [26, 2, 1, "", "is_stop"], [26, 2, 1, "", "sixframes"], [26, 2, 1, "", "to_regex"], [26, 2, 1, "", "to_table"], [26, 2, 1, "", "translate"]], "cogent3.core.moltype": [[29, 1, 1, "", "MolType"]], "cogent3.core.moltype.MolType": [[29, 2, 1, "", "can_match"], [29, 2, 1, "", "can_mismatch"], [29, 2, 1, "", "can_mispair"], [29, 2, 1, "", "can_pair"], [29, 2, 1, "", "complement"], [29, 2, 1, "", "count_degenerate"], [29, 2, 1, "", "count_gaps"], [29, 2, 1, "", "degap"], [29, 2, 1, "", "degenerate_from_seq"], [29, 2, 1, "", "disambiguate"], [29, 2, 1, "", "first_degenerate"], [29, 2, 1, "", "first_gap"], [29, 2, 1, "", "first_invalid"], [29, 2, 1, "", "first_non_strict"], [29, 2, 1, "", "first_not_in_alphabet"], [29, 2, 1, "", "gap_indices"], [29, 2, 1, "", "gap_maps"], [29, 2, 1, "", "gap_vector"], [29, 2, 1, "", "get_css_style"], [29, 2, 1, "", "get_degenerate_positions"], [29, 2, 1, "", "get_type"], [29, 2, 1, "", "gettype"], [29, 2, 1, "", "is_ambiguity"], [29, 2, 1, "", "is_degenerate"], [29, 2, 1, "", "is_gap"], [29, 2, 1, "", "is_gapped"], [29, 2, 1, "", "is_strict"], [29, 2, 1, "", "is_valid"], [29, 2, 1, "", "make_array_seq"], [29, 2, 1, "", "make_seq"], [29, 2, 1, "", "must_match"], [29, 2, 1, "", "must_pair"], [29, 2, 1, "", "mw"], [29, 2, 1, "", "possibilities"], [29, 2, 1, "", "rc"], [29, 2, 1, "", "strand_symmetric_motifs"], [29, 2, 1, "", "to_json"], [29, 2, 1, "", "to_regex"], [29, 2, 1, "", "to_rich_dict"], [29, 2, 1, "", "valid_on_alphabet"], [29, 2, 1, "", "verify_sequence"], [29, 2, 1, "", "what_ambiguity"]], "cogent3.core.sequence": [[31, 1, 1, "", "DnaSequence"], [32, 1, 1, "", "ProteinSequence"], [33, 1, 1, "", "RnaSequence"]], "cogent3.core.sequence.DnaSequence": [[31, 3, 1, "", "PROTEIN"], [31, 2, 1, "", "add_annotation"], [31, 2, 1, "", "add_feature"], [31, 2, 1, "", "annotate_from_gff"], [31, 2, 1, "", "annotate_matches_to"], [31, 3, 1, "", "annotations"], [31, 2, 1, "", "attach_annotations"], [31, 2, 1, "", "can_match"], [31, 2, 1, "", "can_mismatch"], [31, 2, 1, "", "can_mispair"], [31, 2, 1, "", "can_pair"], [31, 2, 1, "", "clear_annotations"], [31, 2, 1, "", "codon_alphabet"], [31, 2, 1, "", "complement"], [31, 2, 1, "", "copy"], [31, 2, 1, "", "copy_annotations"], [31, 2, 1, "", "count"], [31, 2, 1, "", "count_degenerate"], [31, 2, 1, "", "count_gaps"], [31, 2, 1, "", "counts"], [31, 2, 1, "", "degap"], [31, 2, 1, "", "detach_annotations"], [31, 2, 1, "", "diff"], [31, 2, 1, "", "disambiguate"], [31, 2, 1, "", "distance"], [31, 2, 1, "", "first_degenerate"], [31, 2, 1, "", "first_gap"], [31, 2, 1, "", "first_invalid"], [31, 2, 1, "", "first_non_strict"], [31, 2, 1, "", "frac_diff"], [31, 2, 1, "", "frac_diff_gaps"], [31, 2, 1, "", "frac_diff_non_gaps"], [31, 2, 1, "", "frac_same"], [31, 2, 1, "", "frac_same_gaps"], [31, 2, 1, "", "frac_same_non_gaps"], [31, 2, 1, "", "frac_similar"], [31, 2, 1, "", "gap_indices"], [31, 2, 1, "", "gap_maps"], [31, 2, 1, "", "gap_vector"], [31, 2, 1, "", "gapped_by_map"], [31, 2, 1, "", "gapped_by_map_motif_iter"], [31, 2, 1, "", "gapped_by_map_segment_iter"], [31, 2, 1, "", "get_annotations_matching"], [31, 2, 1, "", "get_by_annotation"], [31, 2, 1, "", "get_drawable"], [31, 2, 1, "", "get_drawables"], [31, 2, 1, "", "get_in_motif_size"], [31, 2, 1, "", "get_kmers"], [31, 2, 1, "", "get_name"], [31, 2, 1, "", "get_orf_positions"], [31, 2, 1, "", "get_region_covering_all"], [31, 2, 1, "", "get_translation"], [31, 2, 1, "", "get_type"], [31, 2, 1, "", "gettype"], [31, 2, 1, "", "has_terminal_stop"], [31, 2, 1, "", "is_annotated"], [31, 2, 1, "", "is_degenerate"], [31, 2, 1, "", "is_gap"], [31, 2, 1, "", "is_gapped"], [31, 2, 1, "", "is_strict"], [31, 2, 1, "", "is_valid"], [31, 2, 1, "", "iter_kmers"], [31, 3, 1, "", "line_wrap"], [31, 2, 1, "", "matrix_distance"], [31, 3, 1, "", "moltype"], [31, 2, 1, "", "must_match"], [31, 2, 1, "", "must_pair"], [31, 2, 1, "", "mw"], [31, 2, 1, "", "parse_out_gaps"], [31, 2, 1, "", "possibilities"], [31, 3, 1, "", "protein"], [31, 2, 1, "", "rc"], [31, 2, 1, "", "replace"], [31, 2, 1, "", "resolveambiguities"], [31, 2, 1, "", "resolved_ambiguities"], [31, 2, 1, "", "reverse_complement"], [31, 2, 1, "", "shuffle"], [31, 2, 1, "", "sliding_windows"], [31, 2, 1, "", "strand_symmetry"], [31, 2, 1, "", "strip_bad"], [31, 2, 1, "", "strip_bad_and_gaps"], [31, 2, 1, "", "strip_degenerate"], [31, 2, 1, "", "to_dna"], [31, 2, 1, "", "to_fasta"], [31, 2, 1, "", "to_html"], [31, 2, 1, "", "to_json"], [31, 2, 1, "", "to_moltype"], [31, 2, 1, "", "to_rich_dict"], [31, 2, 1, "", "to_rna"], [31, 2, 1, "", "translate"], [31, 2, 1, "", "trim_stop_codon"], [31, 2, 1, "", "with_masked_annotations"], [31, 2, 1, "", "with_termini_unknown"]], "cogent3.core.sequence.ProteinSequence": [[32, 2, 1, "", "add_annotation"], [32, 2, 1, "", "add_feature"], [32, 2, 1, "", "annotate_from_gff"], [32, 2, 1, "", "annotate_matches_to"], [32, 3, 1, "", "annotations"], [32, 2, 1, "", "attach_annotations"], [32, 2, 1, "", "can_match"], [32, 2, 1, "", "can_mismatch"], [32, 2, 1, "", "can_mispair"], [32, 2, 1, "", "can_pair"], [32, 2, 1, "", "clear_annotations"], [32, 2, 1, "", "complement"], [32, 2, 1, "", "copy"], [32, 2, 1, "", "copy_annotations"], [32, 2, 1, "", "count"], [32, 2, 1, "", "count_degenerate"], [32, 2, 1, "", "count_gaps"], [32, 2, 1, "", "counts"], [32, 2, 1, "", "degap"], [32, 2, 1, "", "detach_annotations"], [32, 2, 1, "", "diff"], [32, 2, 1, "", "disambiguate"], [32, 2, 1, "", "distance"], [32, 2, 1, "", "first_degenerate"], [32, 2, 1, "", "first_gap"], [32, 2, 1, "", "first_invalid"], [32, 2, 1, "", "first_non_strict"], [32, 2, 1, "", "frac_diff"], [32, 2, 1, "", "frac_diff_gaps"], [32, 2, 1, "", "frac_diff_non_gaps"], [32, 2, 1, "", "frac_same"], [32, 2, 1, "", "frac_same_gaps"], [32, 2, 1, "", "frac_same_non_gaps"], [32, 2, 1, "", "frac_similar"], [32, 2, 1, "", "gap_indices"], [32, 2, 1, "", "gap_maps"], [32, 2, 1, "", "gap_vector"], [32, 2, 1, "", "gapped_by_map"], [32, 2, 1, "", "gapped_by_map_motif_iter"], [32, 2, 1, "", "gapped_by_map_segment_iter"], [32, 2, 1, "", "get_annotations_matching"], [32, 2, 1, "", "get_by_annotation"], [32, 2, 1, "", "get_drawable"], [32, 2, 1, "", "get_drawables"], [32, 2, 1, "", "get_in_motif_size"], [32, 2, 1, "", "get_kmers"], [32, 2, 1, "", "get_name"], [32, 2, 1, "", "get_region_covering_all"], [32, 2, 1, "", "get_type"], [32, 2, 1, "", "gettype"], [32, 2, 1, "", "is_annotated"], [32, 2, 1, "", "is_degenerate"], [32, 2, 1, "", "is_gap"], [32, 2, 1, "", "is_gapped"], [32, 2, 1, "", "is_strict"], [32, 2, 1, "", "is_valid"], [32, 2, 1, "", "iter_kmers"], [32, 3, 1, "", "line_wrap"], [32, 2, 1, "", "matrix_distance"], [32, 3, 1, "", "moltype"], [32, 2, 1, "", "must_match"], [32, 2, 1, "", "must_pair"], [32, 2, 1, "", "mw"], [32, 2, 1, "", "parse_out_gaps"], [32, 2, 1, "", "possibilities"], [32, 2, 1, "", "rc"], [32, 2, 1, "", "replace"], [32, 2, 1, "", "resolveambiguities"], [32, 2, 1, "", "resolved_ambiguities"], [32, 2, 1, "", "shuffle"], [32, 2, 1, "", "sliding_windows"], [32, 2, 1, "", "strand_symmetry"], [32, 2, 1, "", "strip_bad"], [32, 2, 1, "", "strip_bad_and_gaps"], [32, 2, 1, "", "strip_degenerate"], [32, 2, 1, "", "to_fasta"], [32, 2, 1, "", "to_html"], [32, 2, 1, "", "to_json"], [32, 2, 1, "", "to_moltype"], [32, 2, 1, "", "to_rich_dict"], [32, 2, 1, "", "translate"], [32, 2, 1, "", "with_masked_annotations"], [32, 2, 1, "", "with_termini_unknown"]], "cogent3.core.sequence.RnaSequence": [[33, 3, 1, "", "PROTEIN"], [33, 2, 1, "", "add_annotation"], [33, 2, 1, "", "add_feature"], [33, 2, 1, "", "annotate_from_gff"], [33, 2, 1, "", "annotate_matches_to"], [33, 3, 1, "", "annotations"], [33, 2, 1, "", "attach_annotations"], [33, 2, 1, "", "can_match"], [33, 2, 1, "", "can_mismatch"], [33, 2, 1, "", "can_mispair"], [33, 2, 1, "", "can_pair"], [33, 2, 1, "", "clear_annotations"], [33, 2, 1, "", "codon_alphabet"], [33, 2, 1, "", "complement"], [33, 2, 1, "", "copy"], [33, 2, 1, "", "copy_annotations"], [33, 2, 1, "", "count"], [33, 2, 1, "", "count_degenerate"], [33, 2, 1, "", "count_gaps"], [33, 2, 1, "", "counts"], [33, 2, 1, "", "degap"], [33, 2, 1, "", "detach_annotations"], [33, 2, 1, "", "diff"], [33, 2, 1, "", "disambiguate"], [33, 2, 1, "", "distance"], [33, 2, 1, "", "first_degenerate"], [33, 2, 1, "", "first_gap"], [33, 2, 1, "", "first_invalid"], [33, 2, 1, "", "first_non_strict"], [33, 2, 1, "", "frac_diff"], [33, 2, 1, "", "frac_diff_gaps"], [33, 2, 1, "", "frac_diff_non_gaps"], [33, 2, 1, "", "frac_same"], [33, 2, 1, "", "frac_same_gaps"], [33, 2, 1, "", "frac_same_non_gaps"], [33, 2, 1, "", "frac_similar"], [33, 2, 1, "", "gap_indices"], [33, 2, 1, "", "gap_maps"], [33, 2, 1, "", "gap_vector"], [33, 2, 1, "", "gapped_by_map"], [33, 2, 1, "", "gapped_by_map_motif_iter"], [33, 2, 1, "", "gapped_by_map_segment_iter"], [33, 2, 1, "", "get_annotations_matching"], [33, 2, 1, "", "get_by_annotation"], [33, 2, 1, "", "get_drawable"], [33, 2, 1, "", "get_drawables"], [33, 2, 1, "", "get_in_motif_size"], [33, 2, 1, "", "get_kmers"], [33, 2, 1, "", "get_name"], [33, 2, 1, "", "get_orf_positions"], [33, 2, 1, "", "get_region_covering_all"], [33, 2, 1, "", "get_translation"], [33, 2, 1, "", "get_type"], [33, 2, 1, "", "gettype"], [33, 2, 1, "", "has_terminal_stop"], [33, 2, 1, "", "is_annotated"], [33, 2, 1, "", "is_degenerate"], [33, 2, 1, "", "is_gap"], [33, 2, 1, "", "is_gapped"], [33, 2, 1, "", "is_strict"], [33, 2, 1, "", "is_valid"], [33, 2, 1, "", "iter_kmers"], [33, 3, 1, "", "line_wrap"], [33, 2, 1, "", "matrix_distance"], [33, 3, 1, "", "moltype"], [33, 2, 1, "", "must_match"], [33, 2, 1, "", "must_pair"], [33, 2, 1, "", "mw"], [33, 2, 1, "", "parse_out_gaps"], [33, 2, 1, "", "possibilities"], [33, 3, 1, "", "protein"], [33, 2, 1, "", "rc"], [33, 2, 1, "", "replace"], [33, 2, 1, "", "resolveambiguities"], [33, 2, 1, "", "resolved_ambiguities"], [33, 2, 1, "", "reverse_complement"], [33, 2, 1, "", "shuffle"], [33, 2, 1, "", "sliding_windows"], [33, 2, 1, "", "strand_symmetry"], [33, 2, 1, "", "strip_bad"], [33, 2, 1, "", "strip_bad_and_gaps"], [33, 2, 1, "", "strip_degenerate"], [33, 2, 1, "", "to_dna"], [33, 2, 1, "", "to_fasta"], [33, 2, 1, "", "to_html"], [33, 2, 1, "", "to_json"], [33, 2, 1, "", "to_moltype"], [33, 2, 1, "", "to_rich_dict"], [33, 2, 1, "", "to_rna"], [33, 2, 1, "", "translate"], [33, 2, 1, "", "trim_stop_codon"], [33, 2, 1, "", "with_masked_annotations"], [33, 2, 1, "", "with_termini_unknown"]], "cogent3.core.tree": [[39, 1, 1, "", "PhyloNode"]], "cogent3.core.tree.PhyloNode": [[39, 2, 1, "", "ancestors"], [39, 2, 1, "", "append"], [39, 2, 1, "", "ascii_art"], [39, 2, 1, "", "balanced"], [39, 2, 1, "", "bifurcating"], [39, 2, 1, "", "child_groups"], [39, 2, 1, "", "compare_by_names"], [39, 2, 1, "", "compare_by_subsets"], [39, 2, 1, "", "compare_by_tip_distances"], [39, 2, 1, "", "compare_name"], [39, 2, 1, "", "copy"], [39, 2, 1, "", "copy_recursive"], [39, 2, 1, "", "copy_topology"], [39, 2, 1, "", "deepcopy"], [39, 2, 1, "", "descendant_array"], [39, 2, 1, "", "distance"], [39, 2, 1, "", "extend"], [39, 2, 1, "", "get_connecting_edges"], [39, 2, 1, "", "get_connecting_node"], [39, 2, 1, "", "get_distances"], [39, 2, 1, "", "get_edge_names"], [39, 2, 1, "", "get_edge_vector"], [39, 2, 1, "", "get_figure"], [39, 2, 1, "", "get_max_tip_tip_distance"], [39, 2, 1, "", "get_newick"], [39, 2, 1, "", "get_newick_recursive"], [39, 2, 1, "", "get_node_matching_name"], [39, 2, 1, "", "get_node_names"], [39, 2, 1, "", "get_nodes_dict"], [39, 2, 1, "", "get_param_value"], [39, 2, 1, "", "get_sub_tree"], [39, 2, 1, "", "get_tip_names"], [39, 2, 1, "", "get_xml"], [39, 2, 1, "", "index_in_parent"], [39, 2, 1, "", "insert"], [39, 2, 1, "", "is_root"], [39, 2, 1, "", "is_tip"], [39, 2, 1, "", "isroot"], [39, 2, 1, "", "istip"], [39, 2, 1, "", "iter_nontips"], [39, 2, 1, "", "iter_tips"], [39, 2, 1, "", "last_common_ancestor"], [39, 2, 1, "", "lca"], [39, 4, 1, "", "length"], [39, 2, 1, "", "levelorder"], [39, 2, 1, "", "lowest_common_ancestor"], [39, 2, 1, "", "make_tree_array"], [39, 2, 1, "", "max_tip_tip_distance"], [39, 2, 1, "", "multifurcating"], [39, 2, 1, "", "name_unnamed_nodes"], [39, 2, 1, "", "non_tip_children"], [39, 2, 1, "", "nontips"], [39, 4, 1, "", "parent"], [39, 2, 1, "", "pop"], [39, 2, 1, "", "postorder"], [39, 2, 1, "", "pre_and_postorder"], [39, 2, 1, "", "preorder"], [39, 2, 1, "", "prune"], [39, 2, 1, "", "reassign_names"], [39, 2, 1, "", "remove"], [39, 2, 1, "", "remove_deleted"], [39, 2, 1, "", "remove_node"], [39, 2, 1, "", "root"], [39, 2, 1, "", "root_at_midpoint"], [39, 2, 1, "", "rooted_at"], [39, 2, 1, "", "rooted_with_tip"], [39, 2, 1, "", "same_shape"], [39, 2, 1, "", "same_topology"], [39, 2, 1, "", "scale_branch_lengths"], [39, 2, 1, "", "separation"], [39, 2, 1, "", "set_max_tip_tip_distance"], [39, 2, 1, "", "set_param_value"], [39, 2, 1, "", "set_tip_distances"], [39, 2, 1, "", "siblings"], [39, 2, 1, "", "sorted"], [39, 2, 1, "", "subset"], [39, 2, 1, "", "subsets"], [39, 2, 1, "", "tip_children"], [39, 2, 1, "", "tip_to_tip_distances"], [39, 2, 1, "", "tips"], [39, 2, 1, "", "tips_within_distance"], [39, 2, 1, "", "to_json"], [39, 2, 1, "", "to_rich_dict"], [39, 2, 1, "", "total_descending_branch_length"], [39, 2, 1, "", "total_length"], [39, 2, 1, "", "traverse"], [39, 2, 1, "", "traverse_recursive"], [39, 2, 1, "", "unrooted"], [39, 2, 1, "", "unrooted_deepcopy"], [39, 2, 1, "", "write"]], "cogent3.parse.table": [[35, 1, 1, "", "FilteringParser"]], "cogent3.util.table": [[36, 1, 1, "", "Columns"], [37, 1, 1, "", "Table"]], "cogent3.util.table.Columns": [[36, 2, 1, "", "add_column_from_str"], [36, 4, 1, "", "array"], [36, 2, 1, "", "clear"], [36, 2, 1, "", "get"], [36, 4, 1, "", "index_name"], [36, 2, 1, "", "items"], [36, 2, 1, "", "iter_rows"], [36, 2, 1, "", "keys"], [36, 4, 1, "", "order"], [36, 2, 1, "", "pop"], [36, 2, 1, "", "popitem"], [36, 2, 1, "", "setdefault"], [36, 2, 1, "", "take_columns"], [36, 2, 1, "", "to_dict"], [36, 2, 1, "", "to_rich_dict"], [36, 2, 1, "", "update"], [36, 2, 1, "", "values"]], "cogent3.util.table.Table": [[37, 2, 1, "", "appended"], [37, 4, 1, "", "array"], [37, 2, 1, "", "count"], [37, 2, 1, "", "count_unique"], [37, 2, 1, "", "cross_join"], [37, 2, 1, "", "distinct_values"], [37, 2, 1, "", "filtered"], [37, 2, 1, "", "filtered_by_column"], [37, 4, 1, "", "format"], [37, 2, 1, "", "format_column"], [37, 2, 1, "", "get_columns"], [37, 2, 1, "", "get_row_indices"], [37, 2, 1, "", "head"], [37, 4, 1, "", "header"], [37, 4, 1, "", "index_name"], [37, 2, 1, "", "inner_join"], [37, 2, 1, "", "joined"], [37, 4, 1, "", "legend"], [37, 2, 1, "", "normalized"], [37, 2, 1, "", "set_repr_policy"], [37, 4, 1, "", "shape"], [37, 2, 1, "", "sorted"], [37, 4, 1, "", "space"], [37, 2, 1, "", "sum_columns"], [37, 2, 1, "", "sum_rows"], [37, 2, 1, "", "summed"], [37, 2, 1, "", "tail"], [37, 4, 1, "", "title"], [37, 2, 1, "", "to_categorical"], [37, 2, 1, "", "to_csv"], [37, 2, 1, "", "to_dataframe"], [37, 2, 1, "", "to_dict"], [37, 2, 1, "", "to_html"], [37, 2, 1, "", "to_json"], [37, 2, 1, "", "to_latex"], [37, 2, 1, "", "to_markdown"], [37, 2, 1, "", "to_plotly"], [37, 2, 1, "", "to_rich_dict"], [37, 2, 1, "", "to_rst"], [37, 2, 1, "", "to_string"], [37, 2, 1, "", "to_tsv"], [37, 2, 1, "", "tolist"], [37, 2, 1, "", "transposed"], [37, 2, 1, "", "with_new_column"], [37, 2, 1, "", "with_new_header"], [37, 2, 1, "", "write"]]}, "objtypes": {"0": "py:function", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:property", "5": "py:exception"}, "objnames": {"0": ["py", "function", "Python function"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "property", "Python property"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"cogent3": [0, 28, 70, 71, 84, 111, 125, 126, 129, 131], "licens": [0, 125], "available_app": 1, "available_cod": 2, "available_model": 3, "available_moltyp": 4, "get_cod": [5, 85], "get_model": [6, 73], "get_moltyp": 7, "load_aligned_seq": 8, "load_delimit": [9, 77, 82], "load_seq": 10, "load_tabl": 11, "load_tre": 12, "load_unaligned_seq": 13, "make_aligned_seq": [14, 67], "make_seq": 15, "make_t": 16, "make_tre": 17, "make_unaligned_seq": 18, "align": [19, 20, 41, 42, 43, 53, 55, 67, 69, 70, 71, 72, 73, 76, 78, 91, 92, 93, 99, 104, 105, 120], "arrayalign": [21, 67], "sequencecollect": [22, 67], "alphabet": [23, 24, 68], "define_app": 25, "geneticcod": 26, "genetic_cod": 27, "api": 28, "util": [28, 84, 108, 111], "function": [28, 46, 64, 65, 67, 73, 84], "For": [28, 73, 113], "load": [28, 76, 77, 80, 81, 82], "data": [28, 46, 48, 77, 78, 82, 86, 91, 108, 113], "from": [28, 46, 51, 66, 67, 69, 70, 71, 74, 76, 77, 80, 81, 82, 84, 89, 92, 130], "file": [28, 41, 42, 43, 67, 69, 76, 77, 80, 81, 82, 86], "make": [28, 48, 73, 76, 77, 79, 82, 100, 101, 130], "type": [28, 46, 64, 65, 69, 76, 79, 81, 84], "standard": [28, 76, 82, 103], "python": [28, 76, 77, 82], "get": [28, 44, 45, 50, 57, 59, 66, 67, 69, 73, 74, 79, 81, 82, 85], "commonli": 28, "us": [28, 41, 42, 43, 46, 61, 62, 67, 70, 71, 72, 73, 76, 77, 79, 81, 82, 84, 86, 103, 106, 107, 111, 114, 124, 131], "displai": [28, 47, 69, 82, 87, 88, 90], "builtin": 28, "The": [28, 46, 52, 63, 64, 67, 73, 81, 119], "major": 28, "defin": [28, 49, 73], "compos": [28, 46, 64, 65], "app": [28, 44, 45, 46, 47, 49, 51, 63, 65, 111], "moltyp": [29, 30, 67, 68, 79], "dnasequ": [31, 66, 74], "proteinsequ": [32, 80], "rnasequ": 33, "sequenc": [34, 53, 65, 66, 67, 68, 69, 73, 74, 76, 78, 79, 80, 89, 90, 92, 93, 102, 104, 105, 118, 130], "filteringpars": [35, 77, 82], "column": [36, 67, 77, 82], "tabl": [37, 38, 73, 77, 82], "phylonod": 39, "tree": [40, 41, 42, 43, 50, 55, 60, 71, 73, 78, 81, 93, 101, 109, 114], "codon": [41, 53, 60, 61, 66, 67, 70, 73, 74, 103], "model": [41, 42, 43, 50, 53, 54, 55, 60, 61, 62, 63, 73, 103, 106, 107, 108, 117], "default": [41, 42, 43], "set": [41, 42, 43, 46, 66, 73, 77, 82, 83, 84, 88, 91, 95, 97], "specifi": [41, 42, 43, 48, 54, 55, 73, 76, 77, 82, 113, 114, 117], "differ": [41, 42, 43, 65, 67, 117], "distanc": [41, 42, 43, 71, 72, 81, 84, 102], "measur": [41, 42, 43, 113, 114], "estim": [41, 42, 43, 50, 51, 72, 73, 113], "guid": [41, 42, 43], "provid": [41, 42, 73], "gap": [41, 66, 67, 69, 70, 90, 99], "paramet": [41, 50, 51, 54, 73, 88, 117], "substitut": [41, 42, 73, 103, 106, 117], "proven": [41, 42, 43], "ar": [41, 42, 43, 46, 69, 81, 82, 107], "record": [41, 42, 43, 46, 64], "info": [41, 42, 43], "attribut": [41, 42, 43, 52, 83, 84, 88], "nucleotid": [42, 50, 53, 55, 61, 62, 67, 70, 73], "protein": [43, 66, 67, 73, 80, 92, 99, 106], "an": [44, 45, 46, 53, 55, 66, 67, 69, 73, 76, 77, 82, 84, 91, 106, 109, 120], "help": 45, "overview": [46, 63, 73], "rule": 46, "exampl": [46, 65, 91, 109], "sequenti": 46, "like": [46, 67, 83, 84], "multi": 46, "step": 46, "process": [46, 64, 107], "sever": 46, "appli": [46, 50, 51, 53, 55, 60, 61, 62], "multipl": [46, 82, 92, 111, 121], "other": 46, "import": 46, "featur": [46, 69], "analys": 46, "log": [46, 48, 73], "failur": 46, "you": [46, 69], "can": [46, 60, 69, 82], "track": [46, 64, 89], "progress": [46, 70], "do": [46, 81, 126, 129], "parallel": [46, 111], "comput": [46, 67, 72, 111], "all": [46, 59, 67, 69, 74, 81], "abov": 46, "instal": [47, 124], "analysi": [48, 73, 87, 91, 104, 108, 115, 121], "A": [48, 65, 71, 107, 110, 114], "read": [48, 69], "onli": [48, 69, 77, 82], "store": 48, "member": [48, 69], "loop": 48, "over": [48, 67, 82], "writeabl": 48, "sqlitedb": 48, "serialis": 48, "interrog": 48, "run": 48, "reconstruct": [49, 73, 108, 114], "ancestr": [49, 73], "state": 49, "ancestral_st": 49, "discret": [50, 113], "time": [50, 52, 54, 61, 62, 73], "non": [50, 52, 53, 54, 55, 60, 67, 82, 83, 84], "stationari": [50, 52, 53, 54, 55, 60], "branch": [50, 58, 59, 60, 73, 81, 103, 117], "length": [50, 60, 73, 81], "paralinear": 50, "extract": [51, 67], "maximum": [51, 73, 81, 114], "likelihood": [51, 72, 73, 114, 121], "model_result": [51, 53], "creat": [51, 66, 67, 68, 69, 77, 80, 81, 82, 84], "tabulate_stat": 51, "edg": [51, 81, 95, 97, 117], "global": 51, "motif": [51, 67, 73], "test": [52, 56, 57, 58, 59, 66, 73, 81, 84, 103, 110, 113, 116], "hypothesi": [52, 63], "revers": [52, 61, 62, 66, 82, 88], "hypothesis_result": 52, "ha": [52, 77, 82, 107], "kei": [52, 83, 84], "access": [52, 67, 83, 84], "statist": [52, 59, 67, 113], "null": 52, "altern": [52, 117], "save": [52, 73], "result": [52, 64, 73], "3": 53, "fit": [53, 73, 114], "separ": [53, 84], "each": [53, 81], "posit": [53, 66, 67], "heterogen": [54, 57, 58, 73, 103, 107, 115], "distinct": [54, 82], "rate": [54, 73, 103, 107, 115, 116], "matrix": [54, 84], "great": 54, "ap": 54, "via": [55, 69, 71], "instanc": 55, "path": [55, 81], "natsel_neutr": 56, "select": [56, 77, 81, 82], "neutral": [56, 103, 110], "natsel_sitehet": 57, "site": [57, 59, 103, 107], "individu": [57, 67, 81], "posterior": [57, 59], "probabl": [57, 59, 67, 73], "natsel_timehet": 58, "natsel_zhang": 59, "class": [59, 84, 107], "membership": 59, "tabular": [59, 82], "form": [59, 61], "gnc": 60, "we": 60, "obtain": [60, 74], "en": 60, "condit": [61, 109], "gtr": 62, "progressive_align": 63, "natsel": 63, "write": [63, 67, 81, 82], "your": [63, 65, 73, 84], "own": [63, 84], "could": 64, "notcomplet": 64, "object": [64, 67, 69, 71, 72, 74, 76, 77, 81, 82, 84, 109], "fals": 64, "error": 64, "propag": 64, "turn": 65, "simpl": [65, 91], "renam": 65, "user": 65, "output": [65, 81], "dna": [66, 67, 74, 80, 99], "rna": [66, 67], "string": [66, 67, 76, 77, 80, 82], "convert": [66, 67, 68, 70, 74, 80], "fasta": [66, 67, 76], "format": [66, 67, 76, 77, 81, 82], "name": [66, 67, 80, 81, 82], "chang": [66, 82, 98], "complement": [66, 79, 88], "translat": [66, 74], "complementar": 66, "join": [66, 82, 101], "two": [66, 81, 107], "slice": [66, 67, 69, 74, 82], "3rd": [66, 67], "1st": 66, "2nd": 66, "return": 66, "random": [66, 82], "version": [66, 124], "remov": [66, 67, 74, 89], "collect": [67, 76], "what": [67, 69, 82, 126, 129], "": [67, 81, 84], "between": [67, 81, 102, 117], "basic": [67, 88], "construct": [67, 69, 84, 103], "ad": [67, 69, 82], "new": [67, 82], "exist": [67, 82, 83, 84], "append": [67, 82], "insert": 67, "base": [67, 72], "refer": 67, "element": [67, 77, 82, 83, 84], "list": [67, 76, 77, 82, 84], "subset": 67, "handl": [67, 76, 118], "phylip": [67, 80], "By": [67, 71, 73, 74], "row": [67, 77, 82], "singl": [67, 74, 82, 84, 111, 114], "region": [67, 69], "contigu": 67, "iter": [67, 82, 84], "filter": [67, 82], "trim": 67, "termin": [67, 74], "stop": [67, 74], "elimin": 67, "charact": [67, 76], "variabl": [67, 84], "constant": [67, 73], "identifi": 67, "arbitrari": 67, "count": [67, 82, 90], "work": [67, 81], "calcul": [67, 72, 81, 102], "fraction": 67, "map": [67, 99, 111], "unalign": [67, 76], "i": [67, 81, 84, 126, 129], "e": 67, "tupl": [68, 84], "integ": [68, 81], "annot": [69, 89, 105], "coordin": 69, "autom": 69, "introduct": 69, "genbank": 69, "customis": 69, "directli": [69, 71, 72, 111], "add_annot": 69, "add_featur": 69, "seri": [69, 74, 76], "item": 69, "wise": 69, "take": 69, "union": 69, "have": 69, "shadow": 69, "pseudo": 69, "must": 69, "overlap": 69, "itself": 69, "v": 69, "copi": [69, 81], "queri": 69, "produc": 69, "valid": 69, "sourc": 69, "absent": 69, "span": 69, "as_one_span": 69, "unifi": 69, "discontinu": 69, "behaviour": 69, "nucleic": [69, 79], "acid": [69, 74, 79], "mask": 69, "certain": 69, "avail": [69, 73, 79, 85], "everyth": 69, "when": [69, 77, 82], "todo": [69, 76, 87, 88, 102, 107], "build": [70, 71], "aa": 70, "seq": 70, "nuc": 70, "phylogeni": 71, "phylogenet": [71, 93, 108, 114], "pairwis": [71, 72, 102], "quick_tre": 71, "distancematrix": 71, "explicitli": 71, "phylo": [71, 73], "nj": 71, "dict": [71, 76, 77, 82, 83, 84], "least": [71, 114], "squar": [71, 97, 114], "ml": 71, "genet": [72, 78, 85], "fast": [72, 107], "evolutionari": 73, "pre": [73, 114], "scope": [73, 117], "start": 73, "valu": [73, 82], "bound": 73, "optimis": [73, 84], "upper": 73, "hmm": 73, "choic": 73, "how": [73, 74, 82, 126], "check": [73, 84], "wa": 73, "success": 73, "number": [73, 77, 82], "free": 73, "aikak": 73, "inform": [73, 91], "criterion": 73, "bayesian": 73, "One": [73, 81], "just": 73, "As": 73, "hypothes": 73, "ratio": 73, "parametr": [73, 112], "bootstrap": [73, 98, 112], "determin": [73, 84], "confid": 73, "interv": 73, "mle": 73, "six": 74, "frame": 74, "find": 74, "out": 74, "mani": [74, 82], "look": [74, 114], "up": 74, "amino": 74, "correspond": 74, "one": [74, 82], "group": 74, "codonalphabet": 74, "trail": 74, "first": 74, "cookbook": 75, "url": [76, 77, 82], "molecular": [76, 79], "strip": 76, "label": 76, "parser": 76, "open": 76, "line": [76, 77, 82], "overload": 76, "csv": [77, 82], "delimit": [77, 82], "without": [77, 82], "header": [77, 82], "part": [77, 82], "big": [77, 82], "some": [77, 82], "raw": [77, 82], "order": [77, 82], "index": [77, 82, 128], "panda": [77, 82], "datafram": [77, 82], "2d": [77, 82], "complex": [77, 82], "empti": [77, 82], "manipul": [78, 81, 108, 109], "biolog": [78, 104], "code": [78, 79, 85], "ambigu": 79, "definit": 79, "degener": 79, "verifi": 79, "custom": 79, "visual": 81, "ascii_art": 81, "node": [81, 109], "its": 81, "same": 81, "tip": [81, 94, 95, 96, 97], "connect": 81, "last": 81, "common": 81, "ancestor": 81, "lca": 81, "children": 81, "farthest": 81, "apart": 81, "within": 81, "given": 81, "reroot": 81, "At": 81, "midpoint": 81, "Near": 81, "represent": 81, "newick": 81, "xml": 81, "travers": 81, "preorder": 81, "postord": 81, "subtre": 81, "wai": 81, "method": 81, "prune": 81, "full": 81, "unroot": 81, "transform": [81, 113], "bifurc": 81, "balanc": 81, "topologi": [81, 114], "scale": 81, "place": 81, "ascii": 81, "compar": 81, "matric": 81, "add": 82, "titl": 82, "legend": 82, "indic": 82, "numer": [82, 113], "precis": 82, "digit": 82, "space": [82, 114], "wrap": [82, 84], "top": 82, "head": 82, "bottom": 82, "tail": 82, "repr": 82, "ones": 82, "numpi": 82, "arrai": 82, "orient": 82, "conting": 82, "sum": 82, "strictli": 82, "mix": [82, 103], "sort": 82, "involv": 82, "occurr": 82, "uniqu": [82, 90], "merg": 82, "transpos": 82, "markdown": 82, "str": 82, "latex": 82, "restructur": 82, "text": [82, 98], "grid": 82, "to_str": 82, "bedgraph": 82, "html": 82, "written": 82, "formmat": 82, "uniondict": [83, 84], "oper": [83, 84], "updat": [83, 84], "miscellan": 84, "forc": 84, "curri": 84, "see": 84, "char": 84, "flatten": 84, "deepli": 84, "nest": 84, "case": 84, "insensit": 84, "lookup": 84, "deleg": 84, "hide": 84, "constrain": 84, "contain": 84, "document": [86, 123], "coevolut": 87, "heatmap": 87, "score": 87, "violin": [87, 90], "plot": [87, 88, 90], "boxplot": 87, "dotplot": [88, 89], "modifi": 88, "match": 88, "reload": 89, "json": 89, "per": 90, "bar": 90, "chart": 90, "box": 90, "illustr": 91, "On": 91, "sampl": 91, "logo": 92, "draw": 92, "tfb": 92, "imag": 93, "galleri": 93, "angular": 94, "dendrogram": [94, 95, 96, 97], "style": [94, 95, 96, 97], "With": [94, 95, 96, 97], "contemporan": [94, 95, 96, 97], "circular": 95, "colour": [95, 97], "radial": 96, "show": 98, "support": [98, 122, 127], "placement": 98, "upgma": 100, "cluster": 100, "neighbor": 101, "variant": 103, "perform": [104, 112, 116], "coevolutionari": 104, "empir": 106, "evalu": 107, "hidden": 107, "markov": 107, "ho": 107, "1": 107, "gamma": 107, "distribut": 107, "independ": 107, "2": 107, "slowli": 107, "evolv": 107, "auto": [107, 113], "correl": [107, 113], "patch": 107, "kappa": 107, "tutori": 108, "gener": 108, "evolut": 108, "modif": 109, "theori": 110, "apply_to": 111, "period": 113, "signal": 113, "continu": 113, "fourier": 113, "symbol": 113, "power": 113, "signific": 113, "permut": 113, "best": 114, "more": 114, "rigor": 114, "search": 114, "assess": 114, "rel": 116, "allow": 117, "clade": 117, "stem": 117, "argument": 117, "applic": 117, "advanc": 118, "simplest": 119, "script": 119, "simul": 120, "loci": 121, "post": [122, 127], "bug": [122, 127], "citat": [122, 127], "minim": 124, "graph": 124, "tool": 124, "develop": 124, "conda": 124, "manual": 124, "creation": 124, "environ": 124, "doe": 126, "relat": 126, "pycog": 126, "longer": [126, 129], "includ": [126, 129], "modul": [126, 129], "x": [126, 129], "project": [129, 131], "histori": 129, "sens": 130}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "nbsphinx": 4, "sphinxcontrib.bibtex": 9, "sphinx": 57}, "alltitles": {"Cogent3 License": [[0, "cogent3-license"], [125, "cogent3-license"]], "available_apps": [[1, "available-apps"]], "available_codes": [[2, "available-codes"]], "available_models": [[3, "available-models"]], "available_moltypes": [[4, "available-moltypes"]], "get_code": [[5, "get-code"]], "get_model": [[6, "get-model"]], "get_moltype": [[7, "get-moltype"]], "load_aligned_seqs": [[8, "load-aligned-seqs"]], "load_delimited": [[9, "load-delimited"]], "load_seq": [[10, "load-seq"]], "load_table": [[11, "load-table"]], "load_tree": [[12, "load-tree"]], "load_unaligned_seqs": [[13, "load-unaligned-seqs"]], "make_aligned_seqs": [[14, "make-aligned-seqs"]], "make_seq": [[15, "make-seq"]], "make_table": [[16, "make-table"]], "make_tree": [[17, "make-tree"]], "make_unaligned_seqs": [[18, "make-unaligned-seqs"]], "alignment": [[19, "alignment"]], "Alignment": [[20, "alignment"]], "ArrayAlignment": [[21, "arrayalignment"]], "SequenceCollection": [[22, "sequencecollection"]], "alphabet": [[23, "alphabet"]], "Alphabet": [[24, "alphabet"]], "define_app": [[25, "define-app"]], "GeneticCode": [[26, "geneticcode"]], "genetic_code": [[27, "genetic-code"]], "API": [[28, "api"]], "Utility Functions For": [[28, "utility-functions-for"]], "Loading data from file": [[28, "loading-data-from-file"]], "Making cogent3 types from standard Python types": [[28, "making-cogent3-types-from-standard-python-types"]], "Getting commonly used cogent3 types": [[28, "getting-commonly-used-cogent3-types"]], "Displaying cogent3 builtins": [[28, "displaying-cogent3-builtins"]], "The Major cogent3 Data Types": [[28, "the-major-cogent3-data-types"]], "Defining Composable Apps": [[28, "defining-composable-apps"]], "MolType": [[29, "moltype"]], "moltype": [[30, "moltype"]], "DnaSequence": [[31, "dnasequence"]], "ProteinSequence": [[32, "proteinsequence"]], "RnaSequence": [[33, "rnasequence"]], "sequence": [[34, "sequence"]], "FilteringParser": [[35, "filteringparser"]], "Columns": [[36, "columns"]], "Table": [[37, "table"]], "table": [[38, "table"]], "PhyloNode": [[39, "phylonode"]], "tree": [[40, "tree"]], "Using a codon model": [[41, "using-a-codon-model"]], "Codon alignment with default settings": [[41, "codon-alignment-with-default-settings"]], "Specify a different distance measure for estimating the guide tree": [[41, "specify-a-different-distance-measure-for-estimating-the-guide-tree"], [42, "specify-a-different-distance-measure-for-estimating-the-guide-tree"], [43, "specify-a-different-distance-measure-for-estimating-the-guide-tree"]], "Providing a guide tree": [[41, "providing-a-guide-tree"], [42, "providing-a-guide-tree"]], "Specifying the gap parameters": [[41, "specifying-the-gap-parameters"]], "Specifying the substitution model and parameters": [[41, "specifying-the-substitution-model-and-parameters"]], "Alignment settings and file provenance are recorded in the info attribute": [[41, "alignment-settings-and-file-provenance-are-recorded-in-the-info-attribute"], [42, "alignment-settings-and-file-provenance-are-recorded-in-the-info-attribute"], [43, "alignment-settings-and-file-provenance-are-recorded-in-the-info-attribute"]], "Using a nucleotide model": [[42, "using-a-nucleotide-model"]], "Nucleotide alignment with default settings": [[42, "nucleotide-alignment-with-default-settings"]], "Specifying the substitution model": [[42, "specifying-the-substitution-model"]], "Using a protein model": [[43, "using-a-protein-model"]], "Protein alignment with default settings": [[43, "protein-alignment-with-default-settings"]], "Getting an app": [[44, "getting-an-app"]], "Getting help on an app": [[45, "getting-help-on-an-app"]], "Overview of using apps": [[46, "overview-of-using-apps"]], "Types of apps": [[46, "types-of-apps"]], "Composability": [[46, "composability"]], "Composability rules": [[46, "composability-rules"]], "An example": [[46, "an-example"]], "Using apps sequentially like functions": [[46, "using-apps-sequentially-like-functions"]], "Composing a multi-step process from several apps": [[46, "composing-a-multi-step-process-from-several-apps"]], "Applying a process to multiple data records": [[46, "applying-a-process-to-multiple-data-records"]], "Other important features": [[46, "other-important-features"]], "The settings and data analysed will be logged": [[46, "the-settings-and-data-analysed-will-be-logged"]], "Failures are recorded": [[46, "failures-are-recorded"]], "You can track progress": [[46, "you-can-track-progress"]], "You can do parallel computation": [[46, "you-can-do-parallel-computation"]], "All of the above": [[46, "all-of-the-above"]], "Displaying installed apps": [[47, "displaying-installed-apps"]], "Specifying data for analysis": [[48, "specifying-data-for-analysis"]], "A read only data store": [[48, "a-read-only-data-store"]], "Data store \u201cmembers\u201d": [[48, "data-store-members"]], "Looping over a data store": [[48, "looping-over-a-data-store"]], "Making a writeable data store": [[48, "making-a-writeable-data-store"]], "Sqlitedb data stores for serialised data": [[48, "sqlitedb-data-stores-for-serialised-data"]], "Interrogating run logs": [[48, "interrogating-run-logs"]], "Reconstructing ancestral states": [[49, "reconstructing-ancestral-states"]], "Define the ancestral_states app": [[49, "define-the-ancestral-states-app"]], "Applying a discrete-time, non-stationary nucleotide model": [[50, "applying-a-discrete-time-non-stationary-nucleotide-model"]], "Get a tree with branch lengths as paralinear": [[50, "get-a-tree-with-branch-lengths-as-paralinear"]], "Getting parameter estimates": [[50, "getting-parameter-estimates"]], "Extracting maximum likelihood estimates from a model_result": [[51, "extracting-maximum-likelihood-estimates-from-a-model-result"]], "Create and apply tabulate_stats app": [[51, "create-and-apply-tabulate-stats-app"]], "Edge parameters": [[51, "edge-parameters"]], "Global parameters": [[51, "global-parameters"]], "Motif parameters": [[51, "motif-parameters"]], "Testing a hypothesis \u2013 non-stationary or time-reversible": [[52, "testing-a-hypothesis-non-stationary-or-time-reversible"]], "hypothesis_result has attributes and keys": [[52, "hypothesis-result-has-attributes-and-keys"]], "Accessing the test statistics": [[52, "accessing-the-test-statistics"]], "The null hypothesis": [[52, "the-null-hypothesis"]], "The alternate hypothesis": [[52, "the-alternate-hypothesis"]], "Saving hypothesis results": [[52, "saving-hypothesis-results"]], "Apply a non-stationary nucleotide model to an alignment with 3 sequences": [[53, "apply-a-non-stationary-nucleotide-model-to-an-alignment-with-3-sequences"]], "model_result": [[53, "model-result"]], "Fitting a separate nucleotide model to each codon position": [[53, "fitting-a-separate-nucleotide-model-to-each-codon-position"]], "Specifying a non-stationary model with time-heterogeneous parameters": [[54, "specifying-a-non-stationary-model-with-time-heterogeneous-parameters"]], "Specify a distinct rate matrix for the great apes": [[54, "specify-a-distinct-rate-matrix-for-the-great-apes"]], "Apply a non-stationary nucleotide model to an alignment with a tree": [[55, "apply-a-non-stationary-nucleotide-model-to-an-alignment-with-a-tree"]], "Specify the tree via a tree instance": [[55, "specify-the-tree-via-a-tree-instance"]], "Specify the tree via a path.": [[55, "specify-the-tree-via-a-path"]], "Apply the model to an alignment": [[55, "apply-the-model-to-an-alignment"]], "natsel_neutral \u2013 a test for selective neutrality": [[56, "natsel-neutral-a-test-for-selective-neutrality"]], "natsel_sitehet \u2013 a test of site heterogeneity": [[57, "natsel-sitehet-a-test-of-site-heterogeneity"]], "Getting the individual site posterior probabilities": [[57, "getting-the-individual-site-posterior-probabilities"]], "natsel_timehet \u2013 a test of branch heterogeneity": [[58, "natsel-timehet-a-test-of-branch-heterogeneity"]], "natsel_zhang \u2013 a branch-site test": [[59, "natsel-zhang-a-branch-site-test"]], "Getting the posterior probabilities of site-class membership": [[59, "getting-the-posterior-probabilities-of-site-class-membership"]], "Getting all the statistics in tabular form": [[59, "getting-all-the-statistics-in-tabular-form"]], "Applying GNC, a non-stationary codon model": [[60, "applying-gnc-a-non-stationary-codon-model"]], "We can obtain the tree with branch lengths as ENS": [[60, "we-can-obtain-the-tree-with-branch-lengths-as-ens"]], "Applying a time-reversible codon model": [[61, "applying-a-time-reversible-codon-model"]], "Using the conditional nucleotide form codon model": [[61, "using-the-conditional-nucleotide-form-codon-model"]], "Applying a time-reversible nucleotide model": [[62, "applying-a-time-reversible-nucleotide-model"]], "Using the GTR model": [[62, "using-the-gtr-model"]], "The apps": [[63, "the-apps"]], "Overview": [[63, "overview"]], "The progressive_align App": [[63, "the-progressive-align-app"]], "The model App": [[63, "the-model-app"]], "The hypothesis App": [[63, "the-hypothesis-app"]], "The natsel Apps": [[63, "the-natsel-apps"]], "Write your own Apps": [[63, "write-your-own-apps"]], "Tracking records that could not be processed": [[64, "tracking-records-that-could-not-be-processed"]], "The NotCompleted object": [[64, "the-notcompleted-object"]], "NotCompleted FALSE type": [[64, "notcompleted-false-type"]], "NotCompleted ERROR type": [[64, "notcompleted-error-type"]], "Composed functions propagate NotCompleted results": [[64, "composed-functions-propagate-notcompleted-results"]], "Turn your functions into composable apps": [[65, "turn-your-functions-into-composable-apps"]], "A simple example": [[65, "a-simple-example"]], "Renaming sequences": [[65, "renaming-sequences"]], "A user app with a different output type": [[65, "a-user-app-with-a-different-output-type"]], "Sequence": [[66, "sequence"]], "DNA and RNA sequences": [[66, "dna-and-rna-sequences"]], "Creating a DNA sequence from a string": [[66, "creating-a-dna-sequence-from-a-string"]], "Creating a RNA sequence from a string": [[66, "creating-a-rna-sequence-from-a-string"]], "Converting to FASTA format": [[66, "converting-to-fasta-format"]], "Convert a RNA sequence to FASTA format": [[66, "convert-a-rna-sequence-to-fasta-format"]], "Creating a named sequence": [[66, "creating-a-named-sequence"]], "Setting or changing the name of a sequence": [[66, "setting-or-changing-the-name-of-a-sequence"]], "Complementing a DNA sequence": [[66, "complementing-a-dna-sequence"]], "Reverse complementing a DNA sequence": [[66, "reverse-complementing-a-dna-sequence"]], "Translate a DnaSequence to protein": [[66, "translate-a-dnasequence-to-protein"]], "Converting a DNA sequence to RNA": [[66, "converting-a-dna-sequence-to-rna"]], "Convert an RNA sequence to DNA": [[66, "convert-an-rna-sequence-to-dna"]], "Testing complementarity": [[66, "testing-complementarity"]], "Joining two DNA sequences": [[66, "joining-two-dna-sequences"]], "Slicing DNA sequences": [[66, "slicing-dna-sequences"]], "Getting 3rd positions from codons": [[66, "getting-3rd-positions-from-codons"]], "Getting 1st and 2nd positions from codons": [[66, "getting-1st-and-2nd-positions-from-codons"]], "Return a randomized version of the sequence": [[66, "return-a-randomized-version-of-the-sequence"]], "Remove gaps from a sequence": [[66, "remove-gaps-from-a-sequence"]], "Sequence Collections and Alignments": [[67, "sequence-collections-and-alignments"]], "What\u2019s the difference between Alignment and ArrayAlignment?": [[67, "what-s-the-difference-between-alignment-and-arrayalignment"]], "Basic Collection objects": [[67, "basic-collection-objects"]], "Constructing a SequenceCollection or Alignment object from strings": [[67, "constructing-a-sequencecollection-or-alignment-object-from-strings"]], "Constructing a ArrayAlignment using make_aligned_seqs": [[67, "constructing-a-arrayalignment-using-make-aligned-seqs"]], "Converting a SequenceCollection to FASTA format": [[67, "converting-a-sequencecollection-to-fasta-format"]], "Adding new sequences to an existing collection or alignment": [[67, "adding-new-sequences-to-an-existing-collection-or-alignment"]], "Appending the sequences": [[67, "appending-the-sequences"]], "Inserting the sequences": [[67, "inserting-the-sequences"]], "Inserting sequence(s) based on their alignment to a reference sequence": [[67, "inserting-sequence-s-based-on-their-alignment-to-a-reference-sequence"]], "Removing all columns with gaps in a named sequence": [[67, "removing-all-columns-with-gaps-in-a-named-sequence"]], "The elements of a collection or alignment": [[67, "the-elements-of-a-collection-or-alignment"]], "Accessing individual sequences from a collection or alignment by name": [[67, "accessing-individual-sequences-from-a-collection-or-alignment-by-name"]], "Slice the sequences from an alignment like a list": [[67, "slice-the-sequences-from-an-alignment-like-a-list"]], "Getting a subset of sequences from the alignment": [[67, "getting-a-subset-of-sequences-from-the-alignment"]], "Alignments": [[67, "alignments"]], "Creating an Alignment object from a SequenceCollection": [[67, "creating-an-alignment-object-from-a-sequencecollection"]], "Convert alignment to DNA, RNA or PROTEIN moltypes": [[67, "convert-alignment-to-dna-rna-or-protein-moltypes"]], "Handling gaps": [[67, "handling-gaps"]], "Remove all gaps from an alignment in FASTA format": [[67, "remove-all-gaps-from-an-alignment-in-fasta-format"]], "Writing sequences to file": [[67, "writing-sequences-to-file"]], "Converting an alignment to FASTA format": [[67, "converting-an-alignment-to-fasta-format"]], "Converting an alignment into Phylip format": [[67, "converting-an-alignment-into-phylip-format"]], "Converting an alignment to a list of strings": [[67, "converting-an-alignment-to-a-list-of-strings"]], "Slicing an alignment": [[67, "slicing-an-alignment"]], "By rows (sequences)": [[67, "by-rows-sequences"]], "Getting a single column from an alignment": [[67, "getting-a-single-column-from-an-alignment"]], "Getting a region of contiguous columns": [[67, "getting-a-region-of-contiguous-columns"]], "Iterating over alignment positions": [[67, "iterating-over-alignment-positions"]], "Getting codon 3rd positions from Alignment": [[67, "getting-codon-3rd-positions-from-alignment"]], "Getting codon 3rd positions from ArrayAlignment": [[67, "getting-codon-3rd-positions-from-arrayalignment"]], "Filtering positions": [[67, "filtering-positions"]], "Trim terminal stop codons": [[67, "trim-terminal-stop-codons"]], "Eliminating columns with non-nucleotide characters": [[67, "eliminating-columns-with-non-nucleotide-characters"]], "Getting all variable positions from an alignment": [[67, "getting-all-variable-positions-from-an-alignment"]], "Getting all constant positions from an alignment": [[67, "getting-all-constant-positions-from-an-alignment"]], "Getting all variable codons from an alignment": [[67, "getting-all-variable-codons-from-an-alignment"]], "Filtering sequences": [[67, "filtering-sequences"]], "Extracting sequences by sequence identifier into a new alignment object": [[67, "extracting-sequences-by-sequence-identifier-into-a-new-alignment-object"]], "Extracting sequences using an arbitrary function into a new alignment object": [[67, "extracting-sequences-using-an-arbitrary-function-into-a-new-alignment-object"]], "Computing alignment statistics": [[67, "computing-alignment-statistics"]], "Getting motif counts": [[67, "getting-motif-counts"]], "Computing motif probabilities from an alignment": [[67, "computing-motif-probabilities-from-an-alignment"]], "Working with alignment gaps": [[67, "working-with-alignment-gaps"]], "Filtering extracted columns for the gap character": [[67, "filtering-extracted-columns-for-the-gap-character"]], "Calculating the gap fraction": [[67, "calculating-the-gap-fraction"]], "Extracting maps of aligned to unaligned positions (i.e., gap maps)": [[67, "extracting-maps-of-aligned-to-unaligned-positions-i-e-gap-maps"]], "Filtering alignments based on gaps": [[67, "filtering-alignments-based-on-gaps"]], "Alphabets": [[68, "alphabets"]], "Alphabet and MolType": [[68, "alphabet-and-moltype"]], "Creating tuple alphabets": [[68, "creating-tuple-alphabets"]], "Convert a sequence into integers": [[68, "convert-a-sequence-into-integers"]], "Convert integers to a sequence": [[68, "convert-integers-to-a-sequence"]], "Annotations": [[69, "annotations"]], "Annotations with coordinates": [[69, "annotations-with-coordinates"]], "Automated introduction from reading genbank files": [[69, "automated-introduction-from-reading-genbank-files"]], "Customising annotation construction from reading a genbank file": [[69, "customising-annotation-construction-from-reading-a-genbank-file"]], "Creating directly on a sequence": [[69, "creating-directly-on-a-sequence"]], "Via": [[69, "via"]], "add_annotation": [[69, "add-annotation"]], "add_feature": [[69, "add-feature"]], "Adding as a series or item-wise": [[69, "adding-as-a-series-or-item-wise"]], "Taking the union of annotations": [[69, "taking-the-union-of-annotations"]], "Getting annotation coordinates": [[69, "getting-annotation-coordinates"]], "Annotations have shadows": [[69, "annotations-have-shadows"]], "Adding to a sequence member of an alignment": [[69, "adding-to-a-sequence-member-of-an-alignment"]], "Adding to an alignment": [[69, "adding-to-an-alignment"]], "Slicing sequences and alignments by annotations": [[69, "slicing-sequences-and-alignments-by-annotations"]], "Slicing by pseudo-feature or feature series": [[69, "slicing-by-pseudo-feature-or-feature-series"]], "Slice series must not be overlapping": [[69, "slice-series-must-not-be-overlapping"]], "You can slice an annotation itself": [[69, "you-can-slice-an-annotation-itself"]], "Sequence vs Alignment slicing": [[69, "sequence-vs-alignment-slicing"]], "Copying annotations": [[69, "copying-annotations"]], "Querying": [[69, "querying"]], "Querying produces objects only valid for their source": [[69, "querying-produces-objects-only-valid-for-their-source"]], "Querying for absent annotation": [[69, "querying-for-absent-annotation"]], "Querying features that span gaps in alignments": [[69, "querying-features-that-span-gaps-in-alignments"]], "as_one_span unifies features with discontinuous alignment coordinates": [[69, "as-one-span-unifies-features-with-discontinuous-alignment-coordinates"]], "Behaviour of annotations on nucleic acid sequences": [[69, "behaviour-of-annotations-on-nucleic-acid-sequences"]], "Masking annotated regions": [[69, "masking-annotated-regions"]], "Masking annotated regions on alignments": [[69, "masking-annotated-regions-on-alignments"]], "You can take mask of the shadow": [[69, "you-can-take-mask-of-the-shadow"]], "What features of a certain type are available?": [[69, "what-features-of-a-certain-type-are-available"]], "Getting all features of a type, or everything but that type": [[69, "getting-all-features-of-a-type-or-everything-but-that-type"]], "Getting sequence features when you have an alignment object": [[69, "getting-sequence-features-when-you-have-an-alignment-object"]], "Annotation display on sequences": [[69, "annotation-display-on-sequences"]], "Todo": [[69, "id1"], [69, "id2"], [76, "id1"], [87, "id1"], [88, "id1"], [102, "id1"], [107, "id1"]], "Building alignments": [[70, "building-alignments"]], "Using a cogent3 progressive aligner for nucleotides": [[70, "using-a-cogent3-progressive-aligner-for-nucleotides"]], "Using a cogent3 progressive aligner for codons": [[70, "using-a-cogent3-progressive-aligner-for-codons"]], "Converting gaps from aa-seq alignment to nuc seq alignment": [[70, "converting-gaps-from-aa-seq-alignment-to-nuc-seq-alignment"]], "Building phylogenies": [[71, "building-phylogenies"]], "Building A Phylogenetic Tree From Pairwise Distances": [[71, "building-a-phylogenetic-tree-from-pairwise-distances"]], "Directly via alignment.quick_tree()": [[71, "directly-via-alignment-quick-tree"]], "Using the DistanceMatrix object": [[71, "using-the-distancematrix-object"]], "Explicitly via DistanceMatrix and cogent3.phylo.nj.nj()`": [[71, "explicitly-via-distancematrix-and-cogent3-phylo-nj-nj"]], "Directly from a pairwise distance dict": [[71, "directly-from-a-pairwise-distance-dict"]], "By Least-squares": [[71, "by-least-squares"]], "By ML": [[71, "by-ml"]], "Genetic distance calculation": [[72, "genetic-distance-calculation"]], "Fast pairwise distance estimation": [[72, "fast-pairwise-distance-estimation"]], "Computing genetic distances using the Alignment object": [[72, "computing-genetic-distances-using-the-alignment-object"]], "Using the distance calculator directly": [[72, "using-the-distance-calculator-directly"]], "Likelihood based pairwise distance estimation": [[72, "likelihood-based-pairwise-distance-estimation"]], "Evolutionary Analysis Using Likelihood": [[73, "evolutionary-analysis-using-likelihood"]], "Specifying substitution models": [[73, "specifying-substitution-models"]], "The available pre-defined substitution models": [[73, "the-available-pre-defined-substitution-models"]], "Getting a substitution model with get_model()": [[73, "getting-a-substitution-model-with-get-model"]], "Rate heterogeneity models": [[73, "rate-heterogeneity-models"]], "For nucleotide": [[73, "for-nucleotide"]], "For codon": [[73, "for-codon"]], "For protein": [[73, "for-protein"]], "Making a likelihood function": [[73, "making-a-likelihood-function"]], "Providing an alignment to a likelihood function": [[73, "providing-an-alignment-to-a-likelihood-function"]], "Scoping parameters on trees \u2013 time heterogeneous models": [[73, "scoping-parameters-on-trees-time-heterogeneous-models"]], "Specifying a parameter as constant": [[73, "specifying-a-parameter-as-constant"]], "Providing a starting value for a parameter": [[73, "providing-a-starting-value-for-a-parameter"]], "Setting parameter bounds for optimisation": [[73, "setting-parameter-bounds-for-optimisation"]], "Setting an upper bound for branch length": [[73, "setting-an-upper-bound-for-branch-length"]], "Specifying rate heterogeneity functions": [[73, "specifying-rate-heterogeneity-functions"]], "Specifying Phylo-HMMs": [[73, "specifying-phylo-hmms"]], "Fitting likelihood functions - Choice of optimisers": [[73, "fitting-likelihood-functions-choice-of-optimisers"]], "How to check your optimisation was successful": [[73, "how-to-check-your-optimisation-was-successful"]], "Overview of the fitted likelihood function": [[73, "overview-of-the-fitted-likelihood-function"]], "Log likelihood and number of free parameters": [[73, "log-likelihood-and-number-of-free-parameters"]], "Aikake Information Criterion": [[73, "aikake-information-criterion"]], "Bayesian Information Criterion": [[73, "bayesian-information-criterion"]], "Getting maximum likelihood estimates": [[73, "getting-maximum-likelihood-estimates"]], "One at a time": [[73, "one-at-a-time"]], "Just the motif probabilities": [[73, "just-the-motif-probabilities"]], "As tables": [[73, "as-tables"]], "Testing Hypotheses - Using Likelihood Ratio Tests": [[73, "testing-hypotheses-using-likelihood-ratio-tests"]], "Testing Hypotheses - By parametric bootstrapping": [[73, "testing-hypotheses-by-parametric-bootstrapping"]], "Determining confidence intervals on MLEs": [[73, "determining-confidence-intervals-on-mles"]], "Saving results": [[73, "saving-results"]], "Reconstructing ancestral sequences": [[73, "reconstructing-ancestral-sequences"]], "Translate DNA sequences": [[74, "translate-dna-sequences"]], "Translate all six frames": [[74, "translate-all-six-frames"]], "Find out how many stops in a frame": [[74, "find-out-how-many-stops-in-a-frame"]], "Translate a codon": [[74, "translate-a-codon"]], "Look up the amino acid corresponding to a single codon": [[74, "look-up-the-amino-acid-corresponding-to-a-single-codon"]], "Get all the codons for one amino acid": [[74, "get-all-the-codons-for-one-amino-acid"]], "Get all the codons for a group of amino acids": [[74, "get-all-the-codons-for-a-group-of-amino-acids"]], "Converting the CodonAlphabet to codon series": [[74, "converting-the-codonalphabet-to-codon-series"]], "Obtaining the codons from a DnaSequence object": [[74, "obtaining-the-codons-from-a-dnasequence-object"]], "Translating a DNA sequence with a terminating stop codon": [[74, "translating-a-dna-sequence-with-a-terminating-stop-codon"]], "By removing the trailing stop codon first": [[74, "by-removing-the-trailing-stop-codon-first"]], "By slicing the DnaSequence first": [[74, "by-slicing-the-dnasequence-first"]], "Cookbook": [[75, "cookbook"]], "Loading an alignment from a file or url": [[76, "loading-an-alignment-from-a-file-or-url"]], "Loading aligned sequences": [[76, "loading-aligned-sequences"]], "Loading unaligned sequences": [[76, "loading-unaligned-sequences"]], "Loading from a url": [[76, "loading-from-a-url"], [77, "loading-from-a-url"], [82, "loading-from-a-url"]], "Specifying the file format": [[76, "specifying-the-file-format"]], "Specifying the sequence molecular type": [[76, "specifying-the-sequence-molecular-type"]], "Making an alignment from standard python objects": [[76, "making-an-alignment-from-standard-python-objects"]], "From a dict of strings": [[76, "from-a-dict-of-strings"]], "From a series of strings": [[76, "from-a-series-of-strings"]], "Stripping label characters on loading": [[76, "stripping-label-characters-on-loading"]], "Making a sequence collection from standard python objects": [[76, "making-a-sequence-collection-from-standard-python-objects"]], "Loading sequences using format parsers": [[76, "loading-sequences-using-format-parsers"]], "Loading FASTA sequences from an open file or list of lines": [[76, "loading-fasta-sequences-from-an-open-file-or-list-of-lines"]], "Handling overloaded FASTA sequence labels": [[76, "handling-overloaded-fasta-sequence-labels"]], "Loading a csv file": [[77, "loading-a-csv-file"], [82, "loading-a-csv-file"]], "Loading delimited specifying the format": [[77, "loading-delimited-specifying-the-format"], [82, "loading-delimited-specifying-the-format"]], "Loading delimited data without a header line": [[77, "loading-delimited-data-without-a-header-line"], [82, "loading-delimited-data-without-a-header-line"]], "Using load_delimited()": [[77, "using-load-delimited"], [82, "using-load-delimited"]], "Using FilteringParser": [[77, "using-filteringparser"], [82, "using-filteringparser"]], "Selectively loading parts of a big file": [[77, "selectively-loading-parts-of-a-big-file"], [82, "selectively-loading-parts-of-a-big-file"]], "Loading a set number of lines from a file": [[77, "loading-a-set-number-of-lines-from-a-file"], [82, "loading-a-set-number-of-lines-from-a-file"]], "Loading only some rows": [[77, "loading-only-some-rows"], [82, "loading-only-some-rows"]], "Loading only some columns": [[77, "loading-only-some-columns"], [82, "loading-only-some-columns"]], "Load raw data as a list of lists of strings": [[77, "load-raw-data-as-a-list-of-lists-of-strings"], [82, "load-raw-data-as-a-list-of-lists-of-strings"]], "Make a table from header and rows": [[77, "make-a-table-from-header-and-rows"], [82, "make-a-table-from-header-and-rows"]], "Make a table from a dict": [[77, "make-a-table-from-a-dict"], [82, "make-a-table-from-a-dict"]], "Specify the column order when creating from a dict.": [[77, "specify-the-column-order-when-creating-from-a-dict"], [82, "specify-the-column-order-when-creating-from-a-dict"]], "Create the table with an index": [[77, "create-the-table-with-an-index"], [82, "create-the-table-with-an-index"]], "Create a table from a pandas.DataFrame": [[77, "create-a-table-from-a-pandas-dataframe"], [82, "create-a-table-from-a-pandas-dataframe"]], "Create a table from header and rows": [[77, "create-a-table-from-header-and-rows"], [82, "create-a-table-from-header-and-rows"]], "Create a table from dict": [[77, "create-a-table-from-dict"], [82, "create-a-table-from-dict"]], "Create a table from a 2D dict": [[77, "create-a-table-from-a-2d-dict"], [82, "create-a-table-from-a-2d-dict"]], "Create a table that has complex python objects as elements": [[77, "create-a-table-that-has-complex-python-objects-as-elements"], [82, "create-a-table-that-has-complex-python-objects-as-elements"]], "Create an empty table": [[77, "create-an-empty-table"], [82, "create-an-empty-table"]], "Manipulating biological data": [[78, "manipulating-biological-data"]], "Sequences and Alignments": [[78, "sequences-and-alignments"]], "Genetic code": [[78, "genetic-code"]], "Trees": [[78, "trees"], [81, "trees"]], "Molecular types": [[79, "molecular-types"]], "Available molecular types": [[79, "available-molecular-types"]], "Getting a MolType": [[79, "getting-a-moltype"]], "Using a MolType to get ambiguity codes": [[79, "using-a-moltype-to-get-ambiguity-codes"]], "MolType definition of degenerate codes": [[79, "moltype-definition-of-degenerate-codes"]], "Nucleic acid MolType and complementing": [[79, "nucleic-acid-moltype-and-complementing"]], "Making sequences": [[79, "making-sequences"]], "Verify sequences": [[79, "verify-sequences"]], "Making a custom MolType": [[79, "making-a-custom-moltype"]], "Protein sequences": [[80, "protein-sequences"]], "Creating a ProteinSequence with a name": [[80, "creating-a-proteinsequence-with-a-name"]], "Converting a DNA sequence string to protein sequence string": [[80, "converting-a-dna-sequence-string-to-protein-sequence-string"]], "Loading protein sequences from a Phylip file": [[80, "loading-protein-sequences-from-a-phylip-file"]], "Loading a tree from a file and visualizing it with ascii_art()": [[81, "loading-a-tree-from-a-file-and-visualizing-it-with-ascii-art"]], "Writing a tree to a file": [[81, "writing-a-tree-to-a-file"]], "Getting the individual nodes of a tree by name": [[81, "getting-the-individual-nodes-of-a-tree-by-name"]], "Getting the name of a node (or a tree)": [[81, "getting-the-name-of-a-node-or-a-tree"]], "The object type of a tree and its nodes is the same": [[81, "the-object-type-of-a-tree-and-its-nodes-is-the-same"]], "Working with the nodes of a tree": [[81, "working-with-the-nodes-of-a-tree"]], "Getting the path between two tips or edges (connecting edges)": [[81, "getting-the-path-between-two-tips-or-edges-connecting-edges"]], "Getting the distance between two nodes": [[81, "getting-the-distance-between-two-nodes"]], "Getting the last common ancestor (LCA) for two nodes": [[81, "getting-the-last-common-ancestor-lca-for-two-nodes"]], "Getting all the ancestors for a node": [[81, "getting-all-the-ancestors-for-a-node"]], "Getting all the children for a node": [[81, "getting-all-the-children-for-a-node"]], "Getting all the distances for a tree": [[81, "getting-all-the-distances-for-a-tree"]], "Getting the two nodes that are farthest apart": [[81, "getting-the-two-nodes-that-are-farthest-apart"]], "Get the nodes within a given distance": [[81, "get-the-nodes-within-a-given-distance"]], "Rerooting trees": [[81, "rerooting-trees"]], "At a named node": [[81, "at-a-named-node"]], "At the midpoint": [[81, "at-the-midpoint"]], "Near a given tip": [[81, "near-a-given-tip"]], "Tree representations": [[81, "tree-representations"]], "Newick format": [[81, "newick-format"]], "XML format": [[81, "xml-format"]], "Tree traversal": [[81, "tree-traversal"]], "Preorder": [[81, "preorder"]], "Postorder": [[81, "postorder"]], "Selecting subtrees": [[81, "selecting-subtrees"]], "One way to do it": [[81, "one-way-to-do-it"]], "Tree manipulation methods": [[81, "tree-manipulation-methods"]], "Pruning the tree": [[81, "pruning-the-tree"]], "Create a full unrooted copy of the tree": [[81, "create-a-full-unrooted-copy-of-the-tree"]], "Transform tree into a bifurcating tree": [[81, "transform-tree-into-a-bifurcating-tree"]], "Transform tree into a balanced tree": [[81, "transform-tree-into-a-balanced-tree"]], "Test two trees for same topology": [[81, "test-two-trees-for-same-topology"]], "Calculate each node\u2019s maximum distance to a tip": [[81, "calculate-each-node-s-maximum-distance-to-a-tip"]], "Scale branch lengths in place to integers for ascii output": [[81, "scale-branch-lengths-in-place-to-integers-for-ascii-output"]], "Get tip-to-tip distances": [[81, "get-tip-to-tip-distances"]], "Compare two trees using tip-to-tip distance matrices": [[81, "compare-two-trees-using-tip-to-tip-distance-matrices"]], "Tabular data": [[82, "tabular-data"]], "Adding a new column": [[82, "adding-a-new-column"], [82, "id1"]], "Add a title and a legend to a table": [[82, "add-a-title-and-a-legend-to-a-table"]], "Iterating over table rows": [[82, "iterating-over-table-rows"]], "How many rows are there?": [[82, "how-many-rows-are-there"]], "How many columns are there?": [[82, "how-many-columns-are-there"]], "Iterating over table columns": [[82, "iterating-over-table-columns"]], "Table slicing using column names": [[82, "table-slicing-using-column-names"]], "Table slicing using indices": [[82, "table-slicing-using-indices"]], "Changing displayed numerical precision": [[82, "changing-displayed-numerical-precision"]], "Change digits or column spacing": [[82, "change-digits-or-column-spacing"]], "Wrapping tables for display": [[82, "wrapping-tables-for-display"]], "Display the top of a table using head()": [[82, "display-the-top-of-a-table-using-head"]], "Display the bottom of a table using tail()": [[82, "display-the-bottom-of-a-table-using-tail"]], "Display random rows from a table": [[82, "display-random-rows-from-a-table"]], "Change the number of rows displayed by repr()": [[82, "change-the-number-of-rows-displayed-by-repr"]], "Changing column headings": [[82, "changing-column-headings"]], "Create a new column from existing ones": [[82, "create-a-new-column-from-existing-ones"]], "Get table data as a numpy array": [[82, "get-table-data-as-a-numpy-array"]], "Get a table column as a list": [[82, "get-a-table-column-as-a-list"]], "Get multiple table columns as a list": [[82, "get-multiple-table-columns-as-a-list"]], "Get the table as a row oriented dict": [[82, "get-the-table-as-a-row-oriented-dict"]], "Get the table as a column oriented dict": [[82, "get-the-table-as-a-column-oriented-dict"]], "Get the table as a pandas.DataFrame": [[82, "get-the-table-as-a-pandas-dataframe"]], "Get a table of counts as a contingency table": [[82, "get-a-table-of-counts-as-a-contingency-table"]], "Appending tables": [[82, "appending-tables"]], "Summing a single column": [[82, "summing-a-single-column"]], "Summing multiple columns or rows - strictly numerical data": [[82, "summing-multiple-columns-or-rows-strictly-numerical-data"]], "Summing multiple columns or rows with mixed non-numeric/numeric data": [[82, "summing-multiple-columns-or-rows-with-mixed-non-numeric-numeric-data"]], "Filtering table rows": [[82, "filtering-table-rows"]], "Filtering table columns": [[82, "filtering-table-columns"]], "Standard sorting": [[82, "standard-sorting"]], "Reverse sorting": [[82, "reverse-sorting"]], "Sorting involving multiple columns, one reversed": [[82, "sorting-involving-multiple-columns-one-reversed"]], "Getting raw data for a single column": [[82, "getting-raw-data-for-a-single-column"]], "Getting raw data for multiple columns": [[82, "getting-raw-data-for-multiple-columns"]], "Getting distinct values": [[82, "getting-distinct-values"]], "Counting occurrences of values": [[82, "counting-occurrences-of-values"]], "Counting unique values": [[82, "counting-unique-values"]], "Joining or merging tables": [[82, "joining-or-merging-tables"]], "Transpose a table": [[82, "transpose-a-table"]], "Specify markdown as the str() format": [[82, "specify-markdown-as-the-str-format"]], "Specify latex as the str() format": [[82, "specify-latex-as-the-str-format"]], "Get a table as a markdown formatted string": [[82, "get-a-table-as-a-markdown-formatted-string"]], "Get a table as a latex formatted string": [[82, "get-a-table-as-a-latex-formatted-string"]], "Get a table as a restructured text csv-table": [[82, "get-a-table-as-a-restructured-text-csv-table"]], "Get a table as a restructured text grid table": [[82, "get-a-table-as-a-restructured-text-grid-table"]], "Getting a latex format table with to_string()": [[82, "getting-a-latex-format-table-with-to-string"]], "Getting a bedGraph format with to_string()": [[82, "getting-a-bedgraph-format-with-to-string"]], "Getting a table as html": [[82, "getting-a-table-as-html"]], "What formats can be written?": [[82, "what-formats-can-be-written"]], "Writing a latex formmated file": [[82, "writing-a-latex-formmated-file"]], "Writing delimited formats": [[82, "writing-delimited-formats"]], "UnionDict \u2013 a dict with set like operations and keys as attributes": [[83, "uniondict-a-dict-with-set-like-operations-and-keys-as-attributes"], [84, "uniondict-a-dict-with-set-like-operations-and-keys-as-attributes"]], "Accessing elements of a UnionDict": [[83, "accessing-elements-of-a-uniondict"], [84, "accessing-elements-of-a-uniondict"]], "Updating a UnionDict": [[83, "updating-a-uniondict"], [84, "updating-a-uniondict"]], "Accessing a non-existent UnionDict key": [[83, "accessing-a-non-existent-uniondict-key"], [84, "accessing-a-non-existent-uniondict-key"]], "Useful Utilities": [[84, "useful-utilities"]], "Using Cogent3\u2019s optimisers for your own functions": [[84, "using-cogent3-s-optimisers-for-your-own-functions"]], "Miscellaneous functions": [[84, "miscellaneous-functions"]], "Force a variable to be iterable": [[84, "force-a-variable-to-be-iterable"]], "Curry a function": [[84, "curry-a-function"]], "Test to see if an object is iterable": [[84, "test-to-see-if-an-object-is-iterable"]], "Test to see if an object is a single char": [[84, "test-to-see-if-an-object-is-a-single-char"]], "Flatten a deeply nested iterable": [[84, "flatten-a-deeply-nested-iterable"]], "Test to determine if list of tuple": [[84, "test-to-determine-if-list-of-tuple"]], "Create a case-insensitive iterable": [[84, "create-a-case-insensitive-iterable"]], "Construct a distance matrix lookup function": [[84, "construct-a-distance-matrix-lookup-function"]], "Check class types": [[84, "check-class-types"]], "Delegate to a separate object": [[84, "delegate-to-a-separate-object"]], "Wrap a function to hide from a class": [[84, "wrap-a-function-to-hide-from-a-class"]], "Construct a constrained container": [[84, "construct-a-constrained-container"]], "Available genetic codes": [[85, "available-genetic-codes"]], "Getting a genetic code with get_code()": [[85, "getting-a-genetic-code-with-get-code"]], "Data Files Used in the Documentation": [[86, "data-files-used-in-the-documentation"]], "Coevolution analysis": [[87, "coevolution-analysis"]], "Display coevolution as a heatmap": [[87, "display-coevolution-as-a-heatmap"]], "Display coevolution scores as a Violin plot": [[87, "display-coevolution-scores-as-a-violin-plot"]], "Display coevolution scores as a Boxplot": [[87, "display-coevolution-scores-as-a-boxplot"]], "Dotplot basics": [[88, "dotplot-basics"]], "Modifying the matching parameters": [[88, "modifying-the-matching-parameters"]], "Displaying dotplot for the reverse complement": [[88, "displaying-dotplot-for-the-reverse-complement"]], "Setting plot attributes": [[88, "setting-plot-attributes"]], "Dotplot with annotated sequences": [[89, "dotplot-with-annotated-sequences"]], "Reloading from json": [[89, "reloading-from-json"]], "Removing annotation tracks": [[89, "removing-annotation-tracks"]], "Counting gaps per sequence": [[90, "counting-gaps-per-sequence"]], "Plotting counts of unique gaps": [[90, "plotting-counts-of-unique-gaps"]], "Displaying unique gaps as a bar chart": [[90, "displaying-unique-gaps-as-a-bar-chart"]], "Displaying unique gaps as a violin plot": [[90, "displaying-unique-gaps-as-a-violin-plot"]], "Displaying unique gaps as a box plot": [[90, "displaying-unique-gaps-as-a-box-plot"]], "Information analysis of an alignment": [[91, "information-analysis-of-an-alignment"]], "Illustrated with a simple example": [[91, "illustrated-with-a-simple-example"]], "On a sample data set": [[91, "on-a-sample-data-set"]], "Sequence logos": [[92, "sequence-logos"]], "Drawing logo for a TFBS": [[92, "drawing-logo-for-a-tfbs"]], "Drawing a sequence logo from a multiple sequence alignment": [[92, "drawing-a-sequence-logo-from-a-multiple-sequence-alignment"]], "Sequence logo of protein alignment": [[92, "sequence-logo-of-protein-alignment"]], "Image Gallery": [[93, "image-gallery"]], "Alignments & Sequences": [[93, "alignments-sequences"]], "Phylogenetic Trees": [[93, "phylogenetic-trees"]], "Angular Dendrogram Style": [[94, "angular-dendrogram-style"]], "With Contemporaneous Tips": [[94, "with-contemporaneous-tips"], [95, "with-contemporaneous-tips"], [96, "with-contemporaneous-tips"], [97, "with-contemporaneous-tips"]], "Circular Dendrogram Style": [[95, "circular-dendrogram-style"]], "Colouring a set of edges": [[95, "colouring-a-set-of-edges"], [97, "colouring-a-set-of-edges"]], "Radial Dendrogram Style": [[96, "radial-dendrogram-style"]], "Square Dendrogram Style": [[97, "square-dendrogram-style"]], "Showing Bootstrap Support": [[98, "showing-bootstrap-support"]], "Change the placement of support text": [[98, "change-the-placement-of-support-text"]], "Map protein alignment gaps to DNA alignment gaps": [[99, "map-protein-alignment-gaps-to-dna-alignment-gaps"]], "Make a UPGMA cluster": [[100, "make-a-upgma-cluster"]], "Make a neighbor joining tree": [[101, "make-a-neighbor-joining-tree"]], "Calculate pairwise distances between sequences": [[102, "calculate-pairwise-distances-between-sequences"]], "Using codon models": [[103, "using-codon-models"]], "Constructing the codon substitution model": [[103, "constructing-the-codon-substitution-model"]], "Standard test of neutrality": [[103, "standard-test-of-neutrality"]], "Rate-heterogeneity model variants": [[103, "rate-heterogeneity-model-variants"]], "Mixing branch and site-heterogeneity": [[103, "mixing-branch-and-site-heterogeneity"]], "Perform a coevolutionary analysis on biological sequence alignments": [[104, "perform-a-coevolutionary-analysis-on-biological-sequence-alignments"]], "Annotating alignments and sequences": [[105, "annotating-alignments-and-sequences"]], "Use an empirical protein substitution model": [[106, "use-an-empirical-protein-substitution-model"]], "Evaluate process heterogeneity using a Hidden Markov Model": [[107, "evaluate-process-heterogeneity-using-a-hidden-markov-model"]], "Model Ho: no rate heterogeneity": [[107, "model-ho-no-rate-heterogeneity"]], "Model Ha(1): two classes of gamma distributed but independent sites": [[107, "model-ha-1-two-classes-of-gamma-distributed-but-independent-sites"]], "Model Ha(2): fast and slowly evolving sites are auto-correlated": [[107, "model-ha-2-fast-and-slowly-evolving-sites-are-auto-correlated"]], "A model with patches of kappa": [[107, "a-model-with-patches-of-kappa"]], "Tutorials": [[108, "tutorials"]], "Data manipulation": [[108, "data-manipulation"]], "General data analysis": [[108, "general-data-analysis"]], "Modelling Evolution": [[108, "modelling-evolution"]], "Phylogenetic Reconstruction": [[108, "phylogenetic-reconstruction"]], "Utilities": [[108, "utilities"]], "Manipulation of Tree Node Objects": [[109, "manipulation-of-tree-node-objects"]], "An Example of Conditional Tree Node Modifications": [[109, "an-example-of-conditional-tree-node-modifications"]], "A test of the neutral theory": [[110, "a-test-of-the-neutral-theory"]], "Parallel computations": [[111, "parallel-computations"]], "Parallel computation on a single computer": [[111, "parallel-computation-on-a-single-computer"]], "Using app.apply_to()": [[111, "using-app-apply-to"]], "Directly using cogent3.util.parallel.map()": [[111, "directly-using-cogent3-util-parallel-map"]], "Parallel computation on multiple computers": [[111, "parallel-computation-on-multiple-computers"]], "Performing a parametric bootstrap": [[112, "performing-a-parametric-bootstrap"]], "Estimating periodic signals": [[113, "estimating-periodic-signals"]], "Estimating the periods in a signal": [[113, "estimating-the-periods-in-a-signal"]], "For numerical (continuous) data": [[113, "for-numerical-continuous-data"], [113, "id1"]], "Discrete Fourier transform": [[113, "discrete-fourier-transform"]], "Auto-correlation": [[113, "auto-correlation"]], "For symbolic data": [[113, "for-symbolic-data"], [113, "id2"], [113, "id4"]], "Estimating power for specified period": [[113, "estimating-power-for-specified-period"]], "Measuring statistical significance of periodic signals": [[113, "measuring-statistical-significance-of-periodic-signals"]], "For numerical (continuous data)": [[113, "id3"]], "Permutation testing": [[113, "permutation-testing"]], "Phylogenetic reconstruction by least squares": [[114, "phylogenetic-reconstruction-by-least-squares"]], "Look for the single best tree": [[114, "look-for-the-single-best-tree"]], "A more rigorous tree space search": [[114, "a-more-rigorous-tree-space-search"]], "Assessing the fit for a pre-specified tree topology": [[114, "assessing-the-fit-for-a-pre-specified-tree-topology"]], "Using maximum likelihood for measuring tree fit": [[114, "using-maximum-likelihood-for-measuring-tree-fit"]], "Analysis of rate heterogeneity": [[115, "analysis-of-rate-heterogeneity"]], "Performing a relative rate test": [[116, "performing-a-relative-rate-test"]], "Allowing substitution model parameters to differ between branches": [[117, "allowing-substitution-model-parameters-to-differ-between-branches"]], "Specifying a clade": [[117, "specifying-a-clade"]], "Specifying a stem": [[117, "specifying-a-stem"]], "Specifying clade and stem": [[117, "specifying-clade-and-stem"]], "Alternate arguments for specifying edges": [[117, "alternate-arguments-for-specifying-edges"]], "Applications of scoped parameters": [[117, "applications-of-scoped-parameters"]], "Advanced sequence handling": [[118, "advanced-sequence-handling"]], "The simplest script": [[119, "the-simplest-script"]], "Simulate an alignment": [[120, "simulate-an-alignment"]], "Likelihood analysis of multiple loci": [[121, "likelihood-analysis-of-multiple-loci"]], "Posting Bugs": [[122, "posting-bugs"], [127, "posting-bugs"]], "Citation": [[122, "citation"], [127, "citation"]], "Support": [[122, "support"], [127, "support"]], "Documentation": [[123, "documentation"]], "Installation": [[124, "installation"]], "Minimal installation": [[124, "minimal-installation"]], "Install with graphing tools": [[124, "install-with-graphing-tools"]], "Install with developer tools": [[124, "install-with-developer-tools"]], "Installing the development version": [[124, "installing-the-development-version"]], "Installing using conda": [[124, "installing-using-conda"]], "Manual creation of the conda environment": [[124, "manual-creation-of-the-conda-environment"]], "License": [[125, "license"]], "How does cogent3 relate to PyCogent?": [[126, "how-does-cogent3-relate-to-pycogent"]], "cogent3 no longer includes module x, what do I do?": [[126, "cogent3-no-longer-includes-module-x-what-do-i-do"], [129, "cogent3-no-longer-includes-module-x-what-do-i-do"]], "Index": [[128, "index"]], "Project History": [[129, "project-history"]], "Making Sense from Sequence": [[130, "making-sense-from-sequence"]], "Projects using cogent3": [[131, "projects-using-cogent3"]]}, "indexentries": {"available_apps() (in module cogent3.__init__)": [[1, "cogent3.__init__.available_apps"]], "available_codes() (in module cogent3.__init__)": [[2, "cogent3.__init__.available_codes"]], "available_models() (in module cogent3.__init__)": [[3, "cogent3.__init__.available_models"]], "available_moltypes() (in module cogent3.__init__)": [[4, "cogent3.__init__.available_moltypes"]], "get_code() (in module cogent3.__init__)": [[5, "cogent3.__init__.get_code"]], "get_model() (in module cogent3.__init__)": [[6, "cogent3.__init__.get_model"]], "get_moltype() (in module cogent3.__init__)": [[7, "cogent3.__init__.get_moltype"]], "load_aligned_seqs() (in module cogent3.__init__)": [[8, "cogent3.__init__.load_aligned_seqs"]], "load_delimited() (in module cogent3.__init__)": [[9, "cogent3.__init__.load_delimited"]], "load_seq() (in module cogent3.__init__)": [[10, "cogent3.__init__.load_seq"]], "load_table() (in module cogent3.__init__)": [[11, "cogent3.__init__.load_table"]], "load_tree() (in module cogent3.__init__)": [[12, "cogent3.__init__.load_tree"]], "load_unaligned_seqs() (in module cogent3.__init__)": [[13, "cogent3.__init__.load_unaligned_seqs"]], "make_aligned_seqs() (in module cogent3.__init__)": [[14, "cogent3.__init__.make_aligned_seqs"]], "make_seq() (in module cogent3.__init__)": [[15, "cogent3.__init__.make_seq"]], "make_table() (in module cogent3.__init__)": [[16, "cogent3.__init__.make_table"]], "make_tree() (in module cogent3.__init__)": [[17, "cogent3.__init__.make_tree"]], "make_unaligned_seqs() (in module cogent3.__init__)": [[18, "cogent3.__init__.make_unaligned_seqs"]], "alignment (class in cogent3.core.alignment)": [[20, "cogent3.core.alignment.Alignment"]], "add_annotation() (alignment method)": [[20, "cogent3.core.alignment.Alignment.add_annotation"]], "add_feature() (alignment method)": [[20, "cogent3.core.alignment.Alignment.add_feature"]], "add_from_ref_aln() (alignment method)": [[20, "cogent3.core.alignment.Alignment.add_from_ref_aln"]], "add_seqs() (alignment method)": [[20, "cogent3.core.alignment.Alignment.add_seqs"]], "alignment_quality() (alignment method)": [[20, "cogent3.core.alignment.Alignment.alignment_quality"]], "annotate_from_gff() (alignment method)": [[20, "cogent3.core.alignment.Alignment.annotate_from_gff"]], "annotations (alignment attribute)": [[20, "cogent3.core.alignment.Alignment.annotations"]], "apply_pssm() (alignment method)": [[20, "cogent3.core.alignment.Alignment.apply_pssm"]], "attach_annotations() (alignment method)": [[20, "cogent3.core.alignment.Alignment.attach_annotations"]], "clear_annotations() (alignment method)": [[20, "cogent3.core.alignment.Alignment.clear_annotations"]], "coevolution() (alignment method)": [[20, "cogent3.core.alignment.Alignment.coevolution"]], "copy() (alignment method)": [[20, "cogent3.core.alignment.Alignment.copy"]], "copy_annotations() (alignment method)": [[20, "cogent3.core.alignment.Alignment.copy_annotations"]], "count_gaps_per_pos() (alignment method)": [[20, "cogent3.core.alignment.Alignment.count_gaps_per_pos"]], "count_gaps_per_seq() (alignment method)": [[20, "cogent3.core.alignment.Alignment.count_gaps_per_seq"]], "counts() (alignment method)": [[20, "cogent3.core.alignment.Alignment.counts"]], "counts_per_pos() (alignment method)": [[20, "cogent3.core.alignment.Alignment.counts_per_pos"]], "counts_per_seq() (alignment method)": [[20, "cogent3.core.alignment.Alignment.counts_per_seq"]], "deepcopy() (alignment method)": [[20, "cogent3.core.alignment.Alignment.deepcopy"]], "default_gap (alignment attribute)": [[20, "cogent3.core.alignment.Alignment.default_gap"]], "degap() (alignment method)": [[20, "cogent3.core.alignment.Alignment.degap"]], "detach_annotations() (alignment method)": [[20, "cogent3.core.alignment.Alignment.detach_annotations"]], "distance_matrix() (alignment method)": [[20, "cogent3.core.alignment.Alignment.distance_matrix"]], "dotplot() (alignment method)": [[20, "cogent3.core.alignment.Alignment.dotplot"]], "entropy_per_pos() (alignment method)": [[20, "cogent3.core.alignment.Alignment.entropy_per_pos"]], "entropy_per_seq() (alignment method)": [[20, "cogent3.core.alignment.Alignment.entropy_per_seq"]], "filtered() (alignment method)": [[20, "cogent3.core.alignment.Alignment.filtered"]], "gap_chars (alignment attribute)": [[20, "cogent3.core.alignment.Alignment.gap_chars"]], "gapped_by_map() (alignment method)": [[20, "cogent3.core.alignment.Alignment.gapped_by_map"]], "get_ambiguous_positions() (alignment method)": [[20, "cogent3.core.alignment.Alignment.get_ambiguous_positions"]], "get_annotations_from_any_seq() (alignment method)": [[20, "cogent3.core.alignment.Alignment.get_annotations_from_any_seq"]], "get_annotations_from_seq() (alignment method)": [[20, "cogent3.core.alignment.Alignment.get_annotations_from_seq"]], "get_annotations_matching() (alignment method)": [[20, "cogent3.core.alignment.Alignment.get_annotations_matching"]], "get_by_annotation() (alignment method)": [[20, "cogent3.core.alignment.Alignment.get_by_annotation"]], "get_by_seq_annotation() (alignment method)": [[20, "cogent3.core.alignment.Alignment.get_by_seq_annotation"]], "get_degapped_relative_to() (alignment method)": [[20, "cogent3.core.alignment.Alignment.get_degapped_relative_to"]], "get_drawable() (alignment method)": [[20, "cogent3.core.alignment.Alignment.get_drawable"]], "get_drawables() (alignment method)": [[20, "cogent3.core.alignment.Alignment.get_drawables"]], "get_gap_array() (alignment method)": [[20, "cogent3.core.alignment.Alignment.get_gap_array"]], "get_gapped_seq() (alignment method)": [[20, "cogent3.core.alignment.Alignment.get_gapped_seq"]], "get_identical_sets() (alignment method)": [[20, "cogent3.core.alignment.Alignment.get_identical_sets"]], "get_lengths() (alignment method)": [[20, "cogent3.core.alignment.Alignment.get_lengths"]], "get_motif_probs() (alignment method)": [[20, "cogent3.core.alignment.Alignment.get_motif_probs"]], "get_position_indices() (alignment method)": [[20, "cogent3.core.alignment.Alignment.get_position_indices"]], "get_projected_annotations() (alignment method)": [[20, "cogent3.core.alignment.Alignment.get_projected_annotations"]], "get_region_covering_all() (alignment method)": [[20, "cogent3.core.alignment.Alignment.get_region_covering_all"]], "get_seq() (alignment method)": [[20, "cogent3.core.alignment.Alignment.get_seq"]], "get_seq_indices() (alignment method)": [[20, "cogent3.core.alignment.Alignment.get_seq_indices"]], "get_similar() (alignment method)": [[20, "cogent3.core.alignment.Alignment.get_similar"]], "get_translation() (alignment method)": [[20, "cogent3.core.alignment.Alignment.get_translation"]], "has_terminal_stops() (alignment method)": [[20, "cogent3.core.alignment.Alignment.has_terminal_stops"]], "information_plot() (alignment method)": [[20, "cogent3.core.alignment.Alignment.information_plot"]], "is_array (alignment attribute)": [[20, "cogent3.core.alignment.Alignment.is_array"]], "is_ragged() (alignment method)": [[20, "cogent3.core.alignment.Alignment.is_ragged"]], "iter_positions() (alignment method)": [[20, "cogent3.core.alignment.Alignment.iter_positions"]], "iter_selected() (alignment method)": [[20, "cogent3.core.alignment.Alignment.iter_selected"]], "iter_seqs() (alignment method)": [[20, "cogent3.core.alignment.Alignment.iter_seqs"]], "iupac_consensus() (alignment method)": [[20, "cogent3.core.alignment.Alignment.iupac_consensus"]], "majority_consensus() (alignment method)": [[20, "cogent3.core.alignment.Alignment.majority_consensus"]], "matching_ref() (alignment method)": [[20, "cogent3.core.alignment.Alignment.matching_ref"]], "moltype (alignment attribute)": [[20, "cogent3.core.alignment.Alignment.moltype"]], "no_degenerates() (alignment method)": [[20, "cogent3.core.alignment.Alignment.no_degenerates"]], "num_seqs (alignment property)": [[20, "cogent3.core.alignment.Alignment.num_seqs"]], "omit_bad_seqs() (alignment method)": [[20, "cogent3.core.alignment.Alignment.omit_bad_seqs"]], "omit_gap_pos() (alignment method)": [[20, "cogent3.core.alignment.Alignment.omit_gap_pos"]], "omit_gap_runs() (alignment method)": [[20, "cogent3.core.alignment.Alignment.omit_gap_runs"]], "omit_gap_seqs() (alignment method)": [[20, "cogent3.core.alignment.Alignment.omit_gap_seqs"]], "pad_seqs() (alignment method)": [[20, "cogent3.core.alignment.Alignment.pad_seqs"]], "positions (alignment property)": [[20, "cogent3.core.alignment.Alignment.positions"]], "probs_per_pos() (alignment method)": [[20, "cogent3.core.alignment.Alignment.probs_per_pos"]], "probs_per_seq() (alignment method)": [[20, "cogent3.core.alignment.Alignment.probs_per_seq"]], "project_annotation() (alignment method)": [[20, "cogent3.core.alignment.Alignment.project_annotation"]], "quick_tree() (alignment method)": [[20, "cogent3.core.alignment.Alignment.quick_tree"]], "rc() (alignment method)": [[20, "cogent3.core.alignment.Alignment.rc"]], "rename_seqs() (alignment method)": [[20, "cogent3.core.alignment.Alignment.rename_seqs"]], "replace_seqs() (alignment method)": [[20, "cogent3.core.alignment.Alignment.replace_seqs"]], "reverse_complement() (alignment method)": [[20, "cogent3.core.alignment.Alignment.reverse_complement"]], "sample() (alignment method)": [[20, "cogent3.core.alignment.Alignment.sample"]], "seqlogo() (alignment method)": [[20, "cogent3.core.alignment.Alignment.seqlogo"]], "seqs (alignment property)": [[20, "cogent3.core.alignment.Alignment.seqs"]], "set_repr_policy() (alignment method)": [[20, "cogent3.core.alignment.Alignment.set_repr_policy"]], "sliding_windows() (alignment method)": [[20, "cogent3.core.alignment.Alignment.sliding_windows"]], "strand_symmetry() (alignment method)": [[20, "cogent3.core.alignment.Alignment.strand_symmetry"]], "take_positions() (alignment method)": [[20, "cogent3.core.alignment.Alignment.take_positions"]], "take_positions_if() (alignment method)": [[20, "cogent3.core.alignment.Alignment.take_positions_if"]], "take_seqs() (alignment method)": [[20, "cogent3.core.alignment.Alignment.take_seqs"]], "take_seqs_if() (alignment method)": [[20, "cogent3.core.alignment.Alignment.take_seqs_if"]], "to_dict() (alignment method)": [[20, "cogent3.core.alignment.Alignment.to_dict"]], "to_dna() (alignment method)": [[20, "cogent3.core.alignment.Alignment.to_dna"]], "to_fasta() (alignment method)": [[20, "cogent3.core.alignment.Alignment.to_fasta"]], "to_html() (alignment method)": [[20, "cogent3.core.alignment.Alignment.to_html"]], "to_json() (alignment method)": [[20, "cogent3.core.alignment.Alignment.to_json"]], "to_moltype() (alignment method)": [[20, "cogent3.core.alignment.Alignment.to_moltype"]], "to_nexus() (alignment method)": [[20, "cogent3.core.alignment.Alignment.to_nexus"]], "to_phylip() (alignment method)": [[20, "cogent3.core.alignment.Alignment.to_phylip"]], "to_pretty() (alignment method)": [[20, "cogent3.core.alignment.Alignment.to_pretty"]], "to_protein() (alignment method)": [[20, "cogent3.core.alignment.Alignment.to_protein"]], "to_rich_dict() (alignment method)": [[20, "cogent3.core.alignment.Alignment.to_rich_dict"]], "to_rna() (alignment method)": [[20, "cogent3.core.alignment.Alignment.to_rna"]], "to_type() (alignment method)": [[20, "cogent3.core.alignment.Alignment.to_type"]], "trim_stop_codons() (alignment method)": [[20, "cogent3.core.alignment.Alignment.trim_stop_codons"]], "variable_positions() (alignment method)": [[20, "cogent3.core.alignment.Alignment.variable_positions"]], "with_gaps_from() (alignment method)": [[20, "cogent3.core.alignment.Alignment.with_gaps_from"]], "with_masked_annotations() (alignment method)": [[20, "cogent3.core.alignment.Alignment.with_masked_annotations"]], "with_modified_termini() (alignment method)": [[20, "cogent3.core.alignment.Alignment.with_modified_termini"]], "write() (alignment method)": [[20, "cogent3.core.alignment.Alignment.write"]], "arrayalignment (class in cogent3.core.alignment)": [[21, "cogent3.core.alignment.ArrayAlignment"]], "add_from_ref_aln() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.add_from_ref_aln"]], "add_seqs() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.add_seqs"]], "alignment_quality() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.alignment_quality"]], "alphabet (arrayalignment attribute)": [[21, "cogent3.core.alignment.ArrayAlignment.alphabet"]], "apply_pssm() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.apply_pssm"]], "coevolution() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.coevolution"]], "copy() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.copy"]], "count_gaps_per_pos() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.count_gaps_per_pos"]], "count_gaps_per_seq() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.count_gaps_per_seq"]], "counts() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.counts"]], "counts_per_pos() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.counts_per_pos"]], "counts_per_seq() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.counts_per_seq"]], "deepcopy() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.deepcopy"]], "default_gap (arrayalignment attribute)": [[21, "cogent3.core.alignment.ArrayAlignment.default_gap"]], "degap() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.degap"]], "distance_matrix() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.distance_matrix"]], "dotplot() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.dotplot"]], "entropy_per_pos() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.entropy_per_pos"]], "entropy_per_seq() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.entropy_per_seq"]], "filtered() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.filtered"]], "gap_chars (arrayalignment attribute)": [[21, "cogent3.core.alignment.ArrayAlignment.gap_chars"]], "get_ambiguous_positions() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.get_ambiguous_positions"]], "get_degapped_relative_to() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.get_degapped_relative_to"]], "get_gap_array() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.get_gap_array"]], "get_gapped_seq() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.get_gapped_seq"]], "get_identical_sets() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.get_identical_sets"]], "get_lengths() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.get_lengths"]], "get_motif_probs() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.get_motif_probs"]], "get_position_indices() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.get_position_indices"]], "get_seq() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.get_seq"]], "get_seq_indices() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.get_seq_indices"]], "get_similar() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.get_similar"]], "get_sub_alignment() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.get_sub_alignment"]], "get_translation() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.get_translation"]], "has_terminal_stops() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.has_terminal_stops"]], "information_plot() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.information_plot"]], "is_array (arrayalignment attribute)": [[21, "cogent3.core.alignment.ArrayAlignment.is_array"]], "is_ragged() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.is_ragged"]], "iter_positions() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.iter_positions"]], "iter_selected() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.iter_selected"]], "iter_seqs() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.iter_seqs"]], "iupac_consensus() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.iupac_consensus"]], "majority_consensus() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.majority_consensus"]], "matching_ref() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.matching_ref"]], "moltype (arrayalignment attribute)": [[21, "cogent3.core.alignment.ArrayAlignment.moltype"]], "named_seqs (arrayalignment property)": [[21, "cogent3.core.alignment.ArrayAlignment.named_seqs"]], "no_degenerates() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.no_degenerates"]], "num_seqs (arrayalignment property)": [[21, "cogent3.core.alignment.ArrayAlignment.num_seqs"]], "omit_bad_seqs() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.omit_bad_seqs"]], "omit_gap_pos() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.omit_gap_pos"]], "omit_gap_runs() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.omit_gap_runs"]], "omit_gap_seqs() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.omit_gap_seqs"]], "pad_seqs() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.pad_seqs"]], "positions (arrayalignment property)": [[21, "cogent3.core.alignment.ArrayAlignment.positions"]], "probs_per_pos() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.probs_per_pos"]], "probs_per_seq() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.probs_per_seq"]], "quick_tree() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.quick_tree"]], "rc() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.rc"]], "rename_seqs() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.rename_seqs"]], "replace_seqs() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.replace_seqs"]], "reverse_complement() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.reverse_complement"]], "sample() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.sample"]], "seqlogo() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.seqlogo"]], "seqs (arrayalignment property)": [[21, "cogent3.core.alignment.ArrayAlignment.seqs"]], "set_repr_policy() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.set_repr_policy"]], "sliding_windows() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.sliding_windows"]], "strand_symmetry() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.strand_symmetry"]], "take_positions() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.take_positions"]], "take_positions_if() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.take_positions_if"]], "take_seqs() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.take_seqs"]], "take_seqs_if() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.take_seqs_if"]], "to_dict() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.to_dict"]], "to_dna() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.to_dna"]], "to_fasta() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.to_fasta"]], "to_html() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.to_html"]], "to_json() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.to_json"]], "to_moltype() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.to_moltype"]], "to_nexus() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.to_nexus"]], "to_phylip() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.to_phylip"]], "to_pretty() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.to_pretty"]], "to_protein() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.to_protein"]], "to_rich_dict() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.to_rich_dict"]], "to_rna() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.to_rna"]], "to_type() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.to_type"]], "trim_stop_codons() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.trim_stop_codons"]], "variable_positions() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.variable_positions"]], "with_modified_termini() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.with_modified_termini"]], "write() (arrayalignment method)": [[21, "cogent3.core.alignment.ArrayAlignment.write"]], "sequencecollection (class in cogent3.core.alignment)": [[22, "cogent3.core.alignment.SequenceCollection"]], "add_seqs() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.add_seqs"]], "annotate_from_gff() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.annotate_from_gff"]], "apply_pssm() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.apply_pssm"]], "copy() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.copy"]], "copy_annotations() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.copy_annotations"]], "counts() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.counts"]], "counts_per_seq() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.counts_per_seq"]], "deepcopy() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.deepcopy"]], "degap() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.degap"]], "dotplot() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.dotplot"]], "entropy_per_seq() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.entropy_per_seq"]], "get_ambiguous_positions() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.get_ambiguous_positions"]], "get_identical_sets() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.get_identical_sets"]], "get_lengths() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.get_lengths"]], "get_motif_probs() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.get_motif_probs"]], "get_seq() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.get_seq"]], "get_seq_indices() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.get_seq_indices"]], "get_similar() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.get_similar"]], "get_translation() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.get_translation"]], "has_terminal_stops() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.has_terminal_stops"]], "is_array (sequencecollection attribute)": [[22, "cogent3.core.alignment.SequenceCollection.is_array"]], "is_ragged() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.is_ragged"]], "iter_selected() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.iter_selected"]], "iter_seqs() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.iter_seqs"]], "moltype (sequencecollection attribute)": [[22, "cogent3.core.alignment.SequenceCollection.moltype"]], "num_seqs (sequencecollection property)": [[22, "cogent3.core.alignment.SequenceCollection.num_seqs"]], "omit_gap_runs() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.omit_gap_runs"]], "omit_gap_seqs() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.omit_gap_seqs"]], "pad_seqs() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.pad_seqs"]], "probs_per_seq() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.probs_per_seq"]], "rc() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.rc"]], "rename_seqs() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.rename_seqs"]], "reverse_complement() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.reverse_complement"]], "seqs (sequencecollection property)": [[22, "cogent3.core.alignment.SequenceCollection.seqs"]], "set_repr_policy() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.set_repr_policy"]], "strand_symmetry() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.strand_symmetry"]], "take_seqs() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.take_seqs"]], "take_seqs_if() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.take_seqs_if"]], "to_dict() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.to_dict"]], "to_dna() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.to_dna"]], "to_fasta() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.to_fasta"]], "to_json() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.to_json"]], "to_moltype() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.to_moltype"]], "to_nexus() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.to_nexus"]], "to_phylip() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.to_phylip"]], "to_protein() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.to_protein"]], "to_rich_dict() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.to_rich_dict"]], "to_rna() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.to_rna"]], "trim_stop_codons() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.trim_stop_codons"]], "with_modified_termini() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.with_modified_termini"]], "write() (sequencecollection method)": [[22, "cogent3.core.alignment.SequenceCollection.write"]], "alphabet (class in cogent3.core.alphabet)": [[24, "cogent3.core.alphabet.Alphabet"]], "alphabet.alphabeterror": [[24, "cogent3.core.alphabet.Alphabet.AlphabetError"]], "triples (alphabet property)": [[24, "cogent3.core.alphabet.Alphabet.Triples"]], "adapt_motif_probs() (alphabet method)": [[24, "cogent3.core.alphabet.Alphabet.adapt_motif_probs"]], "args (alphabet.alphabeterror attribute)": [[24, "cogent3.core.alphabet.Alphabet.AlphabetError.args"]], "count() (alphabet method)": [[24, "cogent3.core.alphabet.Alphabet.count"]], "counts() (alphabet method)": [[24, "cogent3.core.alphabet.Alphabet.counts"]], "from_indices() (alphabet method)": [[24, "cogent3.core.alphabet.Alphabet.from_indices"]], "from_ordinals_to_seq() (alphabet method)": [[24, "cogent3.core.alphabet.Alphabet.from_ordinals_to_seq"]], "from_seq_to_array() (alphabet method)": [[24, "cogent3.core.alphabet.Alphabet.from_seq_to_array"]], "get_gap_motif() (alphabet method)": [[24, "cogent3.core.alphabet.Alphabet.get_gap_motif"]], "get_matched_array() (alphabet method)": [[24, "cogent3.core.alphabet.Alphabet.get_matched_array"]], "get_motif_len() (alphabet method)": [[24, "cogent3.core.alphabet.Alphabet.get_motif_len"]], "get_subset() (alphabet method)": [[24, "cogent3.core.alphabet.Alphabet.get_subset"]], "get_word_alphabet() (alphabet method)": [[24, "cogent3.core.alphabet.Alphabet.get_word_alphabet"]], "includes_gap_motif() (alphabet method)": [[24, "cogent3.core.alphabet.Alphabet.includes_gap_motif"]], "index() (alphabet method)": [[24, "cogent3.core.alphabet.Alphabet.index"]], "is_valid() (alphabet method)": [[24, "cogent3.core.alphabet.Alphabet.is_valid"]], "pairs (alphabet property)": [[24, "cogent3.core.alphabet.Alphabet.pairs"]], "resolve_ambiguity() (alphabet method)": [[24, "cogent3.core.alphabet.Alphabet.resolve_ambiguity"]], "to_indices() (alphabet method)": [[24, "cogent3.core.alphabet.Alphabet.to_indices"]], "to_json() (alphabet method)": [[24, "cogent3.core.alphabet.Alphabet.to_json"]], "to_rich_dict() (alphabet method)": [[24, "cogent3.core.alphabet.Alphabet.to_rich_dict"]], "with_gap_motif() (alphabet method)": [[24, "cogent3.core.alphabet.Alphabet.with_gap_motif"]], "with_traceback() (alphabet.alphabeterror method)": [[24, "cogent3.core.alphabet.Alphabet.AlphabetError.with_traceback"]], "define_app() (in module cogent3.app.composable)": [[25, "cogent3.app.composable.define_app"]], "geneticcode (class in cogent3.core.genetic_code)": [[26, "cogent3.core.genetic_code.GeneticCode"]], "blocks (geneticcode property)": [[26, "cogent3.core.genetic_code.GeneticCode.blocks"]], "changes() (geneticcode method)": [[26, "cogent3.core.genetic_code.GeneticCode.changes"]], "get_stop_indices() (geneticcode method)": [[26, "cogent3.core.genetic_code.GeneticCode.get_stop_indices"]], "is_start() (geneticcode method)": [[26, "cogent3.core.genetic_code.GeneticCode.is_start"]], "is_stop() (geneticcode method)": [[26, "cogent3.core.genetic_code.GeneticCode.is_stop"]], "sixframes() (geneticcode method)": [[26, "cogent3.core.genetic_code.GeneticCode.sixframes"]], "to_regex() (geneticcode method)": [[26, "cogent3.core.genetic_code.GeneticCode.to_regex"]], "to_table() (geneticcode method)": [[26, "cogent3.core.genetic_code.GeneticCode.to_table"]], "translate() (geneticcode method)": [[26, "cogent3.core.genetic_code.GeneticCode.translate"]], "moltype (class in cogent3.core.moltype)": [[29, "cogent3.core.moltype.MolType"]], "can_match() (moltype method)": [[29, "cogent3.core.moltype.MolType.can_match"]], "can_mismatch() (moltype method)": [[29, "cogent3.core.moltype.MolType.can_mismatch"]], "can_mispair() (moltype method)": [[29, "cogent3.core.moltype.MolType.can_mispair"]], "can_pair() (moltype method)": [[29, "cogent3.core.moltype.MolType.can_pair"]], "complement() (moltype method)": [[29, "cogent3.core.moltype.MolType.complement"]], "count_degenerate() (moltype method)": [[29, "cogent3.core.moltype.MolType.count_degenerate"]], "count_gaps() (moltype method)": [[29, "cogent3.core.moltype.MolType.count_gaps"]], "degap() (moltype method)": [[29, "cogent3.core.moltype.MolType.degap"]], "degenerate_from_seq() (moltype method)": [[29, "cogent3.core.moltype.MolType.degenerate_from_seq"]], "disambiguate() (moltype method)": [[29, "cogent3.core.moltype.MolType.disambiguate"]], "first_degenerate() (moltype method)": [[29, "cogent3.core.moltype.MolType.first_degenerate"]], "first_gap() (moltype method)": [[29, "cogent3.core.moltype.MolType.first_gap"]], "first_invalid() (moltype method)": [[29, "cogent3.core.moltype.MolType.first_invalid"]], "first_non_strict() (moltype method)": [[29, "cogent3.core.moltype.MolType.first_non_strict"]], "first_not_in_alphabet() (moltype method)": [[29, "cogent3.core.moltype.MolType.first_not_in_alphabet"]], "gap_indices() (moltype method)": [[29, "cogent3.core.moltype.MolType.gap_indices"]], "gap_maps() (moltype method)": [[29, "cogent3.core.moltype.MolType.gap_maps"]], "gap_vector() (moltype method)": [[29, "cogent3.core.moltype.MolType.gap_vector"]], "get_css_style() (moltype method)": [[29, "cogent3.core.moltype.MolType.get_css_style"]], "get_degenerate_positions() (moltype method)": [[29, "cogent3.core.moltype.MolType.get_degenerate_positions"]], "get_type() (moltype method)": [[29, "cogent3.core.moltype.MolType.get_type"]], "gettype() (moltype method)": [[29, "cogent3.core.moltype.MolType.gettype"]], "is_ambiguity() (moltype method)": [[29, "cogent3.core.moltype.MolType.is_ambiguity"]], "is_degenerate() (moltype method)": [[29, "cogent3.core.moltype.MolType.is_degenerate"]], "is_gap() (moltype method)": [[29, "cogent3.core.moltype.MolType.is_gap"]], "is_gapped() (moltype method)": [[29, "cogent3.core.moltype.MolType.is_gapped"]], "is_strict() (moltype method)": [[29, "cogent3.core.moltype.MolType.is_strict"]], "is_valid() (moltype method)": [[29, "cogent3.core.moltype.MolType.is_valid"]], "make_array_seq() (moltype method)": [[29, "cogent3.core.moltype.MolType.make_array_seq"]], "make_seq() (moltype method)": [[29, "cogent3.core.moltype.MolType.make_seq"]], "must_match() (moltype method)": [[29, "cogent3.core.moltype.MolType.must_match"]], "must_pair() (moltype method)": [[29, "cogent3.core.moltype.MolType.must_pair"]], "mw() (moltype method)": [[29, "cogent3.core.moltype.MolType.mw"]], "possibilities() (moltype method)": [[29, "cogent3.core.moltype.MolType.possibilities"]], "rc() (moltype method)": [[29, "cogent3.core.moltype.MolType.rc"]], "strand_symmetric_motifs() (moltype method)": [[29, "cogent3.core.moltype.MolType.strand_symmetric_motifs"]], "to_json() (moltype method)": [[29, "cogent3.core.moltype.MolType.to_json"]], "to_regex() (moltype method)": [[29, "cogent3.core.moltype.MolType.to_regex"]], "to_rich_dict() (moltype method)": [[29, "cogent3.core.moltype.MolType.to_rich_dict"]], "valid_on_alphabet() (moltype method)": [[29, "cogent3.core.moltype.MolType.valid_on_alphabet"]], "verify_sequence() (moltype method)": [[29, "cogent3.core.moltype.MolType.verify_sequence"]], "what_ambiguity() (moltype method)": [[29, "cogent3.core.moltype.MolType.what_ambiguity"]], "dnasequence (class in cogent3.core.sequence)": [[31, "cogent3.core.sequence.DnaSequence"]], "protein (dnasequence attribute)": [[31, "cogent3.core.sequence.DnaSequence.PROTEIN"], [31, "cogent3.core.sequence.DnaSequence.protein"]], "add_annotation() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.add_annotation"]], "add_feature() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.add_feature"]], "annotate_from_gff() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.annotate_from_gff"]], "annotate_matches_to() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.annotate_matches_to"]], "annotations (dnasequence attribute)": [[31, "cogent3.core.sequence.DnaSequence.annotations"]], "attach_annotations() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.attach_annotations"]], "can_match() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.can_match"]], "can_mismatch() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.can_mismatch"]], "can_mispair() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.can_mispair"]], "can_pair() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.can_pair"]], "clear_annotations() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.clear_annotations"]], "codon_alphabet() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.codon_alphabet"]], "complement() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.complement"]], "copy() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.copy"]], "copy_annotations() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.copy_annotations"]], "count() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.count"]], "count_degenerate() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.count_degenerate"]], "count_gaps() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.count_gaps"]], "counts() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.counts"]], "degap() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.degap"]], "detach_annotations() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.detach_annotations"]], "diff() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.diff"]], "disambiguate() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.disambiguate"]], "distance() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.distance"]], "first_degenerate() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.first_degenerate"]], "first_gap() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.first_gap"]], "first_invalid() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.first_invalid"]], "first_non_strict() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.first_non_strict"]], "frac_diff() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.frac_diff"]], "frac_diff_gaps() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.frac_diff_gaps"]], "frac_diff_non_gaps() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.frac_diff_non_gaps"]], "frac_same() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.frac_same"]], "frac_same_gaps() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.frac_same_gaps"]], "frac_same_non_gaps() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.frac_same_non_gaps"]], "frac_similar() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.frac_similar"]], "gap_indices() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.gap_indices"]], "gap_maps() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.gap_maps"]], "gap_vector() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.gap_vector"]], "gapped_by_map() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.gapped_by_map"]], "gapped_by_map_motif_iter() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.gapped_by_map_motif_iter"]], "gapped_by_map_segment_iter() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.gapped_by_map_segment_iter"]], "get_annotations_matching() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.get_annotations_matching"]], "get_by_annotation() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.get_by_annotation"]], "get_drawable() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.get_drawable"]], "get_drawables() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.get_drawables"]], "get_in_motif_size() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.get_in_motif_size"]], "get_kmers() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.get_kmers"]], "get_name() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.get_name"]], "get_orf_positions() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.get_orf_positions"]], "get_region_covering_all() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.get_region_covering_all"]], "get_translation() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.get_translation"]], "get_type() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.get_type"]], "gettype() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.gettype"]], "has_terminal_stop() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.has_terminal_stop"]], "is_annotated() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.is_annotated"]], "is_degenerate() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.is_degenerate"]], "is_gap() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.is_gap"]], "is_gapped() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.is_gapped"]], "is_strict() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.is_strict"]], "is_valid() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.is_valid"]], "iter_kmers() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.iter_kmers"]], "line_wrap (dnasequence attribute)": [[31, "cogent3.core.sequence.DnaSequence.line_wrap"]], "matrix_distance() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.matrix_distance"]], "moltype (dnasequence attribute)": [[31, "cogent3.core.sequence.DnaSequence.moltype"]], "must_match() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.must_match"]], "must_pair() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.must_pair"]], "mw() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.mw"]], "parse_out_gaps() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.parse_out_gaps"]], "possibilities() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.possibilities"]], "rc() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.rc"]], "replace() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.replace"]], "resolveambiguities() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.resolveambiguities"]], "resolved_ambiguities() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.resolved_ambiguities"]], "reverse_complement() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.reverse_complement"]], "shuffle() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.shuffle"]], "sliding_windows() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.sliding_windows"]], "strand_symmetry() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.strand_symmetry"]], "strip_bad() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.strip_bad"]], "strip_bad_and_gaps() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.strip_bad_and_gaps"]], "strip_degenerate() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.strip_degenerate"]], "to_dna() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.to_dna"]], "to_fasta() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.to_fasta"]], "to_html() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.to_html"]], "to_json() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.to_json"]], "to_moltype() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.to_moltype"]], "to_rich_dict() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.to_rich_dict"]], "to_rna() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.to_rna"]], "translate() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.translate"]], "trim_stop_codon() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.trim_stop_codon"]], "with_masked_annotations() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.with_masked_annotations"]], "with_termini_unknown() (dnasequence method)": [[31, "cogent3.core.sequence.DnaSequence.with_termini_unknown"]], "proteinsequence (class in cogent3.core.sequence)": [[32, "cogent3.core.sequence.ProteinSequence"]], "add_annotation() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.add_annotation"]], "add_feature() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.add_feature"]], "annotate_from_gff() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.annotate_from_gff"]], "annotate_matches_to() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.annotate_matches_to"]], "annotations (proteinsequence attribute)": [[32, "cogent3.core.sequence.ProteinSequence.annotations"]], "attach_annotations() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.attach_annotations"]], "can_match() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.can_match"]], "can_mismatch() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.can_mismatch"]], "can_mispair() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.can_mispair"]], "can_pair() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.can_pair"]], "clear_annotations() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.clear_annotations"]], "complement() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.complement"]], "copy() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.copy"]], "copy_annotations() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.copy_annotations"]], "count() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.count"]], "count_degenerate() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.count_degenerate"]], "count_gaps() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.count_gaps"]], "counts() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.counts"]], "degap() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.degap"]], "detach_annotations() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.detach_annotations"]], "diff() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.diff"]], "disambiguate() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.disambiguate"]], "distance() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.distance"]], "first_degenerate() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.first_degenerate"]], "first_gap() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.first_gap"]], "first_invalid() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.first_invalid"]], "first_non_strict() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.first_non_strict"]], "frac_diff() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.frac_diff"]], "frac_diff_gaps() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.frac_diff_gaps"]], "frac_diff_non_gaps() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.frac_diff_non_gaps"]], "frac_same() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.frac_same"]], "frac_same_gaps() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.frac_same_gaps"]], "frac_same_non_gaps() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.frac_same_non_gaps"]], "frac_similar() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.frac_similar"]], "gap_indices() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.gap_indices"]], "gap_maps() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.gap_maps"]], "gap_vector() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.gap_vector"]], "gapped_by_map() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.gapped_by_map"]], "gapped_by_map_motif_iter() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.gapped_by_map_motif_iter"]], "gapped_by_map_segment_iter() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.gapped_by_map_segment_iter"]], "get_annotations_matching() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.get_annotations_matching"]], "get_by_annotation() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.get_by_annotation"]], "get_drawable() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.get_drawable"]], "get_drawables() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.get_drawables"]], "get_in_motif_size() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.get_in_motif_size"]], "get_kmers() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.get_kmers"]], "get_name() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.get_name"]], "get_region_covering_all() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.get_region_covering_all"]], "get_type() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.get_type"]], "gettype() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.gettype"]], "is_annotated() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.is_annotated"]], "is_degenerate() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.is_degenerate"]], "is_gap() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.is_gap"]], "is_gapped() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.is_gapped"]], "is_strict() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.is_strict"]], "is_valid() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.is_valid"]], "iter_kmers() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.iter_kmers"]], "line_wrap (proteinsequence attribute)": [[32, "cogent3.core.sequence.ProteinSequence.line_wrap"]], "matrix_distance() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.matrix_distance"]], "moltype (proteinsequence attribute)": [[32, "cogent3.core.sequence.ProteinSequence.moltype"]], "must_match() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.must_match"]], "must_pair() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.must_pair"]], "mw() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.mw"]], "parse_out_gaps() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.parse_out_gaps"]], "possibilities() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.possibilities"]], "rc() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.rc"]], "replace() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.replace"]], "resolveambiguities() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.resolveambiguities"]], "resolved_ambiguities() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.resolved_ambiguities"]], "shuffle() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.shuffle"]], "sliding_windows() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.sliding_windows"]], "strand_symmetry() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.strand_symmetry"]], "strip_bad() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.strip_bad"]], "strip_bad_and_gaps() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.strip_bad_and_gaps"]], "strip_degenerate() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.strip_degenerate"]], "to_fasta() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.to_fasta"]], "to_html() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.to_html"]], "to_json() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.to_json"]], "to_moltype() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.to_moltype"]], "to_rich_dict() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.to_rich_dict"]], "translate() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.translate"]], "with_masked_annotations() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.with_masked_annotations"]], "with_termini_unknown() (proteinsequence method)": [[32, "cogent3.core.sequence.ProteinSequence.with_termini_unknown"]], "protein (rnasequence attribute)": [[33, "cogent3.core.sequence.RnaSequence.PROTEIN"], [33, "cogent3.core.sequence.RnaSequence.protein"]], "rnasequence (class in cogent3.core.sequence)": [[33, "cogent3.core.sequence.RnaSequence"]], "add_annotation() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.add_annotation"]], "add_feature() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.add_feature"]], "annotate_from_gff() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.annotate_from_gff"]], "annotate_matches_to() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.annotate_matches_to"]], "annotations (rnasequence attribute)": [[33, "cogent3.core.sequence.RnaSequence.annotations"]], "attach_annotations() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.attach_annotations"]], "can_match() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.can_match"]], "can_mismatch() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.can_mismatch"]], "can_mispair() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.can_mispair"]], "can_pair() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.can_pair"]], "clear_annotations() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.clear_annotations"]], "codon_alphabet() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.codon_alphabet"]], "complement() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.complement"]], "copy() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.copy"]], "copy_annotations() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.copy_annotations"]], "count() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.count"]], "count_degenerate() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.count_degenerate"]], "count_gaps() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.count_gaps"]], "counts() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.counts"]], "degap() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.degap"]], "detach_annotations() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.detach_annotations"]], "diff() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.diff"]], "disambiguate() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.disambiguate"]], "distance() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.distance"]], "first_degenerate() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.first_degenerate"]], "first_gap() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.first_gap"]], "first_invalid() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.first_invalid"]], "first_non_strict() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.first_non_strict"]], "frac_diff() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.frac_diff"]], "frac_diff_gaps() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.frac_diff_gaps"]], "frac_diff_non_gaps() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.frac_diff_non_gaps"]], "frac_same() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.frac_same"]], "frac_same_gaps() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.frac_same_gaps"]], "frac_same_non_gaps() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.frac_same_non_gaps"]], "frac_similar() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.frac_similar"]], "gap_indices() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.gap_indices"]], "gap_maps() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.gap_maps"]], "gap_vector() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.gap_vector"]], "gapped_by_map() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.gapped_by_map"]], "gapped_by_map_motif_iter() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.gapped_by_map_motif_iter"]], "gapped_by_map_segment_iter() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.gapped_by_map_segment_iter"]], "get_annotations_matching() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.get_annotations_matching"]], "get_by_annotation() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.get_by_annotation"]], "get_drawable() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.get_drawable"]], "get_drawables() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.get_drawables"]], "get_in_motif_size() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.get_in_motif_size"]], "get_kmers() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.get_kmers"]], "get_name() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.get_name"]], "get_orf_positions() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.get_orf_positions"]], "get_region_covering_all() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.get_region_covering_all"]], "get_translation() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.get_translation"]], "get_type() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.get_type"]], "gettype() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.gettype"]], "has_terminal_stop() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.has_terminal_stop"]], "is_annotated() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.is_annotated"]], "is_degenerate() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.is_degenerate"]], "is_gap() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.is_gap"]], "is_gapped() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.is_gapped"]], "is_strict() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.is_strict"]], "is_valid() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.is_valid"]], "iter_kmers() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.iter_kmers"]], "line_wrap (rnasequence attribute)": [[33, "cogent3.core.sequence.RnaSequence.line_wrap"]], "matrix_distance() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.matrix_distance"]], "moltype (rnasequence attribute)": [[33, "cogent3.core.sequence.RnaSequence.moltype"]], "must_match() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.must_match"]], "must_pair() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.must_pair"]], "mw() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.mw"]], "parse_out_gaps() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.parse_out_gaps"]], "possibilities() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.possibilities"]], "rc() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.rc"]], "replace() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.replace"]], "resolveambiguities() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.resolveambiguities"]], "resolved_ambiguities() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.resolved_ambiguities"]], "reverse_complement() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.reverse_complement"]], "shuffle() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.shuffle"]], "sliding_windows() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.sliding_windows"]], "strand_symmetry() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.strand_symmetry"]], "strip_bad() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.strip_bad"]], "strip_bad_and_gaps() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.strip_bad_and_gaps"]], "strip_degenerate() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.strip_degenerate"]], "to_dna() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.to_dna"]], "to_fasta() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.to_fasta"]], "to_html() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.to_html"]], "to_json() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.to_json"]], "to_moltype() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.to_moltype"]], "to_rich_dict() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.to_rich_dict"]], "to_rna() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.to_rna"]], "translate() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.translate"]], "trim_stop_codon() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.trim_stop_codon"]], "with_masked_annotations() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.with_masked_annotations"]], "with_termini_unknown() (rnasequence method)": [[33, "cogent3.core.sequence.RnaSequence.with_termini_unknown"]], "filteringparser (class in cogent3.parse.table)": [[35, "cogent3.parse.table.FilteringParser"]], "columns (class in cogent3.util.table)": [[36, "cogent3.util.table.Columns"]], "add_column_from_str() (columns method)": [[36, "cogent3.util.table.Columns.add_column_from_str"]], "array (columns property)": [[36, "cogent3.util.table.Columns.array"]], "clear() (columns method)": [[36, "cogent3.util.table.Columns.clear"]], "get() (columns method)": [[36, "cogent3.util.table.Columns.get"]], "index_name (columns property)": [[36, "cogent3.util.table.Columns.index_name"]], "items() (columns method)": [[36, "cogent3.util.table.Columns.items"]], "iter_rows() (columns method)": [[36, "cogent3.util.table.Columns.iter_rows"]], "keys() (columns method)": [[36, "cogent3.util.table.Columns.keys"]], "order (columns property)": [[36, "cogent3.util.table.Columns.order"]], "pop() (columns method)": [[36, "cogent3.util.table.Columns.pop"]], "popitem() (columns method)": [[36, "cogent3.util.table.Columns.popitem"]], "setdefault() (columns method)": [[36, "cogent3.util.table.Columns.setdefault"]], "take_columns() (columns method)": [[36, "cogent3.util.table.Columns.take_columns"]], "to_dict() (columns method)": [[36, "cogent3.util.table.Columns.to_dict"]], "to_rich_dict() (columns method)": [[36, "cogent3.util.table.Columns.to_rich_dict"]], "update() (columns method)": [[36, "cogent3.util.table.Columns.update"]], "values() (columns method)": [[36, "cogent3.util.table.Columns.values"]], "table (class in cogent3.util.table)": [[37, "cogent3.util.table.Table"]], "appended() (table method)": [[37, "cogent3.util.table.Table.appended"]], "array (table property)": [[37, "cogent3.util.table.Table.array"]], "count() (table method)": [[37, "cogent3.util.table.Table.count"]], "count_unique() (table method)": [[37, "cogent3.util.table.Table.count_unique"]], "cross_join() (table method)": [[37, "cogent3.util.table.Table.cross_join"]], "distinct_values() (table method)": [[37, "cogent3.util.table.Table.distinct_values"]], "filtered() (table method)": [[37, "cogent3.util.table.Table.filtered"]], "filtered_by_column() (table method)": [[37, "cogent3.util.table.Table.filtered_by_column"]], "format (table property)": [[37, "cogent3.util.table.Table.format"]], "format_column() (table method)": [[37, "cogent3.util.table.Table.format_column"]], "get_columns() (table method)": [[37, "cogent3.util.table.Table.get_columns"]], "get_row_indices() (table method)": [[37, "cogent3.util.table.Table.get_row_indices"]], "head() (table method)": [[37, "cogent3.util.table.Table.head"]], "header (table property)": [[37, "cogent3.util.table.Table.header"]], "index_name (table property)": [[37, "cogent3.util.table.Table.index_name"]], "inner_join() (table method)": [[37, "cogent3.util.table.Table.inner_join"]], "joined() (table method)": [[37, "cogent3.util.table.Table.joined"]], "legend (table property)": [[37, "cogent3.util.table.Table.legend"]], "normalized() (table method)": [[37, "cogent3.util.table.Table.normalized"]], "set_repr_policy() (table method)": [[37, "cogent3.util.table.Table.set_repr_policy"]], "shape (table property)": [[37, "cogent3.util.table.Table.shape"]], "sorted() (table method)": [[37, "cogent3.util.table.Table.sorted"]], "space (table property)": [[37, "cogent3.util.table.Table.space"]], "sum_columns() (table method)": [[37, "cogent3.util.table.Table.sum_columns"]], "sum_rows() (table method)": [[37, "cogent3.util.table.Table.sum_rows"]], "summed() (table method)": [[37, "cogent3.util.table.Table.summed"]], "tail() (table method)": [[37, "cogent3.util.table.Table.tail"]], "title (table property)": [[37, "cogent3.util.table.Table.title"]], "to_categorical() (table method)": [[37, "cogent3.util.table.Table.to_categorical"]], "to_csv() (table method)": [[37, "cogent3.util.table.Table.to_csv"]], "to_dataframe() (table method)": [[37, "cogent3.util.table.Table.to_dataframe"]], "to_dict() (table method)": [[37, "cogent3.util.table.Table.to_dict"]], "to_html() (table method)": [[37, "cogent3.util.table.Table.to_html"]], "to_json() (table method)": [[37, "cogent3.util.table.Table.to_json"]], "to_latex() (table method)": [[37, "cogent3.util.table.Table.to_latex"]], "to_markdown() (table method)": [[37, "cogent3.util.table.Table.to_markdown"]], "to_plotly() (table method)": [[37, "cogent3.util.table.Table.to_plotly"]], "to_rich_dict() (table method)": [[37, "cogent3.util.table.Table.to_rich_dict"]], "to_rst() (table method)": [[37, "cogent3.util.table.Table.to_rst"]], "to_string() (table method)": [[37, "cogent3.util.table.Table.to_string"]], "to_tsv() (table method)": [[37, "cogent3.util.table.Table.to_tsv"]], "tolist() (table method)": [[37, "cogent3.util.table.Table.tolist"]], "transposed() (table method)": [[37, "cogent3.util.table.Table.transposed"]], "with_new_column() (table method)": [[37, "cogent3.util.table.Table.with_new_column"]], "with_new_header() (table method)": [[37, "cogent3.util.table.Table.with_new_header"]], "write() (table method)": [[37, "cogent3.util.table.Table.write"]], "phylonode (class in cogent3.core.tree)": [[39, "cogent3.core.tree.PhyloNode"]], "ancestors() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.ancestors"]], "append() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.append"]], "ascii_art() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.ascii_art"]], "balanced() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.balanced"]], "bifurcating() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.bifurcating"]], "child_groups() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.child_groups"]], "compare_by_names() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.compare_by_names"]], "compare_by_subsets() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.compare_by_subsets"]], "compare_by_tip_distances() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.compare_by_tip_distances"]], "compare_name() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.compare_name"]], "copy() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.copy"]], "copy_recursive() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.copy_recursive"]], "copy_topology() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.copy_topology"]], "deepcopy() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.deepcopy"]], "descendant_array() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.descendant_array"]], "distance() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.distance"]], "extend() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.extend"]], "get_connecting_edges() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.get_connecting_edges"]], "get_connecting_node() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.get_connecting_node"]], "get_distances() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.get_distances"]], "get_edge_names() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.get_edge_names"]], "get_edge_vector() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.get_edge_vector"]], "get_figure() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.get_figure"]], "get_max_tip_tip_distance() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.get_max_tip_tip_distance"]], "get_newick() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.get_newick"]], "get_newick_recursive() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.get_newick_recursive"]], "get_node_matching_name() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.get_node_matching_name"]], "get_node_names() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.get_node_names"]], "get_nodes_dict() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.get_nodes_dict"]], "get_param_value() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.get_param_value"]], "get_sub_tree() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.get_sub_tree"]], "get_tip_names() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.get_tip_names"]], "get_xml() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.get_xml"]], "index_in_parent() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.index_in_parent"]], "insert() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.insert"]], "is_root() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.is_root"]], "is_tip() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.is_tip"]], "isroot() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.isroot"]], "istip() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.istip"]], "iter_nontips() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.iter_nontips"]], "iter_tips() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.iter_tips"]], "last_common_ancestor() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.last_common_ancestor"]], "lca() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.lca"]], "length (phylonode property)": [[39, "cogent3.core.tree.PhyloNode.length"]], "levelorder() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.levelorder"]], "lowest_common_ancestor() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.lowest_common_ancestor"]], "make_tree_array() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.make_tree_array"]], "max_tip_tip_distance() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.max_tip_tip_distance"]], "multifurcating() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.multifurcating"]], "name_unnamed_nodes() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.name_unnamed_nodes"]], "non_tip_children() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.non_tip_children"]], "nontips() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.nontips"]], "parent (phylonode property)": [[39, "cogent3.core.tree.PhyloNode.parent"]], "pop() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.pop"]], "postorder() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.postorder"]], "pre_and_postorder() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.pre_and_postorder"]], "preorder() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.preorder"]], "prune() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.prune"]], "reassign_names() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.reassign_names"]], "remove() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.remove"]], "remove_deleted() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.remove_deleted"]], "remove_node() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.remove_node"]], "root() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.root"]], "root_at_midpoint() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.root_at_midpoint"]], "rooted_at() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.rooted_at"]], "rooted_with_tip() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.rooted_with_tip"]], "same_shape() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.same_shape"]], "same_topology() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.same_topology"]], "scale_branch_lengths() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.scale_branch_lengths"]], "separation() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.separation"]], "set_max_tip_tip_distance() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.set_max_tip_tip_distance"]], "set_param_value() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.set_param_value"]], "set_tip_distances() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.set_tip_distances"]], "siblings() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.siblings"]], "sorted() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.sorted"]], "subset() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.subset"]], "subsets() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.subsets"]], "tip_children() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.tip_children"]], "tip_to_tip_distances() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.tip_to_tip_distances"]], "tips() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.tips"]], "tips_within_distance() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.tips_within_distance"]], "to_json() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.to_json"]], "to_rich_dict() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.to_rich_dict"]], "total_descending_branch_length() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.total_descending_branch_length"]], "total_length() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.total_length"]], "traverse() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.traverse"]], "traverse_recursive() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.traverse_recursive"]], "unrooted() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.unrooted"]], "unrooted_deepcopy() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.unrooted_deepcopy"]], "write() (phylonode method)": [[39, "cogent3.core.tree.PhyloNode.write"]], "cogent3.util.misc": [[84, "index-0"]], "cogent.app": [[126, "term-cogent.app"], [129, "term-cogent.app"]], "cogent.db.ensembl": [[126, "term-cogent.db.ensembl"], [129, "term-cogent.db.ensembl"]], "cogent.db.eutils": [[126, "term-cogent.db.eutils"], [129, "term-cogent.db.eutils"]], "cogent.maths.unifrac": [[126, "term-cogent.maths.unifrac"], [129, "term-cogent.maths.unifrac"]], "cogent.motif": [[126, "term-cogent.motif"], [129, "term-cogent.motif"]], "cogent.seqsim": [[126, "term-cogent.seqsim"], [129, "term-cogent.seqsim"]], "cogent.struct": [[126, "term-cogent.struct"], [129, "term-cogent.struct"]]}})